'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Animation = require('rsuite-utils/lib/Animation');

var _utils = require('rsuite-utils/lib/utils');

var _index = require('./constants/index');

var _notice = require('./notice');

var _notice2 = _interopRequireDefault(_notice);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var id = 0;
var getUid = function getUid() {
  id += 1;
  return _index.namespace + '-notification-' + Date.now() + '-' + id;
};

var Notification = function (_React$Component) {
  _inherits(Notification, _React$Component);

  _createClass(Notification, null, [{
    key: 'newInstance',
    value: function newInstance(properties, callback) {
      var _ref = properties || {},
          getContainer = _ref.getContainer,
          props = _objectWithoutProperties(_ref, ['getContainer']);

      var div = document.createElement('div');
      if (getContainer) {
        var root = getContainer();
        root.appendChild(div);
      } else {
        document.body && document.body.appendChild(div);
      }
      var called = false;

      function ref(notification) {
        if (called) {
          return;
        }
        called = true;
        callback({
          notice: function notice(noticeProps) {
            notification.add(noticeProps);
          },
          remove: function remove(key) {
            notification.remove(key);
          },

          component: notification,
          destroy: function destroy() {
            _reactDom2.default.unmountComponentAtNode(div);
            document.removeChild(div);
          }
        });
      }

      _reactDom2.default.render(React.createElement(Notification, _extends({}, props, { ref: ref })), div);
    }
  }]);

  function Notification(props) {
    _classCallCheck(this, Notification);

    var _this = _possibleConstructorReturn(this, (Notification.__proto__ || Object.getPrototypeOf(Notification)).call(this, props));

    _this.add = function (notice) {
      var notices = _this.state.notices;

      var key = void 0;
      if (notice.key === undefined || notice.key === null) {
        key = getUid();
      } else {
        key = notice.key;
      }
      notice.key = key;
      notice.animated = true;
      if (!notices.filter(function (n) {
        return n.key === key;
      }).length) {
        _this.setState({
          notices: notices.concat(notice)
        });
      }
    };

    _this.remove = function (key) {
      var notices = _this.state.notices;

      var nextNotices = notices.map(function (n) {
        if (n.key === key) {
          n.animated = false;
        }
        return n;
      });
      _this.setState({
        notices: nextNotices
      }, function () {
        setTimeout(function () {
          _this.actualRemove(key);
        }, 1000);
      });
    };

    _this.actualRemove = function (key) {
      _this.setState(function (prevState) {
        return {
          notices: prevState.notices.filter(function (notice) {
            return notice.key !== key;
          })
        };
      });
    };

    _this.addPrefix = function (name) {
      return (0, _utils.prefix)(_this.props.classPrefix)(name);
    };

    _this.state = {
      animated: false,
      notices: []
    };
    return _this;
  }

  _createClass(Notification, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var notices = this.state.notices;
      var _props = this.props,
          className = _props.className,
          style = _props.style,
          classPrefix = _props.classPrefix;


      var noticeNodes = notices.map(function (notice) {
        return React.createElement(
          _Animation.Transition,
          {
            key: notice.key,
            'in': notice.animated,
            exitedClassName: _this2.addPrefix('fade-exited'),
            exitingClassName: _this2.addPrefix(['fade-entered', 'fade-leave-active']),
            enteringClassName: _this2.addPrefix('fade-entering'),
            enteredClassName: _this2.addPrefix('fade-entered'),
            timeout: 300
          },
          React.createElement(_notice2.default, _extends({
            classPrefix: classPrefix
          }, notice, {
            onClose: (0, _utils.createChainedFunction)(function () {
              return _this2.remove(notice.key);
            }, notice.onClose)
          }))
        );
      });

      var classes = (0, _classnames2.default)(classPrefix, className);
      return React.createElement(
        'div',
        { className: classes, style: style },
        noticeNodes
      );
    }
  }]);

  return Notification;
}(React.Component);

Notification.propTypes = {
  className: _propTypes2.default.string,
  classPrefix: _propTypes2.default.string,
  style: _propTypes2.default.object
};
Notification.defaultProps = {
  classPrefix: _index.namespace + '-notification',
  style: {
    top: '5px'
  }
};
Notification.handledProps = ['className', 'classPrefix', 'style'];
exports.default = Notification;