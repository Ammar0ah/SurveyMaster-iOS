'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('rsuite-utils/lib/utils');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Notice = function (_React$Component) {
  _inherits(Notice, _React$Component);

  function Notice() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Notice);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Notice.__proto__ || Object.getPrototypeOf(Notice)).call.apply(_ref, [this].concat(args))), _this), _this.close = function () {
      var onClose = _this.props.onClose;

      _this.clearCloseTimer();
      onClose && onClose();
    }, _this.addPrefix = function (name) {
      return (0, _utils.prefix)(_this.props.classPrefix)(name);
    }, _this.closeTimer = null, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Notice, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var duration = this.props.duration;

      if (duration) {
        this.closeTimer = setTimeout(function () {
          _this2.close();
        }, duration);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.clearCloseTimer();
    }
  }, {
    key: 'clearCloseTimer',
    value: function clearCloseTimer() {
      if (this.closeTimer) {
        clearTimeout(this.closeTimer);
        this.closeTimer = null;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames;

      var _props = this.props,
          classPrefix = _props.classPrefix,
          closable = _props.closable,
          className = _props.className,
          content = _props.content,
          style = _props.style,
          _props$type = _props.type,
          type = _props$type === undefined ? '' : _props$type;

      var noticeClass = this.addPrefix('notice');
      var wrapperClass = (0, _classnames2.default)(className, noticeClass + '-wrapper');
      var classes = (0, _classnames2.default)(noticeClass, (_classNames = {}, _defineProperty(_classNames, this.addPrefix('notice-closable'), closable), _defineProperty(_classNames, classPrefix + '-' + type, !!type), _classNames));

      return React.createElement(
        'div',
        { className: wrapperClass },
        React.createElement(
          'div',
          { className: classes, style: style },
          React.createElement(
            'div',
            { className: noticeClass + '-content' },
            content
          ),
          closable && React.createElement(
            'div',
            {
              role: 'button',
              tabIndex: '-1',
              onClick: this.close,
              className: noticeClass + '-close'
            },
            React.createElement('span', { className: noticeClass + '-close-x' })
          )
        )
      );
    }
  }]);

  return Notice;
}(React.Component);

Notice.propTypes = {
  duration: _propTypes2.default.number.isRequired,
  content: function content(props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  },
  onClose: _propTypes2.default.func,
  closable: _propTypes2.default.bool,
  classPrefix: _propTypes2.default.string.isRequired,
  className: _propTypes2.default.string,
  style: _propTypes2.default.object,
  type: _propTypes2.default.string
};
Notice.handledProps = ['className', 'classPrefix', 'closable', 'content', 'duration', 'onClose', 'style', 'type'];
exports.default = Notice;