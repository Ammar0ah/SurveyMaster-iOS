'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('rsuite-utils/lib/utils');

var _core = require('../core');

var _core2 = _interopRequireDefault(_core);

var _index = require('../constants/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var alertInstance = void 0;
var defaultDuration = 2000;
var defaultTop = 5;
var defaultClassPrefix = _index.namespace + '-notification';
var getContainer = void 0;

var addPrefix = function addPrefix(name) {
  return (0, _utils.prefix)(defaultClassPrefix)(name);
};

function getInstance(callback) {
  _core2.default.newInstance({
    style: { top: defaultTop },
    duration: defaultDuration,
    className: addPrefix('alert'),
    classPrefix: defaultClassPrefix,
    getContainer: getContainer
  }, callback);
}

function notice(content) {
  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDuration;
  var onClose = arguments[2];
  var type = arguments[3];

  if (typeof content === 'function') {
    content = content();
  }

  var noticePorps = {
    content: content,
    duration: duration,
    onClose: onClose,
    type: type,
    closable: true
  };

  if (!alertInstance) {
    getInstance(function (notificationInstance) {
      alertInstance = notificationInstance;
      notificationInstance.notice(noticePorps);
    });
  } else {
    alertInstance.notice(noticePorps);
  }
}

exports.default = {
  success: function success(content, duration, onClose) {
    notice(content, duration, onClose, _index.NOTICE_TYPES.SUCCESS);
  },
  error: function error(content, duration, onClose) {
    notice(content, duration, onClose, _index.NOTICE_TYPES.ERROR);
  },
  info: function info(content, duration, onClose) {
    notice(content, duration, onClose, _index.NOTICE_TYPES.INFO);
  },
  warning: function warning(content, duration, onClose) {
    notice(content, duration, onClose, _index.NOTICE_TYPES.WARNING);
  },

  /**
   *
   * @param {*} options{
   *  top,
   *  duration,
   *  getContainer
   * }
   */
  config: function config(options) {
    if (options.top !== undefined) {
      defaultTop = options.top;
      alertInstance = null;
    }
    if (options.duration !== undefined) {
      defaultDuration = options.duration;
    }
    if (options.classPrefix !== undefined) {
      defaultClassPrefix = options.classPrefix;
    }
    if (options.getContainer !== undefined) {
      getContainer = options.getContainer;
    }
  }
};