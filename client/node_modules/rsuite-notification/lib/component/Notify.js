'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('rsuite-utils/lib/utils');

var _core = require('../core');

var _core2 = _interopRequireDefault(_core);

var _index = require('../constants/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultPlacement = 'topRight';
var defaultTop = 24;
var defaultBottom = 24;
var defaultDuration = 4500;
var notityInstance = {};
var defaultClassPrefix = _index.namespace + '-notification';
var getContainer = void 0;

var addPrefix = function addPrefix(name) {
  return (0, _utils.prefix)(defaultClassPrefix)(name);
};

function getPlacementStyle(config) {
  var style = {};
  var className = void 0;
  var placement = config.placement || defaultPlacement;
  var top = config.top || defaultTop;
  var bottom = config.bottom || defaultBottom;

  switch (placement) {
    case _index.PLACEMENT_TYPES.TOPLEFT:
      style = {
        top: top,
        left: 24
      };
      className = addPrefix('top-left');
      break;
    case _index.PLACEMENT_TYPES.TOPRIGHT:
      style = {
        top: top,
        right: 24
      };
      className = addPrefix('top-right');
      break;
    case _index.PLACEMENT_TYPES.BOTTOMLEFT:
      style = {
        bottom: bottom,
        left: 24
      };
      className = addPrefix('bottom-left');
      break;
    case _index.PLACEMENT_TYPES.BOTTOMRIGHT:
      style = {
        bottom: bottom,
        right: 24
      };
      className = addPrefix('bottom-right');
      break;
    default:
      style = {
        top: top,
        left: 24
      };
      break;
  }
  return { style: style, className: className };
}

function getInstance(config, callback) {
  var _className;

  var className = (_className = {}, _defineProperty(_className, addPrefix('notify'), true), _defineProperty(_className, getPlacementStyle(config).className, true), _className);
  _core2.default.newInstance({
    style: getPlacementStyle(config).style,
    className: (0, _classnames2.default)(className),
    classPrefix: defaultClassPrefix,
    getContainer: getContainer
  }, callback);
}

/**
 *
 * @param {*} config: {} : title,description,style,duration,placement,top, bottom, onClose,type, key
 */
function notice(config) {
  var duration = void 0;
  var description = config.description;
  var placement = config.placement || defaultPlacement;

  if (typeof description === 'function') {
    description = description();
  }
  if (config.duration === undefined) {
    duration = defaultDuration;
  } else {
    duration = config.duration;
  }

  var content = _react2.default.createElement(
    'div',
    { className: addPrefix('content') },
    _react2.default.createElement(
      'div',
      { className: addPrefix('title') },
      config.title
    ),
    _react2.default.createElement(
      'div',
      { className: addPrefix('description') },
      description
    )
  );

  var noticeProps = _extends({
    content: content,
    duration: duration,
    closable: true,
    onClose: config.onClose,
    key: config.key,
    type: config.type
  }, config);

  var instance = notityInstance[placement];
  if (!instance) {
    getInstance(config, function (notificationInstance) {
      notityInstance[placement] = notificationInstance;
      notificationInstance.notice(noticeProps);
    });
  } else {
    instance.notice(noticeProps);
  }
}

notice.handledProps = [];
exports.default = {
  open: function open(config) {
    notice(config);
  },
  success: function success(config) {
    config.type = _index.NOTICE_TYPES.SUCCESS;
    notice(config);
  },
  error: function error(config) {
    config.type = _index.NOTICE_TYPES.ERROR;
    notice(config);
  },
  info: function info(config) {
    config.type = _index.NOTICE_TYPES.INFO;
    notice(config);
  },
  warning: function warning(config) {
    config.type = _index.NOTICE_TYPES.WARNING;
    notice(config);
  },
  remove: function remove(key) {
    if (notityInstance[defaultPlacement]) {
      notityInstance[defaultPlacement].remove(key);
    }
  },


  /**
   * 全局配置方法
   * @param {*} options{
   *  top,
   *  bottom,
   *  classPrefix,
   *  duration,
   *  getContainer
   * }
   */
  config: function config(options) {
    if (options.top !== undefined) {
      defaultTop = options.top;
      // 如果存在实例，在设置新的top值后，需要将实例置空
      notityInstance = {};
    }
    if (options.bottom !== undefined) {
      defaultBottom = options.bottom;
      notityInstance = {};
    }
    if (options.duration !== undefined) {
      defaultDuration = options.duration;
    }

    if (options.classPrefix !== undefined) {
      defaultClassPrefix = options.classPrefix;
    }

    if (options.getContainer !== undefined) {
      getContainer = options.getContainer;
    }
  }
};