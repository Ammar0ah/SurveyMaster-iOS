'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _maxBy = require('lodash/maxBy');

var _maxBy2 = _interopRequireDefault(_maxBy);

var _minBy = require('lodash/minBy');

var _minBy2 = _interopRequireDefault(_minBy);

var _capitalize = require('lodash/capitalize');

var _capitalize2 = _interopRequireDefault(_capitalize);

var _kebabCase = require('lodash/kebabCase');

var _kebabCase2 = _interopRequireDefault(_kebabCase);

var _domLib = require('dom-lib');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getContainerDimensions(containerNode) {
  var width = void 0;
  var height = void 0;
  var scroll = void 0;
  var scrollX = void 0;
  var scrollY = void 0;
  if (containerNode.tagName === 'BODY') {
    width = window.innerWidth;
    height = window.innerHeight;
    scrollY = (0, _domLib.scrollTop)((0, _domLib.ownerDocument)(containerNode).documentElement) || (0, _domLib.scrollTop)(containerNode);
    scrollX = (0, _domLib.scrollLeft)((0, _domLib.ownerDocument)(containerNode).documentElement) || (0, _domLib.scrollLeft)(containerNode);
    scroll = scrollY;
  } else {
    var _getOffset = (0, _domLib.getOffset)(containerNode);

    width = _getOffset.width;
    height = _getOffset.height;

    scrollY = (0, _domLib.scrollTop)(containerNode);
    scrollX = (0, _domLib.scrollLeft)(containerNode);
    scroll = scrollY;
  }
  return { width: width, height: height, scroll: scroll, scrollX: scrollX, scrollY: scrollY };
}

function getTopDelta(top, overlayHeight, container, padding) {
  var containerDimensions = getContainerDimensions(container);
  var containerScroll = containerDimensions.scroll;
  var containerHeight = containerDimensions.height;

  var topEdgeOffset = top - padding - containerScroll;
  var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;

  if (topEdgeOffset < 0) {
    return -topEdgeOffset;
  } else if (bottomEdgeOffset > containerHeight) {
    return containerHeight - bottomEdgeOffset;
  }

  return 0;
}

function getLeftDelta(left, overlayWidth, container, padding) {
  var containerDimensions = getContainerDimensions(container);
  var containerWidth = containerDimensions.width;

  var leftEdgeOffset = left - padding;
  var rightEdgeOffset = left + padding + overlayWidth;

  if (leftEdgeOffset < 0) {
    return -leftEdgeOffset;
  } else if (rightEdgeOffset > containerWidth) {
    return containerWidth - rightEdgeOffset;
  }

  return 0;
}

var utils = {
  getContainerDimensions: getContainerDimensions,
  getPosition: function getPosition(target, container) {
    var offset = container.tagName === 'BODY' ? (0, _domLib.getOffset)(target) : (0, _domLib.getPosition)(target, container);
    return offset;
  },
  calcAutoPlacement: function calcAutoPlacement(placement, targetOffset, container, overlay) {
    var _getContainerDimensio = getContainerDimensions(container),
        width = _getContainerDimensio.width,
        height = _getContainerDimensio.height,
        scrollX = _getContainerDimensio.scrollX,
        scrollY = _getContainerDimensio.scrollY;

    var left = targetOffset.left - scrollX - overlay.width;
    var top = targetOffset.top - scrollY - overlay.height;
    var right = width - targetOffset.left - targetOffset.width + scrollX - overlay.width;
    var bottom = height - targetOffset.top - targetOffset.height + scrollY - overlay.height;

    var horizontal = [{ key: 'left', value: left }, { key: 'right', value: right }];
    var vertical = [{ key: 'top', value: top }, { key: 'bottom', value: bottom }];
    var AV = 'autoVertical';
    var AH = 'autoHorizontal';

    var direction = void 0;
    var align = void 0;

    if (placement.indexOf(AV) !== -1) {
      direction = (0, _maxBy2.default)(vertical, function (o) {
        return o.value;
      });
      return placement === AV ? direction.key : '' + direction.key + placement.replace(AV, '');
    } else if (placement.indexOf(AH) !== -1) {
      direction = (0, _maxBy2.default)(horizontal, function (o) {
        return o.value;
      });
      return placement === AH ? direction.key : '' + direction.key + placement.replace(AH, '');
    }

    /**
     * Precedence Vertical
     * [...vertical, ...horizontal]
     */
    direction = (0, _maxBy2.default)([].concat(vertical, horizontal), function (o) {
      return o.value;
    });

    if (direction.key === 'left' || direction.key === 'right') {
      align = (0, _minBy2.default)(vertical, function (o) {
        return o.value;
      });
    } else {
      align = (0, _minBy2.default)(horizontal, function (o) {
        return o.value;
      });
    }

    return '' + direction.key + (0, _capitalize2.default)(align.key);
  },
  calcOverlayPosition: function calcOverlayPosition(placement, overlayNode, target, container, padding) {
    var childOffset = utils.getPosition(target, container);

    var _getOffset2 = (0, _domLib.getOffset)(overlayNode),
        overlayHeight = _getOffset2.height,
        overlayWidth = _getOffset2.width;

    if (placement && placement.indexOf('auto') >= 0) {
      placement = this.calcAutoPlacement(placement, childOffset, container, {
        height: overlayHeight,
        width: overlayWidth
      });
    }

    var positionLeft = void 0;
    var positionTop = void 0;
    var arrowOffsetLeft = void 0;
    var arrowOffsetTop = void 0;

    if (placement === 'left' || placement === 'right') {
      positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;

      if (placement === 'left') {
        positionLeft = childOffset.left - overlayWidth;
      } else {
        positionLeft = childOffset.left + childOffset.width;
      }

      var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);

      positionTop += topDelta;
      arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';
      arrowOffsetLeft = undefined;
    } else if (placement === 'top' || placement === 'bottom') {
      positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;

      if (placement === 'top') {
        positionTop = childOffset.top - overlayHeight;
      } else {
        positionTop = childOffset.top + childOffset.height;
      }

      var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
      positionLeft += leftDelta;
      arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayWidth) + '%';
      arrowOffsetTop = undefined;
    } else if (placement === 'topLeft') {
      positionLeft = childOffset.left;
      positionTop = childOffset.top - overlayHeight;
    } else if (placement === 'topRight') {
      positionLeft = childOffset.left + (childOffset.width - overlayWidth);
      positionTop = childOffset.top - overlayHeight;
    } else if (placement === 'leftTop') {
      positionLeft = childOffset.left - overlayWidth;
      positionTop = childOffset.top;
    } else if (placement === 'leftBottom') {
      positionLeft = childOffset.left - overlayWidth;
      positionTop = childOffset.top + (childOffset.height - overlayHeight);
    } else if (placement === 'bottomLeft') {
      positionLeft = childOffset.left;
      positionTop = childOffset.top + childOffset.height;
    } else if (placement === 'bottomRight') {
      positionLeft = childOffset.left + (childOffset.width - overlayWidth);
      positionTop = childOffset.top + childOffset.height;
    } else if (placement === 'rightTop') {
      positionLeft = childOffset.left + childOffset.width;
      positionTop = childOffset.top;
    } else if (placement === 'rightBottom') {
      positionLeft = childOffset.left + childOffset.width;
      positionTop = childOffset.top + (childOffset.height - overlayHeight);
    } else {
      throw new Error('calcOverlayPosition(): No such placement of "' + placement + '" found.');
    }

    return {
      positionLeft: positionLeft,
      positionTop: positionTop,
      arrowOffsetLeft: arrowOffsetLeft,
      arrowOffsetTop: arrowOffsetTop,
      positionClassName: 'placement-' + (0, _kebabCase2.default)(placement)
    };
  }
};

exports.default = utils;