'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _getUnhandledProps = require('../utils/getUnhandledProps');

var _getUnhandledProps2 = _interopRequireDefault(_getUnhandledProps);

var _constants = require('./constants');

var _prefix = require('../utils/prefix');

var _prefix2 = _interopRequireDefault(_prefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toggle = function (_React$Component) {
  _inherits(Toggle, _React$Component);

  function Toggle() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Toggle);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Toggle.__proto__ || Object.getPrototypeOf(Toggle)).call.apply(_ref, [this].concat(args))), _this), _this.addPrefix = function (name) {
      return (0, _prefix2.default)(_this.props.classPrefix)(name);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Toggle, [{
    key: 'renderToggleClean',
    value: function renderToggleClean() {
      var onClean = this.props.onClean;

      return React.createElement(
        'span',
        {
          className: this.addPrefix('clean'),
          role: 'button',
          tabIndex: '-1',
          onClick: function onClick(e) {
            onClean && onClean();
            e.stopPropagation();
          }
        },
        '\u2715'
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          Component = _props.componentClass,
          children = _props.children,
          className = _props.className,
          hasValue = _props.hasValue,
          cleanable = _props.cleanable,
          classPrefix = _props.classPrefix,
          caret = _props.caret,
          rest = _objectWithoutProperties(_props, ['componentClass', 'children', 'className', 'hasValue', 'cleanable', 'classPrefix', 'caret']);

      var defaultClassName = Component === 'a' ? classPrefix : this.addPrefix('custom');
      var classes = (0, _classnames2.default)(defaultClassName, className, _defineProperty({}, this.addPrefix('cleanable'), hasValue && cleanable));
      var unhandled = (0, _getUnhandledProps2.default)(Toggle, rest);

      return React.createElement(
        Component,
        _extends({}, unhandled, { role: 'button', tabIndex: '-1', className: classes }),
        hasValue ? React.createElement(
          'span',
          { className: this.addPrefix('value') },
          children
        ) : React.createElement(
          'span',
          { className: this.addPrefix('placeholder') },
          children
        ),
        caret && React.createElement('span', { className: this.addPrefix('caret') }),
        hasValue && cleanable && this.renderToggleClean()
      );
    }
  }]);

  return Toggle;
}(React.Component);

Toggle.defaultProps = {
  componentClass: 'a',
  classPrefix: _constants.namespace + '-toggle',
  caret: true
};
Toggle.handledProps = ['caret', 'children', 'className', 'classPrefix', 'cleanable', 'componentClass', 'hasValue', 'onClean'];
exports.default = Toggle;