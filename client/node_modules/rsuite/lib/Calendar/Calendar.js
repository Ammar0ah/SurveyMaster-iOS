"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _MonthDropdown = _interopRequireDefault(require("./MonthDropdown"));

var _TimeDropdown = _interopRequireDefault(require("./TimeDropdown"));

var _View = _interopRequireDefault(require("./View"));

var _Header = _interopRequireDefault(require("./Header"));

var _utils = require("../utils");

var _disabledTime = _interopRequireWildcard(require("../utils/disabledTime"));

var _formatUtils = require("../utils/formatUtils");

var _add_months = _interopRequireDefault(require("date-fns/add_months"));

var Calendar =
/*#__PURE__*/
function (_React$PureComponent) {
  (0, _inheritsLoose2.default)(Calendar, _React$PureComponent);

  function Calendar() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "disabledDate", function (date) {
      var disabledDate = _this.props.disabledDate;

      if (disabledDate && disabledDate(date)) {
        return true;
      }

      return false;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "disabledTime", function (date) {
      return (0, _disabledTime.default)(_this.props, date);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMoveForword", function () {
      var _this$props = _this.props,
          onMoveForword = _this$props.onMoveForword,
          pageDate = _this$props.pageDate;
      onMoveForword && onMoveForword((0, _add_months.default)(pageDate, 1));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMoveBackward", function () {
      var _this$props2 = _this.props,
          onMoveBackward = _this$props2.onMoveBackward,
          pageDate = _this$props2.pageDate;
      onMoveBackward && onMoveBackward((0, _add_months.default)(pageDate, -1));
    });
    return _this;
  }

  var _proto = Calendar.prototype;

  _proto.render = function render() {
    var _classNames;

    var _this$props3 = this.props,
        calendarState = _this$props3.calendarState,
        pageDate = _this$props3.pageDate,
        onSelect = _this$props3.onSelect,
        onToggleMonthDropdown = _this$props3.onToggleMonthDropdown,
        onToggleTimeDropdown = _this$props3.onToggleTimeDropdown,
        onChangePageDate = _this$props3.onChangePageDate,
        onChangePageTime = _this$props3.onChangePageTime,
        format = _this$props3.format,
        calendarRef = _this$props3.calendarRef,
        className = _this$props3.className,
        isoWeek = _this$props3.isoWeek,
        limitEndYear = _this$props3.limitEndYear,
        classPrefix = _this$props3.classPrefix,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props3, ["calendarState", "pageDate", "onSelect", "onToggleMonthDropdown", "onToggleTimeDropdown", "onChangePageDate", "onChangePageTime", "format", "calendarRef", "className", "isoWeek", "limitEndYear", "classPrefix"]);
    var showDate = (0, _formatUtils.shouldDate)(format);
    var showTime = (0, _formatUtils.shouldTime)(format);
    var showMonth = (0, _formatUtils.shouldMonth)(format);
    var onlyShowTime = showTime && !showDate && !showMonth;
    var onlyShowMonth = showMonth && !showDate && !showTime;
    var dropTime = calendarState === 'DROP_TIME' || onlyShowTime;
    var dropMonth = calendarState === 'DROP_MONTH' || onlyShowMonth;
    var addPrefix = (0, _utils.prefix)(classPrefix);
    var calendarClasses = (0, _classnames.default)(classPrefix, className, (_classNames = {}, _classNames[addPrefix('show-time-dropdown')] = dropTime, _classNames[addPrefix('show-month-dropdown')] = dropMonth, _classNames));
    var unhandled = (0, _utils.getUnhandledProps)(Calendar, rest);
    var timeDropdownProps = (0, _pick2.default)(rest, _disabledTime.calendarOnlyProps);
    return React.createElement("div", (0, _extends2.default)({}, unhandled, {
      className: calendarClasses,
      ref: calendarRef
    }), React.createElement(_Header.default, {
      date: pageDate,
      format: format,
      showMonth: showMonth,
      showDate: showDate,
      showTime: showTime,
      disabledDate: this.disabledDate,
      disabledTime: this.disabledTime,
      onMoveForword: this.handleMoveForword,
      onMoveBackward: this.handleMoveBackward,
      onToggleMonthDropdown: onToggleMonthDropdown,
      onToggleTimeDropdown: onToggleTimeDropdown
    }), showDate && React.createElement(_View.default, {
      key: "MonthView",
      activeDate: pageDate,
      onSelect: onSelect,
      isoWeek: isoWeek,
      disabledDate: this.disabledDate
    }), showMonth && React.createElement(_MonthDropdown.default, {
      date: pageDate,
      onSelect: onChangePageDate,
      show: dropMonth,
      limitEndYear: limitEndYear,
      disabledMonth: this.disabledDate
    }), showTime && React.createElement(_TimeDropdown.default, (0, _extends2.default)({}, timeDropdownProps, {
      date: pageDate,
      format: format,
      show: dropTime,
      onSelect: onChangePageTime
    })));
  };

  return Calendar;
}(React.PureComponent);

(0, _defineProperty2.default)(Calendar, "handledProps", ["calendarRef", "calendarState", "className", "classPrefix", "disabledDate", "disabledHours", "disabledMinutes", "disabledSeconds", "format", "hideHours", "hideMinutes", "hideSeconds", "isoWeek", "limitEndYear", "onChangePageDate", "onChangePageTime", "onMoveBackward", "onMoveForword", "onSelect", "onToggleMonthDropdown", "onToggleTimeDropdown", "pageDate"]);
var enhance = (0, _utils.defaultProps)({
  classPrefix: 'calendar'
});

var _default = enhance(Calendar);

exports.default = _default;