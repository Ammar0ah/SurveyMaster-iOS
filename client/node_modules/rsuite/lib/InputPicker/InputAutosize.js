"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _BrowserDetection = require("../utils/BrowserDetection");

var _utils = require("../utils");

var sizerStyle = {
  position: 'absolute',
  top: 0,
  left: 0,
  visibility: 'hidden',
  height: 0,
  overflow: 'scroll',
  whiteSpace: 'pre'
};

var copyStyles = function copyStyles(styles, node) {
  node.style.fontSize = styles.fontSize;
  node.style.fontFamily = styles.fontFamily;
  node.style.fontWeight = styles.fontWeight;
  node.style.fontStyle = styles.fontStyle;
  node.style.letterSpacing = styles.letterSpacing;
  node.style.textTransform = styles.textTransform;
};

var InputAutosize =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(InputAutosize, _React$Component);

  function InputAutosize(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "mounted", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "input", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "placeHolderSizer", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sizer", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindInputRef", function (ref) {
      _this.input = ref;
      var inputRef = _this.props.inputRef;
      inputRef && inputRef(ref);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindPlaceHolderSizerRef", function (ref) {
      _this.placeHolderSizer = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindSizerRef", function (ref) {
      _this.sizer = ref;
    });
    _this.state = {
      inputWidth: props.minWidth
    };
    return _this;
  }

  var _proto = InputAutosize.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.copyInputStyles();
    this.updateInputWidth();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    var inputWidth = this.state.inputWidth;
    var onAutosize = this.props.onAutosize;

    if (prevState.inputWidth !== inputWidth) {
      onAutosize && onAutosize(inputWidth);
    }

    this.updateInputWidth();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  _proto.focus = function focus() {
    if (this.input) {
      this.input.focus();
    }
  };

  _proto.blur = function blur() {
    if (this.input) {
      this.input.blur();
    }
  };

  _proto.copyInputStyles = function copyInputStyles() {
    if (!this.mounted || !window.getComputedStyle) {
      return;
    }

    var inputStyles = this.input && window.getComputedStyle(this.input);

    if (!inputStyles) {
      return;
    }

    if (this.sizer) {
      copyStyles(inputStyles, this.sizer);
    }

    if (this.placeHolderSizer) {
      copyStyles(inputStyles, this.placeHolderSizer);
    }
  };

  _proto.updateInputWidth = function updateInputWidth() {
    if (!this.mounted || !this.sizer || typeof this.sizer.scrollWidth === 'undefined') {
      return;
    }

    var _this$props = this.props,
        minWidth = _this$props.minWidth,
        placeholder = _this$props.placeholder,
        value = _this$props.value;
    var newInputWidth;

    if (placeholder && !value && this.placeHolderSizer) {
      newInputWidth = Math.max(this.sizer.scrollWidth, this.placeHolderSizer.scrollWidth) + 2;
    } else {
      newInputWidth = this.sizer.scrollWidth + 2;
    }

    if (newInputWidth < minWidth) {
      newInputWidth = minWidth;
    }

    if (newInputWidth !== this.state.inputWidth) {
      this.setState({
        inputWidth: newInputWidth
      });
    }
  };

  _proto.renderStyles = function renderStyles() {
    var inputId = this.props.inputId;
    return (0, _BrowserDetection.isIE)() ? React.createElement("style", {
      dangerouslySetInnerHTML: {
        __html: "input#" + inputId + "::-ms-clear {display: none;}"
      }
    }) : null;
  };

  _proto.render = function render() {
    var inputWidth = this.state.inputWidth;
    var _this$props2 = this.props,
        defaultValue = _this$props2.defaultValue,
        value = _this$props2.value,
        style = _this$props2.style,
        className = _this$props2.className,
        placeholder = _this$props2.placeholder,
        inputClassName = _this$props2.inputClassName,
        inputStyle = _this$props2.inputStyle,
        inputId = _this$props2.inputId;
    var sizerValue = [defaultValue, value, ''].reduce(function (previousValue, currentValue) {
      if (previousValue !== null && previousValue !== undefined) {
        return previousValue;
      }

      return currentValue;
    });
    var wrapperStyle = (0, _extends2.default)({}, style);

    if (!wrapperStyle.display) {
      wrapperStyle.display = 'inline-block';
    }

    var nextInputStyle = (0, _extends2.default)({
      boxSizing: 'content-box',
      width: inputWidth + "px"
    }, inputStyle);

    var _partitionHTMLProps = (0, _utils.partitionHTMLProps)(this.props),
        htmlInputProps = _partitionHTMLProps[0];

    htmlInputProps.className = inputClassName;
    htmlInputProps.id = inputId;
    htmlInputProps.style = nextInputStyle;
    return React.createElement("div", {
      className: className,
      style: wrapperStyle
    }, this.renderStyles(), React.createElement("input", (0, _extends2.default)({}, htmlInputProps, {
      ref: this.bindInputRef,
      type: "text"
    })), React.createElement("div", {
      ref: this.bindSizerRef,
      style: sizerStyle
    }, sizerValue), placeholder ? React.createElement("div", {
      ref: this.bindPlaceHolderSizerRef,
      style: sizerStyle
    }, placeholder) : null);
  };

  return InputAutosize;
}(React.Component);

(0, _defineProperty2.default)(InputAutosize, "defaultProps", {
  minWidth: 1,
  inputId: '_' + Math.random().toString(36).substr(2, 12)
});
(0, _defineProperty2.default)(InputAutosize, "handledProps", ["className", "defaultValue", "inputClassName", "inputId", "inputRef", "inputStyle", "minWidth", "onAutosize", "onChange", "placeholder", "style", "value"]);
var _default = InputAutosize;
exports.default = _default;