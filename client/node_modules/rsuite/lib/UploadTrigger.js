"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _rsuiteIntl = require("rsuite-intl");

var _Ripple = _interopRequireDefault(require("./Ripple"));

var _utils = require("./utils");

var Button = function Button(props) {
  return React.createElement("button", (0, _extends2.default)({}, props, {
    type: "button"
  }));
};

Button.handledProps = [];

var UploadTrigger =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(UploadTrigger, _React$Component);

  function UploadTrigger() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "input", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function () {
      !_this.props.disabled && _this.input.click();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindInputRef", function (ref) {
      _this.input = ref;
    });
    return _this;
  }

  var _proto = UploadTrigger.prototype;

  _proto.render = function render() {
    var _classNames;

    var _this$props = this.props,
        name = _this$props.name,
        accept = _this$props.accept,
        multiple = _this$props.multiple,
        disabled = _this$props.disabled,
        onChange = _this$props.onChange,
        children = _this$props.children,
        classPrefix = _this$props.classPrefix,
        className = _this$props.className,
        innerRef = _this$props.innerRef,
        Component = _this$props.componentClass,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, ["name", "accept", "multiple", "disabled", "onChange", "children", "classPrefix", "className", "innerRef", "componentClass"]);
    var unhandled = (0, _utils.getUnhandledProps)(UploadTrigger, rest);
    var addPrefix = (0, _utils.prefix)(classPrefix);
    var classes = (0, _classnames.default)(classPrefix, className, (_classNames = {}, _classNames[addPrefix('disabled')] = disabled, _classNames));
    var buttonProps = (0, _extends2.default)({}, unhandled, {
      className: addPrefix('btn'),
      onClick: this.handleClick
    });
    var trigger = children ? React.cloneElement(React.Children.only(children), buttonProps) : React.createElement(Component, buttonProps, React.createElement(_rsuiteIntl.FormattedMessage, {
      id: "upload"
    }), React.createElement(_Ripple.default, null));
    return React.createElement("div", {
      className: classes
    }, React.createElement("input", {
      type: "file",
      name: name,
      multiple: multiple,
      disabled: disabled,
      accept: accept,
      ref: (0, _utils.createChainedFunction)(this.bindInputRef, innerRef),
      onChange: onChange
    }), trigger);
  };

  return UploadTrigger;
}(React.Component);

(0, _defineProperty2.default)(UploadTrigger, "handledProps", ["accept", "children", "className", "classPrefix", "componentClass", "disabled", "innerRef", "multiple", "name", "onChange"]);

var _default = (0, _utils.defaultProps)({
  componentClass: Button,
  classPrefix: 'uploader-trigger'
})(UploadTrigger);

exports.default = _default;