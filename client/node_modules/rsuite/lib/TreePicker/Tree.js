"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _kebabCase2 = _interopRequireDefault(require("lodash/kebabCase"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _isArray2 = _interopRequireDefault(require("lodash/isArray"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactDom = require("react-dom");

var _domLib = require("dom-lib");

var _rsuiteIntl = require("rsuite-intl");

var _List = _interopRequireDefault(require("react-virtualized/dist/commonjs/List"));

var _AutoSizer = _interopRequireDefault(require("react-virtualized/dist/commonjs/AutoSizer"));

var _CellMeasurer = require("react-virtualized/dist/commonjs/CellMeasurer");

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _utils = require("rsuite-utils/lib/utils");

var _TreeNode = _interopRequireDefault(require("./TreeNode"));

var _utils2 = require("../utils");

var _treeUtils = require("../utils/treeUtils");

var _picker = require("../_picker");

var defaultHeight = 360;
var defaultWidth = 200;

var Tree =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(Tree, _React$Component);

  function Tree(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getFocusableMenuItems", function () {
      var filterData = _this.state.filterData;
      var _this$props = _this.props,
          childrenKey = _this$props.childrenKey,
          _this$props$disabledI = _this$props.disabledItemValues,
          disabledItemValues = _this$props$disabledI === void 0 ? [] : _this$props$disabledI,
          valueKey = _this$props.valueKey;
      var items = [];

      var loop = function loop(nodes) {
        nodes.forEach(function (node) {
          var disabled = disabledItemValues.some(function (disabledItem) {
            return (0, _utils.shallowEqual)(disabledItem, node[valueKey]);
          });

          if (!disabled) {
            items.push(node);

            if (!_this.getExpandState(node, _this.props)) {
              return;
            }

            if (node[childrenKey]) {
              loop(node[childrenKey]);
            }
          }
        });
      };

      loop(filterData);
      return items;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getElementByDataKey", function (dataKey) {
      var ele = (0, _reactDom.findDOMNode)(_this.nodeRefs[dataKey]);

      if (ele instanceof Element) {
        return ele.querySelector("." + _this.addPrefix('tree-view-node-label'));
      }

      return null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "nodes", {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "node", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isControlled", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "tempNode", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "treeView", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "list", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cache", new _CellMeasurer.CellMeasurerCache({
      fixedWidth: true,
      minHeight: 20
    }));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindListRef", function (ref) {
      _this.list = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindTreeViewRef", function (ref) {
      _this.treeView = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "trigger", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindTriggerRef", function (ref) {
      _this.trigger = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "container", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindContainerRef", function (ref) {
      _this.container = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "nodeRefs", {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindNodeRefs", function (refKey, ref) {
      _this.nodeRefs[refKey] = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "menu", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindMenuRef", function (ref) {
      _this.menu = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "position", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindPositionRef", function (ref) {
      _this.position = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggle", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindToggleRef", function (ref) {
      _this.toggle = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getPositionInstance", function () {
      return _this.position;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getToggleInstance", function () {
      return _this.toggle;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "selectActiveItem", function (event) {
      var _this$getActiveItem = _this.getActiveItem(),
          nodeData = _this$getActiveItem.nodeData,
          layer = _this$getActiveItem.layer;

      _this.handleSelect(nodeData, +layer, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focusNextItem", function () {
      var _this$getItemsAndActi = _this.getItemsAndActiveIndex(),
          items = _this$getItemsAndActi.items,
          activeIndex = _this$getItemsAndActi.activeIndex;

      if (items.length === 0) {
        return;
      }

      var nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1;

      var node = _this.getElementByDataKey(items[nextIndex].refKey);

      if (node !== null) {
        node.focus();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focusPreviousItem", function () {
      var _this$getItemsAndActi2 = _this.getItemsAndActiveIndex(),
          items = _this$getItemsAndActi2.items,
          activeIndex = _this$getItemsAndActi2.activeIndex;

      if (items.length === 0) {
        return;
      }

      var prevIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1;
      prevIndex = prevIndex >= 0 ? prevIndex : 0;

      var node = _this.getElementByDataKey(items[prevIndex].refKey);

      if (node !== null) {
        node.focus();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "closeDropdown", function () {
      if (_this.trigger) {
        _this.trigger.hide();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "openDropdown", function () {
      if (_this.trigger) {
        _this.trigger.show();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleDropdown", function () {
      var active = _this.state.active;

      if (active) {
        _this.closeDropdown();

        return;
      }

      _this.openDropdown();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "addPrefix", function (name) {
      return (0, _utils2.prefix)(_this.props.classPrefix)(name);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleToggle", function (nodeData, layer) {
      var _this$props2 = _this.props,
          _this$props2$classPre = _this$props2.classPrefix,
          classPrefix = _this$props2$classPre === void 0 ? '' : _this$props2$classPre,
          valueKey = _this$props2.valueKey,
          onExpand = _this$props2.onExpand,
          virtualized = _this$props2.virtualized;

      if (!virtualized) {
        var openClass = classPrefix + "-tree-view-open";
        (0, _domLib.toggleClass)((0, _reactDom.findDOMNode)(_this.nodeRefs[nodeData.refKey]), openClass);
        nodeData.expand = (0, _domLib.hasClass)((0, _reactDom.findDOMNode)(_this.nodeRefs[nodeData.refKey]), openClass);
        _this.nodes[nodeData.refKey].expand = nodeData.expand;
      } else {
        _this.nodes[nodeData.refKey].expand = !nodeData.expand;
      }

      _this.setState({
        expandItemValues: _this.serializeList('expand')
      });

      onExpand && onExpand(nodeData, layer, (0, _picker.createConcatChildrenFunction)(nodeData, nodeData[valueKey]));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelect", function (nodeData, layer, event) {
      var _this$props3 = _this.props,
          valueKey = _this$props3.valueKey,
          onChange = _this$props3.onChange,
          onSelect = _this$props3.onSelect;
      _this.node = nodeData;

      if (!_this.isControlled) {
        _this.setState({
          activeNode: nodeData,
          selectedValue: nodeData[valueKey]
        });
      }

      onChange && onChange(nodeData[valueKey]);
      onSelect && onSelect(nodeData, layer, event);

      _this.closeDropdown();

      if (_this.toggle) {
        _this.toggle.onFocus();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyDown", function (event) {
      (0, _picker.onMenuKeyDown)(event, {
        down: _this.focusNextItem,
        up: _this.focusPreviousItem,
        enter: _this.selectActiveItem,
        del: _this.handleClean
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleToggleKeyDown", function (event) {
      var classPrefix = _this.props.classPrefix;
      var _this$state = _this.state,
          activeNode = _this$state.activeNode,
          active = _this$state.active; // enter

      if ((!activeNode || !active) && event.keyCode === 13) {
        _this.toggleDropdown();
      } // delete


      if (event.keyCode === 8) {
        _this.handleClean();
      }

      if (!_this.treeView) {
        return;
      }

      if (event.target instanceof HTMLElement) {
        var className = event.target.className;

        if (className.includes(classPrefix + "-toggle") || className.includes(classPrefix + "-toggle-custom") || className.includes(classPrefix + "-search-bar-input")) {
          (0, _picker.onMenuKeyDown)(event, {
            down: _this.focusNextItem
          });
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSearch", function (value, event) {
      var filterData = _this.state.filterData;
      var _this$props4 = _this.props,
          onSearch = _this$props4.onSearch,
          searchKeyword = _this$props4.searchKeyword;

      if ((0, _isUndefined2.default)(searchKeyword)) {
        _this.setState({
          searchKeyword: value,
          filterData: _this.getFilterData(filterData, value)
        });
      }

      onSearch && onSearch(value, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClean", function () {
      var onChange = _this.props.onChange;

      _this.setState({
        activeNode: null,
        selectedValue: null
      });

      _this.node = null;
      onChange && onChange(null);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnOpen", function () {
      var activeNode = _this.state.activeNode;
      var onOpen = _this.props.onOpen;

      if (activeNode) {
        var node = _this.getElementByDataKey(activeNode.refKey);

        if (node !== null) {
          node.focus();
        }
      }

      onOpen && onOpen();

      _this.setState({
        active: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOnClose", function () {
      var filterData = _this.state.filterData;
      var _this$props5 = _this.props,
          searchKeyword = _this$props5.searchKeyword,
          onClose = _this$props5.onClose;

      if ((0, _isUndefined2.default)(searchKeyword)) {
        _this.setState({
          searchKeyword: '',
          filterData: _this.getFilterData(filterData, '')
        });
      }

      onClose && onClose();

      _this.setState({
        active: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rowRenderer", function (_ref) {
      var node = _ref.node,
          key = _ref.key,
          style = _ref.style;

      var treeViewClasses = _this.addPrefix('tree-view');

      var options = {
        key: key,
        style: style,
        classPrefix: treeViewClasses
      };
      return _this.renderVirtualNode(node, options);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "measureRowRenderer", function (nodes) {
      return function (_ref2) {
        var key = _ref2.key,
            index = _ref2.index,
            style = _ref2.style,
            parent = _ref2.parent;
        var node = nodes[index];
        return React.createElement(_CellMeasurer.CellMeasurer, {
          cache: _this.cache,
          columnIndex: 0,
          key: key,
          rowIndex: index,
          parent: parent
        }, function (m) {
          return _this.rowRenderer((0, _extends2.default)({}, m, {
            node: node,
            key: key,
            style: style
          }));
        });
      };
    });
    var _value = props.value,
        data = props.data,
        _valueKey = props.valueKey;
    _this.isControlled = !(0, _isUndefined2.default)(_value);
    var nextData = [].concat(data);

    var keyword = _this.getSearchKeyword(props);

    _this.flattenNodes(nextData);

    _this.state = {
      data: data,
      value: _value,
      selectedValue: _this.getValue(props),
      expandAll: _this.getExpandAll(props),
      filterData: _this.getFilterData(nextData, keyword, props),
      activeNode: _this.getActiveNode(_this.getValue(props), _valueKey),
      searchKeyword: keyword,
      expandItemValues: _this.serializeList('expand')
    };
    return _this;
  }

  var _proto = Tree.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var activeNode = this.state.activeNode;
    this.focusNode(activeNode);
  };

  Tree.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    var value = nextProps.value,
        data = nextProps.data,
        expandAll = nextProps.expandAll,
        searchKeyword = nextProps.searchKeyword;
    var nextState = {};

    if ((0, _isArray2.default)(data) && (0, _isArray2.default)(prevState.data) && prevState.data !== data) {
      nextState.data = data;
    }

    if (!(0, _utils.shallowEqual)(value, prevState.value)) {
      nextState.value = value;
      nextState.selectedValue = value;
    }

    if (searchKeyword !== prevState.searchKeyword) {
      nextState.searchKeyword = searchKeyword;
    }

    if (expandAll !== prevState.expandAll) {
      nextState.expandAll = expandAll;
    }

    return Object.keys(nextState).length ? nextState : null;
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    var _this$state2 = this.state,
        filterData = _this$state2.filterData,
        searchKeyword = _this$state2.searchKeyword;
    var _this$props6 = this.props,
        value = _this$props6.value,
        data = _this$props6.data,
        valueKey = _this$props6.valueKey;

    if (prevState.data !== data) {
      var nextData = [].concat(data);
      this.flattenNodes(nextData);

      var _filterData = this.getFilterData(nextData, searchKeyword);

      var _activeNode = this.getActiveNode(this.getValue());

      this.focusNode(_activeNode);
      this.setState({
        data: nextData,
        filterData: _filterData,
        activeNode: _activeNode
      });
    }

    if (!(0, _utils.shallowEqual)(prevState.value, value)) {
      var _activeNode2 = null;

      if (this.node === null) {
        _activeNode2 = this.getActiveNode(value);
      }

      if (value !== null && this.node !== null) {
        _activeNode2 = (0, _utils.shallowEqual)(this.node[valueKey], value) ? this.node : this.getActiveNode(value);
      }

      var nextState = {
        value: value,
        activeNode: _activeNode2
      };

      if (value === null) {
        nextState.activeNode = null;
        this.node = null;
      }

      if (_activeNode2 !== null) {
        this.focusNode(_activeNode2);
      }

      this.setState(nextState);
    }

    if (prevState.searchKeyword !== this.props.searchKeyword) {
      this.setState({
        filterData: this.getFilterData(filterData, this.props.searchKeyword)
      });
    }

    if (this.list) {
      this.list.forceUpdateGrid();
    }
  };

  _proto.getExpandAll = function getExpandAll(props) {
    if (props === void 0) {
      props = this.props;
    }

    return props.expandAll !== undefined ? props.expandAll : props.defaultExpandAll;
  };

  _proto.getValue = function getValue(props) {
    if (props === void 0) {
      props = this.props;
    }

    var _props = props,
        value = _props.value,
        defaultValue = _props.defaultValue;
    return !(0, _isUndefined2.default)(value) ? value : defaultValue;
  };

  _proto.getSearchKeyword = function getSearchKeyword(props) {
    if (props === void 0) {
      props = this.props;
    }

    var _props2 = props,
        _props2$searchKeyword = _props2.searchKeyword,
        searchKeyword = _props2$searchKeyword === void 0 ? '' : _props2$searchKeyword;
    return !(0, _isUndefined2.default)(searchKeyword) ? searchKeyword : '';
  };

  _proto.getActiveNode = function getActiveNode(value, valueKey) {
    var _this2 = this;

    if (valueKey === void 0) {
      valueKey = this.props.valueKey;
    }

    var activeNode = null;

    if (!(0, _isUndefined2.default)(value)) {
      Object.keys(this.nodes).forEach(function (refKey) {
        if ((0, _utils.shallowEqual)(_this2.nodes[refKey][valueKey], value)) {
          activeNode = _this2.nodes[refKey];
        }
      });
    }

    return activeNode;
  };

  _proto.getExpandState = function getExpandState(node, props) {
    if (props === void 0) {
      props = this.props;
    }

    var _props3 = props,
        valueKey = _props3.valueKey;
    var expandItemValues = (0, _isUndefined2.default)(this.state) ? [] : this.state.expandItemValues;
    var expandAll = this.getExpandAll(props);
    var expand = expandItemValues.some(function (value) {
      return (0, _utils.shallowEqual)(node[valueKey], value);
    });
    var _props4 = props,
        childrenKey = _props4.childrenKey;

    if (expandItemValues.length) {
      return expand;
    } else if (node[childrenKey] && node[childrenKey].length) {
      if (expand) {
        return !!node.expand;
      } else if (expandAll) {
        return true;
      }

      return false;
    }

    return false;
  };

  _proto.getActiveElementOption = function getActiveElementOption(options, value) {
    var childrenKey = this.props.childrenKey;

    for (var i = 0; i < options.length; i += 1) {
      if (options[i].value === value) {
        return options[i];
      } else if (options[i][childrenKey] && options[i][childrenKey].length) {
        var active = this.getActiveElementOption(options[i][childrenKey], value);

        if (!(0, _isEmpty2.default)(active)) {
          return active;
        }
      }
    }

    return {};
  };

  _proto.getItemsAndActiveIndex = function getItemsAndActiveIndex() {
    var items = this.getFocusableMenuItems();
    var activeIndex = -1;
    items.forEach(function (item, index) {
      if (document.activeElement !== null) {
        if (item.refKey === document.activeElement.getAttribute('data-key')) {
          activeIndex = index;
        }
      }
    });
    return {
      items: items,
      activeIndex: activeIndex
    };
  };

  _proto.getActiveItem = function getActiveItem() {
    var nodeData = {};

    if (document.activeElement !== null) {
      var activeItem = document.activeElement;
      var _activeItem$dataset = activeItem.dataset,
          key = _activeItem$dataset.key,
          _layer = _activeItem$dataset.layer;
      var _activeNode3 = this.nodes[key];

      if (_activeNode3) {
        nodeData = _activeNode3;
      }

      return {
        nodeData: nodeData,
        layer: _layer
      };
    }

    return {};
  };

  _proto.getFilterData = function getFilterData(data, word, props) {
    if (word === void 0) {
      word = '';
    }

    if (props === void 0) {
      props = this.props;
    }

    var _props5 = props,
        labelKey = _props5.labelKey,
        childrenKey = _props5.childrenKey;

    var setVisible = function setVisible(nodes) {
      if (nodes === void 0) {
        nodes = [];
      }

      return nodes.forEach(function (item) {
        item.visible = (0, _treeUtils.shouldDisplay)(item[labelKey], word);

        if ((0, _isArray2.default)(item[childrenKey])) {
          setVisible(item[childrenKey]);
          item[childrenKey].forEach(function (child) {
            if (child.visible) {
              item.visible = child.visible;
            }
          });
        }
      });
    };

    if (!(0, _isUndefined2.default)(word) || !word !== '') {
      setVisible(data);
    }

    return data;
  };

  _proto.getFlattenTreeData = function getFlattenTreeData(nodes) {
    var _this3 = this;

    var expandItemValues = this.state.expandItemValues;
    var _this$props7 = this.props,
        childrenKey = _this$props7.childrenKey,
        valueKey = _this$props7.valueKey;
    return (0, _treeUtils.flattenTree)(nodes, childrenKey, function (node) {
      var formatted = (0, _extends2.default)({}, node);
      var curNode = _this3.nodes[node.refKey];
      var parentKeys = (0, _treeUtils.getNodeParents)(curNode, 'parentNode', valueKey);

      if (curNode) {
        formatted.expand = curNode.expand;
        formatted.layer = curNode.layer;
        formatted.parentNode = curNode.parentNode;
        formatted.showNode = (0, _treeUtils.shouldShowNodeByExpanded)(expandItemValues, parentKeys);
      }

      return formatted;
    });
  };

  _proto.focusNode = function focusNode(activeNode) {
    var inline = this.props.inline;

    if (activeNode && inline) {
      var node = this.getElementByDataKey(activeNode.refKey);

      if (node !== null) {
        node.focus();
      }
    }
  }
  /**
   * 将数组变为对象
   * @param {*} nodes tree data
   * @param {*} ref 当前层级
   */
  ;

  _proto.flattenNodes = function flattenNodes(nodes, props, ref, parentNode, layer) {
    var _this4 = this;

    if (props === void 0) {
      props = this.props;
    }

    if (ref === void 0) {
      ref = '0';
    }

    if (layer === void 0) {
      layer = 0;
    }

    var _props6 = props,
        labelKey = _props6.labelKey,
        valueKey = _props6.valueKey,
        childrenKey = _props6.childrenKey;

    if (!Array.isArray(nodes) || nodes.length === 0) {
      return [];
    }

    layer += 1;
    nodes.map(function (node, index) {
      var _this4$nodes$refKey;

      var refKey = ref + "-" + index;
      node.refKey = refKey;
      _this4.nodes[refKey] = (_this4$nodes$refKey = {
        layer: layer
      }, _this4$nodes$refKey[labelKey] = node[labelKey], _this4$nodes$refKey[valueKey] = node[valueKey], _this4$nodes$refKey.expand = _this4.getExpandState(node, props), _this4$nodes$refKey.refKey = refKey, _this4$nodes$refKey);

      if (parentNode) {
        _this4.nodes[refKey].parentNode = parentNode;
      }

      _this4.flattenNodes(node[childrenKey], props, refKey, _this4.nodes[refKey], layer);
    });
  };

  _proto.serializeList = function serializeList(key, nodes) {
    if (nodes === void 0) {
      nodes = this.nodes;
    }

    var valueKey = this.props.valueKey;
    var list = [];
    Object.keys(nodes).forEach(function (refKey) {
      if (nodes[refKey][key]) {
        list.push(nodes[refKey][valueKey]);
      }
    });
    return list;
  };

  _proto.renderDropdownMenu = function renderDropdownMenu() {
    var _this$props8 = this.props,
        _this$props8$height = _this$props8.height,
        height = _this$props8$height === void 0 ? defaultHeight : _this$props8$height,
        searchable = _this$props8.searchable,
        searchKeyword = _this$props8.searchKeyword,
        placement = _this$props8.placement,
        renderExtraFooter = _this$props8.renderExtraFooter,
        locale = _this$props8.locale,
        renderMenu = _this$props8.renderMenu,
        menuStyle = _this$props8.menuStyle,
        virtualized = _this$props8.virtualized,
        menuClassName = _this$props8.menuClassName,
        menuAutoWidth = _this$props8.menuAutoWidth;
    var keyword = !(0, _isUndefined2.default)(searchKeyword) ? searchKeyword : this.state.searchKeyword;
    var classes = (0, _classnames.default)(menuClassName, this.addPrefix('tree-menu'), this.addPrefix("placement-" + (0, _kebabCase2.default)(placement)));
    var styles = virtualized ? (0, _extends2.default)({
      height: height
    }, menuStyle) : menuStyle;
    return React.createElement(_picker.MenuWrapper, {
      autoWidth: menuAutoWidth,
      className: classes,
      style: styles,
      ref: this.bindMenuRef,
      getToggleInstance: this.getToggleInstance,
      getPositionInstance: this.getPositionInstance
    }, searchable ? React.createElement(_picker.SearchBar, {
      placeholder: locale.searchPlaceholder,
      key: "searchBar",
      onChange: this.handleSearch,
      value: keyword
    }) : null, renderMenu ? renderMenu(this.renderTree()) : this.renderTree(), renderExtraFooter && renderExtraFooter());
  };

  _proto.renderNode = function renderNode(node, index, layer, classPrefix) {
    var _this5 = this;

    if (!node.visible) {
      return null;
    }

    var _this$state3 = this.state,
        expandAll = _this$state3.expandAll,
        selectedValue = _this$state3.selectedValue;
    var _this$props9 = this.props,
        _this$props9$disabled = _this$props9.disabledItemValues,
        disabledItemValues = _this$props9$disabled === void 0 ? [] : _this$props9$disabled,
        valueKey = _this$props9.valueKey,
        labelKey = _this$props9.labelKey,
        childrenKey = _this$props9.childrenKey,
        renderTreeNode = _this$props9.renderTreeNode,
        renderTreeIcon = _this$props9.renderTreeIcon;
    var refKey = node.refKey;
    var key = (0, _isString2.default)(node[valueKey]) || (0, _isNumber2.default)(node[valueKey]) ? node[valueKey] : refKey;
    var hasChildren = node.hasChildren;
    var children = node[childrenKey];
    var hasNotEmptyChildren = hasChildren !== undefined ? hasChildren : children && Array.isArray(children) && children.length > 0;
    var props = {
      value: node[valueKey],
      label: node[labelKey],
      index: index,
      layer: layer,
      parent: parent,
      active: (0, _utils.shallowEqual)(node[valueKey], selectedValue),
      visible: node.visible,
      children: children,
      nodeData: node,
      disabled: disabledItemValues.filter(function (disabledItem) {
        return (0, _utils.shallowEqual)(disabledItem, node[valueKey]);
      }).length > 0,
      hasChildren: !!children,
      onSelect: this.handleSelect,
      onTreeToggle: this.handleToggle,
      onRenderTreeNode: renderTreeNode,
      onRenderTreeIcon: renderTreeIcon
    };

    if (props.hasChildren) {
      var _classNames;

      layer += 1;
      var expandControlled = 'expandAll' in this.props;
      var expandALlState = expandControlled ? expandAll : expandAll || this.nodes[node.refKey].expand; // 是否展开树节点且子节点不为空

      var openClass = classPrefix + "-open";
      var childrenClass = (0, _classnames.default)(classPrefix + "-node-children", (_classNames = {}, _classNames[openClass] = expandALlState && hasNotEmptyChildren, _classNames));
      var nodes = children || [];
      return React.createElement("div", {
        className: childrenClass,
        key: key,
        ref: this.bindNodeRefs.bind(this, refKey)
      }, React.createElement(_TreeNode.default, (0, _extends2.default)({
        classPrefix: classPrefix,
        key: key,
        ref: this.bindNodeRefs.bind(this, refKey)
      }, props)), React.createElement("div", {
        className: classPrefix + "-children"
      }, nodes.map(function (child, i) {
        return _this5.renderNode(child, i, layer, classPrefix);
      })));
    }

    return React.createElement(_TreeNode.default, (0, _extends2.default)({
      classPrefix: classPrefix,
      key: key,
      ref: this.bindNodeRefs.bind(this, refKey)
    }, props));
  };

  _proto.renderVirtualNode = function renderVirtualNode(node, options) {
    var selectedValue = this.state.selectedValue;
    var _this$props10 = this.props,
        _this$props10$disable = _this$props10.disabledItemValues,
        disabledItemValues = _this$props10$disable === void 0 ? [] : _this$props10$disable,
        valueKey = _this$props10.valueKey,
        labelKey = _this$props10.labelKey,
        childrenKey = _this$props10.childrenKey,
        renderTreeNode = _this$props10.renderTreeNode,
        renderTreeIcon = _this$props10.renderTreeIcon;
    var key = options.key,
        style = options.style,
        classPrefix = options.classPrefix;
    var layer = node.layer,
        refKey = node.refKey,
        expand = node.expand,
        showNode = node.showNode;

    if (!node.visible) {
      return null;
    }

    var children = node[childrenKey];
    var props = {
      style: style,
      value: node[valueKey],
      label: node[labelKey],
      layer: layer,
      expand: expand,
      active: (0, _utils.shallowEqual)(node[valueKey], selectedValue),
      visible: node.visible,
      nodeData: node,
      disabled: disabledItemValues.filter(function (disabledItem) {
        return (0, _utils.shallowEqual)(disabledItem, node[valueKey]);
      }).length > 0,
      children: children,
      hasChildren: !!children,
      onSelect: this.handleSelect,
      onTreeToggle: this.handleToggle,
      onRenderTreeNode: renderTreeNode,
      onRenderTreeIcon: renderTreeIcon
    };
    return showNode && React.createElement(_TreeNode.default, (0, _extends2.default)({
      classPrefix: classPrefix,
      key: key,
      ref: this.bindNodeRefs.bind(this, refKey)
    }, props));
  };

  _proto.renderTree = function renderTree() {
    var _classNames2,
        _this6 = this;

    var filterData = this.state.filterData;
    var _this$props11 = this.props,
        height = _this$props11.height,
        _this$props11$classNa = _this$props11.className,
        className = _this$props11$classNa === void 0 ? '' : _this$props11$classNa,
        inline = _this$props11.inline,
        style = _this$props11.style,
        locale = _this$props11.locale,
        virtualized = _this$props11.virtualized; // 树节点的层级

    var layer = 0;
    var treeViewClasses = this.addPrefix('tree-view');
    var classes = (0, _classnames.default)(treeViewClasses, (_classNames2 = {}, _classNames2[className] = inline, _classNames2));
    var nodes = [];

    if (!virtualized) {
      nodes = filterData.map(function (dataItem, index) {
        return _this6.renderNode(dataItem, index, layer, treeViewClasses);
      });

      if (!nodes.some(function (v) {
        return v !== null;
      })) {
        return React.createElement("div", {
          className: this.addPrefix('none')
        }, locale.noResultsText);
      }
    } else {
      nodes = this.getFlattenTreeData(filterData).filter(function (n) {
        return n.showNode && n.visible;
      });

      if (!nodes.length) {
        return React.createElement("div", {
          className: this.addPrefix('none')
        }, locale.noResultsText);
      }
    } // 当未定义 height 且 设置了 virtualized 为 true，treeHeight 设置默认高度


    var treeHeight = (0, _isUndefined2.default)(height) && virtualized ? defaultHeight : height;
    var styles = inline ? (0, _extends2.default)({
      height: treeHeight
    }, style) : {};
    var ListHeight = (0, _treeUtils.getVirtualLisHeight)(inline, treeHeight);
    return React.createElement("div", {
      ref: this.bindTreeViewRef,
      className: classes,
      style: styles,
      onKeyDown: this.handleKeyDown
    }, React.createElement("div", {
      className: this.addPrefix('tree-view-nodes')
    }, virtualized ? React.createElement(_AutoSizer.default, {
      defaultHeight: ListHeight,
      defaultWidth: defaultWidth
    }, function (_ref3) {
      var height = _ref3.height,
          width = _ref3.width;
      return React.createElement(_List.default, {
        ref: _this6.bindListRef,
        width: width || defaultWidth,
        height: height || ListHeight,
        rowHeight: 36,
        rowCount: nodes.length,
        rowRenderer: _this6.measureRowRenderer(nodes)
      });
    }) : nodes));
  };

  _proto.render = function render() {
    var _this$props12 = this.props,
        inline = _this$props12.inline,
        locale = _this$props12.locale,
        disabled = _this$props12.disabled,
        toggleComponentClass = _this$props12.toggleComponentClass,
        placeholder = _this$props12.placeholder,
        cleanable = _this$props12.cleanable,
        renderValue = _this$props12.renderValue,
        valueKey = _this$props12.valueKey,
        labelKey = _this$props12.labelKey,
        onEntered = _this$props12.onEntered,
        onExited = _this$props12.onExited,
        onClean = _this$props12.onClean,
        style = _this$props12.style,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props12, ["inline", "locale", "disabled", "toggleComponentClass", "placeholder", "cleanable", "renderValue", "valueKey", "labelKey", "onEntered", "onExited", "onClean", "style"]);
    var activeNode = this.state.activeNode;
    var classes = (0, _picker.getToggleWrapperClassName)('tree', this.addPrefix, this.props, !!activeNode);
    var selectedElement = placeholder;
    var hasValue = !!activeNode;

    if (hasValue) {
      selectedElement = activeNode && activeNode[labelKey];

      if (renderValue && activeNode) {
        selectedElement = renderValue(activeNode[valueKey], activeNode, selectedElement);
      }
    }

    var unhandled = (0, _utils2.getUnhandledProps)(Tree, rest);

    if (inline) {
      return this.renderTree();
    }

    return React.createElement(_rsuiteIntl.IntlProvider, {
      locale: locale
    }, React.createElement(_picker.PickerToggleTrigger, {
      pickerProps: this.props,
      innerRef: this.bindTriggerRef,
      positionRef: this.bindPositionRef,
      onEntered: (0, _utils2.createChainedFunction)(this.handleOnOpen, onEntered),
      onExit: (0, _utils2.createChainedFunction)(this.handleOnClose, onExited),
      speaker: this.renderDropdownMenu()
    }, React.createElement("div", {
      className: classes,
      style: style,
      ref: this.bindContainerRef
    }, React.createElement(_picker.PickerToggle, (0, _extends2.default)({}, unhandled, {
      ref: this.bindToggleRef,
      onKeyDown: this.handleToggleKeyDown,
      onClean: (0, _utils2.createChainedFunction)(this.handleClean, onClean),
      cleanable: cleanable && !disabled,
      componentClass: toggleComponentClass,
      hasValue: hasValue,
      active: this.state.active
    }), selectedElement || React.createElement(_rsuiteIntl.FormattedMessage, {
      id: "placeholder"
    })))));
  };

  return Tree;
}(React.Component);

(0, _defineProperty2.default)(Tree, "defaultProps", {
  locale: {
    placeholder: 'Select',
    searchPlaceholder: 'Search',
    noResultsText: 'No results found'
  },
  inline: false,
  valueKey: 'value',
  labelKey: 'label',
  cleanable: true,
  placement: 'bottomLeft',
  searchable: true,
  appearance: 'default',
  childrenKey: 'children',
  virtualized: false,
  menuAutoWidth: true
});
(0, _defineProperty2.default)(Tree, "handledProps", ["appearance", "block", "childrenKey", "className", "classPrefix", "cleanable", "container", "containerPadding", "data", "defaultExpandAll", "defaultOpen", "defaultValue", "disabled", "disabledItemValues", "expandAll", "height", "inline", "labelKey", "locale", "menuAutoWidth", "menuClassName", "menuStyle", "onChange", "onClean", "onClose", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onExpand", "onHide", "onOpen", "onSearch", "onSelect", "open", "placeholder", "placement", "renderExtraFooter", "renderMenu", "renderTreeIcon", "renderTreeNode", "renderValue", "searchKeyword", "searchable", "style", "toggleComponentClass", "value", "valueKey", "virtualized"]);
(0, _reactLifecyclesCompat.polyfill)(Tree);
var enhance = (0, _utils2.defaultProps)({
  classPrefix: 'picker'
});

var _default = enhance(Tree);

exports.default = _default;