"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../utils");

var DropdownMenuCheckItem =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(DropdownMenuCheckItem, _React$Component);

  function DropdownMenuCheckItem() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function (event) {
      var _this$props = _this.props,
          value = _this$props.value,
          disabled = _this$props.disabled,
          onSelect = _this$props.onSelect;

      if (!disabled && onSelect) {
        onSelect(value, event, event.target.checked);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleCheck", function (event) {
      var _this$props2 = _this.props,
          value = _this$props2.value,
          disabled = _this$props2.disabled,
          onCheck = _this$props2.onCheck,
          active = _this$props2.active;

      if (!disabled && onCheck) {
        onCheck(value, event, !active);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelectItem", function (event) {
      var _this$props3 = _this.props,
          value = _this$props3.value,
          disabled = _this$props3.disabled,
          onSelectItem = _this$props3.onSelectItem,
          active = _this$props3.active;

      if (!disabled && onSelectItem) {
        onSelectItem(value, event, !active);
      }
    });
    return _this;
  }

  var _proto = DropdownMenuCheckItem.prototype;

  _proto.render = function render() {
    var _classNames;

    var _this$props4 = this.props,
        active = _this$props4.active,
        onKeyDown = _this$props4.onKeyDown,
        disabled = _this$props4.disabled,
        focus = _this$props4.focus,
        children = _this$props4.children,
        className = _this$props4.className,
        classPrefix = _this$props4.classPrefix,
        checkable = _this$props4.checkable,
        Label = _this$props4.labelComponentClass,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props4, ["active", "onKeyDown", "disabled", "focus", "children", "className", "classPrefix", "checkable", "labelComponentClass"]);
    var addPrefix = (0, _utils.prefix)(classPrefix);
    var classes = (0, _classnames.default)(classPrefix, (_classNames = {}, _classNames[addPrefix('active')] = active, _classNames[addPrefix('focus')] = focus, _classNames[addPrefix('disabled')] = disabled, _classNames));
    var unhandled = (0, _utils.getUnhandledProps)(DropdownMenuCheckItem, rest);
    var input = React.createElement("span", {
      className: addPrefix('wrapper'),
      onClick: this.handleCheck
    }, React.createElement("input", {
      checked: active,
      type: "checkbox",
      disabled: disabled,
      onChange: this.handleChange
    }), React.createElement("span", {
      className: addPrefix('inner')
    }));
    return React.createElement("li", (0, _extends2.default)({}, unhandled, {
      className: className,
      role: "menuitem"
    }), React.createElement("div", {
      className: addPrefix('checker')
    }, React.createElement(Label, {
      className: classes,
      tabIndex: -1,
      role: "presentation",
      onKeyDown: disabled ? null : onKeyDown,
      onClick: this.handleSelectItem
    }, checkable ? input : null, children)));
  };

  return DropdownMenuCheckItem;
}(React.Component);

(0, _defineProperty2.default)(DropdownMenuCheckItem, "defaultProps", {
  checkable: true,
  labelComponentClass: 'label'
});
(0, _defineProperty2.default)(DropdownMenuCheckItem, "handledProps", ["active", "checkable", "children", "className", "classPrefix", "disabled", "focus", "getItemData", "labelComponentClass", "onCheck", "onKeyDown", "onSelect", "onSelectItem", "title", "value"]);
var _default = DropdownMenuCheckItem;
exports.default = _default;