"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Ripple = _interopRequireDefault(require("../Ripple"));

var _utils = require("../utils");

var PickerToggle =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(PickerToggle, _React$Component);

  function PickerToggle(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "addPrefix", function (name) {
      return (0, _utils.prefix)(_this.props.classPrefix)(name);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClean", function (event) {
      var onClean = _this.props.onClean;
      onClean && onClean(event);
      event.stopPropagation();

      _this.handleBlur();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFocus", function () {
      _this.setState({
        active: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleBlur", function () {
      _this.setState({
        active: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onFocus", function () {
      if (_this.toggle && typeof _this.toggle.focus === 'function') {
        _this.toggle.focus();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggle", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindToggleRef", function (ref) {
      _this.toggle = ref;
    });
    _this.state = {
      active: false
    };
    return _this;
  }

  var _proto = PickerToggle.prototype;

  _proto.renderToggleClean = function renderToggleClean() {
    return React.createElement("span", {
      className: this.addPrefix('clean'),
      role: "button",
      tabIndex: "-1",
      onClick: this.handleClean
    }, "\u2715");
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.componentClass,
        children = _this$props.children,
        className = _this$props.className,
        hasValue = _this$props.hasValue,
        cleanable = _this$props.cleanable,
        classPrefix = _this$props.classPrefix,
        caret = _this$props.caret,
        active = _this$props.active,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, ["componentClass", "children", "className", "hasValue", "cleanable", "classPrefix", "caret", "active"]);
    var defaultClassName = Component === 'a' ? classPrefix : this.addPrefix('custom');
    var classes = (0, _classnames.default)(defaultClassName, className, {
      active: active || this.state.active
    });
    var unhandled = (0, _utils.getUnhandledProps)(PickerToggle, rest);
    return React.createElement(Component, (0, _extends2.default)({}, unhandled, {
      role: "combobox",
      tabIndex: "0",
      className: classes,
      ref: this.bindToggleRef,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur
    }), React.createElement("span", {
      className: this.addPrefix(hasValue ? 'value' : 'placeholder')
    }, children), hasValue && cleanable && this.renderToggleClean(), caret && React.createElement("span", {
      className: this.addPrefix('caret')
    }), React.createElement(_Ripple.default, null));
  };

  return PickerToggle;
}(React.Component);

(0, _defineProperty2.default)(PickerToggle, "defaultProps", {
  componentClass: 'a',
  caret: true
});
(0, _defineProperty2.default)(PickerToggle, "handledProps", ["active", "caret", "children", "className", "classPrefix", "cleanable", "componentClass", "hasValue", "onClean"]);
var enhance = (0, _utils.defaultProps)({
  classPrefix: 'picker-toggle'
});

var _default = enhance(PickerToggle);

exports.default = _default;