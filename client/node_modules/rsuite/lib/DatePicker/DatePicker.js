"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _kebabCase2 = _interopRequireDefault(require("lodash/kebabCase"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _rsuiteIntl = require("rsuite-intl");

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _Calendar = _interopRequireDefault(require("../Calendar"));

var _Toolbar = _interopRequireDefault(require("./Toolbar"));

var _utils = require("../utils");

var _disabledTime = _interopRequireWildcard(require("../utils/disabledTime"));

var _picker = require("../_picker");

var _formatUtils = require("../utils/formatUtils");

var _set_seconds = _interopRequireDefault(require("date-fns/set_seconds"));

var _set_minutes = _interopRequireDefault(require("date-fns/set_minutes"));

var _set_hours = _interopRequireDefault(require("date-fns/set_hours"));

var _get_seconds = _interopRequireDefault(require("date-fns/get_seconds"));

var _is_same_day = _interopRequireDefault(require("date-fns/is_same_day"));

var _get_hours = _interopRequireDefault(require("date-fns/get_hours"));

var _get_minutes = _interopRequireDefault(require("date-fns/get_minutes"));

var _format = _interopRequireDefault(require("date-fns/format"));

var _composeFunctions = _interopRequireDefault(require("../utils/composeFunctions"));

var DatePicker =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(DatePicker, _React$Component);

  function DatePicker(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMoveForword", function (nextPageDate) {
      var _this$props = _this.props,
          onNextMonth = _this$props.onNextMonth,
          onChangeCalendarDate = _this$props.onChangeCalendarDate;

      _this.setState({
        pageDate: nextPageDate
      });

      onNextMonth && onNextMonth(nextPageDate);
      onChangeCalendarDate && onChangeCalendarDate(nextPageDate);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onMoveBackward", function (nextPageDate) {
      var _this$props2 = _this.props,
          onPrevMonth = _this$props2.onPrevMonth,
          onChangeCalendarDate = _this$props2.onChangeCalendarDate;

      _this.setState({
        pageDate: nextPageDate
      });

      onPrevMonth && onPrevMonth(nextPageDate);
      onChangeCalendarDate && onChangeCalendarDate(nextPageDate);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getValue", function () {
      return _this.props.value || _this.state.value;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "calendar", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChangePageDate", function (nextPageDate) {
      _this.setState({
        pageDate: nextPageDate,
        calendarState: undefined
      });

      _this.handleAllSelect(nextPageDate);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChangePageTime", function (nextPageTime) {
      _this.setState({
        pageDate: nextPageTime
      });

      _this.handleAllSelect(nextPageTime);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleShortcutPageDate", function (value, closeOverlay, event) {
      _this.updateValue(value, closeOverlay);

      _this.handleAllSelect(value, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOK", function (event) {
      var onOk = _this.props.onOk;

      _this.updateValue();

      onOk && onOk(_this.state.pageDate, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleMonthDropdown", function () {
      var calendarState = _this.state.calendarState;
      var onToggleMonthDropdown = _this.props.onToggleMonthDropdown;
      var toggle;

      if (calendarState === 'DROP_MONTH') {
        _this.hideMonthDropdown();

        toggle = false;
      } else {
        _this.showMonthDropdown();

        toggle = true;
      }

      onToggleMonthDropdown && onToggleMonthDropdown(toggle);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleTimeDropdown", function () {
      var calendarState = _this.state.calendarState;
      var onToggleTimeDropdown = _this.props.onToggleTimeDropdown;
      var toggle;

      if (calendarState === 'DROP_TIME') {
        _this.hideTimeDropdown();

        toggle = false;
      } else {
        _this.showTimeDropdown();

        toggle = true;
      }

      onToggleTimeDropdown && onToggleTimeDropdown(toggle);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClean", function () {
      _this.setState({
        pageDate: new Date()
      });

      _this.updateValue(null);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleAllSelect", function (nextValue, event) {
      var _this$props3 = _this.props,
          onSelect = _this$props3.onSelect,
          onChangeCalendarDate = _this$props3.onChangeCalendarDate;
      onSelect && onSelect(nextValue, event);
      onChangeCalendarDate && onChangeCalendarDate(nextValue, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelect", function (nextValue) {
      var oneTap = _this.props.oneTap;
      var pageDate = _this.state.pageDate;

      _this.setState({
        pageDate: (0, _composeFunctions.default)(function (d) {
          return (0, _set_hours.default)(d, (0, _get_hours.default)(pageDate));
        }, function (d) {
          return (0, _set_minutes.default)(d, (0, _get_minutes.default)(pageDate));
        }, function (d) {
          return (0, _set_seconds.default)(d, (0, _get_seconds.default)(pageDate));
        })(nextValue)
      });

      _this.handleAllSelect(nextValue);

      if (oneTap) {
        _this.updateValue(nextValue);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleEntered", function () {
      var onOpen = _this.props.onOpen;
      onOpen && onOpen();

      _this.setState({
        active: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleExit", function () {
      var onClose = _this.props.onClose;
      onClose && onClose();

      _this.setState({
        calendarState: undefined,
        active: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "disabledToolbarHandle", function (date) {
      var disabledDate = _this.props.disabledDate;
      var allowDate = disabledDate ? disabledDate(date) : false;
      var allowTime = (0, _disabledTime.default)(_this.props, date);
      return allowDate || allowTime;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "calendar", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "container", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "trigger", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "menuContainer", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindTriggerRef", function (ref) {
      _this.trigger = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindContainerRef", function (ref) {
      _this.container = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindMenuContainerRef", function (ref) {
      _this.menuContainer = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindCalendarRef", function (ref) {
      _this.calendar = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "addPrefix", function (name) {
      return (0, _utils.prefix)(_this.props.classPrefix)(name);
    });
    var defaultValue = props.defaultValue,
        _value = props.value,
        calendarDefaultDate = props.calendarDefaultDate;
    var activeValue = _value || defaultValue;
    _this.state = {
      value: activeValue,
      pageDate: activeValue || calendarDefaultDate || new Date() // display calendar date

    };
    return _this;
  }

  DatePicker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    if (typeof nextProps.value !== 'undefined') {
      var _value2 = nextProps.value;

      if (_value2 && !(0, _is_same_day.default)(_value2, prevState.value)) {
        return {
          value: _value2,
          pageDate: _value2
        };
      }

      return {
        value: _value2
      };
    }

    return null;
  };

  var _proto = DatePicker.prototype;

  _proto.getDateString = function getDateString() {
    var _this$props4 = this.props,
        placeholder = _this$props4.placeholder,
        formatType = _this$props4.format,
        renderValue = _this$props4.renderValue;
    var value = this.getValue();

    if (value) {
      return renderValue ? renderValue(value, formatType) : (0, _format.default)(value, formatType);
    }

    return placeholder || formatType;
  };

  _proto.updateValue = function updateValue(nextPageDate, closeOverlay) {
    if (closeOverlay === void 0) {
      closeOverlay = true;
    }

    var pageDate = this.state.pageDate;
    var onChange = this.props.onChange;
    var value = this.getValue();
    var nextValue = !(0, _isUndefined2.default)(nextPageDate) ? nextPageDate : pageDate;
    this.setState({
      pageDate: nextValue || new Date(),
      value: nextValue
    });

    if (nextValue !== value || !(0, _is_same_day.default)(nextValue, value)) {
      onChange && onChange(nextValue);
    } // `closeOverlay` default value is `true`


    if (closeOverlay !== false) {
      this.close();
    }
  };

  _proto.resetPageDate = function resetPageDate() {
    var calendarDefaultDate = this.props.calendarDefaultDate;
    var value = this.getValue();
    this.setState({
      pageDate: value || calendarDefaultDate || new Date()
    });
  };

  _proto.open = function open() {
    if (this.trigger) {
      this.trigger.show();
    }
  };

  _proto.close = function close() {
    if (this.trigger) {
      this.trigger.hide();
    }
  };

  _proto.showMonthDropdown = function showMonthDropdown() {
    this.setState({
      calendarState: 'DROP_MONTH'
    });
  };

  _proto.hideMonthDropdown = function hideMonthDropdown() {
    this.setState({
      calendarState: undefined
    });
  };

  _proto.showTimeDropdown = function showTimeDropdown() {
    this.setState({
      calendarState: 'DROP_TIME'
    });
  };

  _proto.hideTimeDropdown = function hideTimeDropdown() {
    this.setState({
      calendarState: undefined
    });
  };

  _proto.renderCalendar = function renderCalendar() {
    var _this$props5 = this.props,
        format = _this$props5.format,
        isoWeek = _this$props5.isoWeek,
        limitEndYear = _this$props5.limitEndYear,
        disabledDate = _this$props5.disabledDate;
    var _this$state = this.state,
        calendarState = _this$state.calendarState,
        pageDate = _this$state.pageDate;
    var calendarProps = (0, _pick2.default)(this.props, _disabledTime.calendarOnlyProps);
    return React.createElement(_Calendar.default, (0, _extends2.default)({}, calendarProps, {
      disabledDate: disabledDate,
      limitEndYear: limitEndYear,
      format: format,
      isoWeek: isoWeek,
      calendarState: calendarState,
      pageDate: pageDate,
      onMoveForword: this.onMoveForword,
      onMoveBackward: this.onMoveBackward,
      onSelect: this.handleSelect,
      onToggleMonthDropdown: this.toggleMonthDropdown,
      onToggleTimeDropdown: this.toggleTimeDropdown,
      onChangePageDate: this.handleChangePageDate,
      onChangePageTime: this.handleChangePageTime,
      calendarRef: this.bindCalendarRef
    }));
  };

  _proto.renderDropdownMenu = function renderDropdownMenu(calendar) {
    var _this$props6 = this.props,
        placement = _this$props6.placement,
        ranges = _this$props6.ranges,
        menuClassName = _this$props6.menuClassName,
        oneTap = _this$props6.oneTap;
    var pageDate = this.state.pageDate;
    var classes = (0, _classnames.default)(this.addPrefix('date-menu'), this.addPrefix("placement-" + (0, _kebabCase2.default)(placement)), menuClassName);
    return React.createElement(_picker.MenuWrapper, {
      className: classes
    }, React.createElement("div", {
      ref: this.bindMenuContainerRef
    }, calendar, React.createElement(_Toolbar.default, {
      ranges: ranges,
      pageDate: pageDate,
      disabledHandle: this.disabledToolbarHandle,
      onShortcut: this.handleShortcutPageDate,
      onOk: this.handleOK,
      hideOkButton: oneTap
    })));
  };

  _proto.render = function render() {
    var _getToggleWrapperClas;

    var _this$props7 = this.props,
        inline = _this$props7.inline,
        className = _this$props7.className,
        disabled = _this$props7.disabled,
        cleanable = _this$props7.cleanable,
        classPrefix = _this$props7.classPrefix,
        format = _this$props7.format,
        locale = _this$props7.locale,
        toggleComponentClass = _this$props7.toggleComponentClass,
        style = _this$props7.style,
        onEntered = _this$props7.onEntered,
        onExited = _this$props7.onExited,
        onClean = _this$props7.onClean,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props7, ["inline", "className", "disabled", "cleanable", "classPrefix", "format", "locale", "toggleComponentClass", "style", "onEntered", "onExited", "onClean"]);
    var value = this.getValue();
    var unhandled = (0, _utils.getUnhandledProps)(DatePicker, rest);
    var hasValue = !!value;
    var calendar = this.renderCalendar();

    if (inline) {
      return React.createElement(_rsuiteIntl.IntlProvider, {
        locale: locale
      }, React.createElement("div", {
        className: (0, _classnames.default)(classPrefix, this.addPrefix('date-inline'), className)
      }, calendar));
    }

    var classes = (0, _picker.getToggleWrapperClassName)('date', this.addPrefix, this.props, hasValue, (_getToggleWrapperClas = {}, _getToggleWrapperClas[this.addPrefix('date-only-time')] = (0, _formatUtils.shouldOnlyTime)(format), _getToggleWrapperClas));
    return React.createElement(_rsuiteIntl.IntlProvider, {
      locale: locale
    }, React.createElement("div", {
      className: classes,
      style: style,
      ref: this.bindContainerRef
    }, React.createElement(_picker.PickerToggleTrigger, {
      pickerProps: this.props,
      innerRef: this.bindTriggerRef,
      onEntered: (0, _utils.createChainedFunction)(this.handleEntered, onEntered),
      onExit: (0, _utils.createChainedFunction)(this.handleExit, onExited),
      speaker: this.renderDropdownMenu(calendar)
    }, React.createElement(_picker.PickerToggle, (0, _extends2.default)({}, unhandled, {
      componentClass: toggleComponentClass,
      onClean: (0, _utils.createChainedFunction)(this.handleClean, onClean),
      cleanable: cleanable && !disabled,
      hasValue: hasValue,
      active: this.state.active
    }), this.getDateString()))));
  };

  return DatePicker;
}(React.Component);

(0, _defineProperty2.default)(DatePicker, "defaultProps", {
  appearance: 'default',
  placement: 'bottomLeft',
  limitEndYear: 1000,
  format: 'YYYY-MM-DD',
  placeholder: '',
  locale: {
    sunday: 'Su',
    monday: 'Mo',
    tuesday: 'Tu',
    wednesday: 'We',
    thursday: 'Th',
    friday: 'Fr',
    saturday: 'Sa',
    ok: 'OK',
    today: 'Today',
    yesterday: 'Yesterday',
    hours: 'Hours',
    minutes: 'Minutes',
    seconds: 'Seconds'
  },
  cleanable: true
});
(0, _defineProperty2.default)(DatePicker, "handledProps", ["appearance", "block", "calendarDefaultDate", "className", "classPrefix", "cleanable", "container", "containerPadding", "defaultOpen", "defaultValue", "disabled", "disabledDate", "disabledHours", "disabledMinutes", "disabledSeconds", "format", "hideHours", "hideMinutes", "hideSeconds", "inline", "isoWeek", "limitEndYear", "locale", "menuClassName", "onChange", "onChangeCalendarDate", "onClean", "onClose", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onHide", "onNextMonth", "onOk", "onOpen", "onPrevMonth", "onSelect", "onToggleMonthDropdown", "onToggleTimeDropdown", "oneTap", "open", "placeholder", "placement", "ranges", "renderValue", "style", "toggleComponentClass", "value"]);
(0, _reactLifecyclesCompat.polyfill)(DatePicker);
var enhance = (0, _utils.defaultProps)({
  classPrefix: 'picker'
});

var _default = enhance(DatePicker);

exports.default = _default;