"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends5 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var React = _interopRequireWildcard(require("react"));

var _schemaTyped = require("schema-typed");

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("rsuite-utils/lib/utils");

var _utils2 = require("./utils");

var _prefix = require("./utils/prefix");

var _FormContext = _interopRequireWildcard(require("./FormContext"));

var _Form = _interopRequireDefault(require("./_legacy/Form"));

function preventDefaultEvent(event) {
  event.preventDefault();
}

var Form =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(Form, _React$Component);

  function Form(_props) {
    var _this;

    _this = _React$Component.call(this, _props) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "formContextValue", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getFormValue", function (state, props) {
      if (state === void 0) {
        state = _this.state;
      }

      if (props === void 0) {
        props = _this.props;
      }

      return (0, _isUndefined2.default)(props.formValue) ? state.formValue : props.formValue;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getFormError", function (state, props) {
      if (state === void 0) {
        state = _this.state;
      }

      if (props === void 0) {
        props = _this.props;
      }

      return (0, _isUndefined2.default)(props.formError) ? state.formError : props.formError;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "check", function (callback) {
      var formValue = _this.getFormValue() || {};
      var _this$props = _this.props,
          model = _this$props.model,
          onCheck = _this$props.onCheck,
          onError = _this$props.onError;
      var formError = {};
      var errorCount = 0;
      Object.keys(model.schema).forEach(function (key) {
        var checkResult = model.checkForField(key, formValue[key], formValue);

        if (checkResult.hasError === true) {
          errorCount += 1;
          formError[key] = checkResult.errorMessage;
        }
      });

      _this.setState({
        formError: formError
      });

      onCheck && onCheck(formError);
      callback && callback(formError);

      if (errorCount > 0) {
        onError && onError(formError);
        return false;
      }

      return true;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "checkForField", function (fieldName, callback) {
      var formValue = _this.getFormValue() || {};
      var _this$props2 = _this.props,
          model = _this$props2.model,
          onCheck = _this$props2.onCheck,
          onError = _this$props2.onError;
      var checkResult = model.checkForField(fieldName, formValue[fieldName], formValue);

      _this.setState(function (prvState, props) {
        var _extends2;

        var formError = (0, _extends5.default)({}, _this.getFormError(prvState, props), (_extends2 = {}, _extends2[fieldName] = checkResult.errorMessage, _extends2));
        onCheck && onCheck(formError);
        checkResult.hasError && onError && onError(formError);
        return {
          formError: formError
        };
      });

      callback && callback(checkResult);
      return !checkResult.hasError;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFieldError", function (name, errorMessage) {
      var _this$props3 = _this.props,
          onError = _this$props3.onError,
          onCheck = _this$props3.onCheck;

      _this.setState(function (prvState, props) {
        var _extends3;

        var formError = (0, _extends5.default)({}, _this.getFormError(prvState, props), (_extends3 = {}, _extends3[name] = errorMessage, _extends3));
        onError && onError(formError);
        onCheck && onCheck(formError);
        return {
          formError: formError
        };
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFieldSuccess", function (name) {
      var onCheck = _this.props.onCheck;

      _this.setState(function (prvState, props) {
        var formError = (0, _omit2.default)(_this.getFormError(prvState, props), [name]);
        onCheck && onCheck(formError);
        return {
          formError: formError
        };
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFieldChange", function (name, value, event) {
      var _extends4;

      var onChange = _this.props.onChange;

      var formValue = _this.getFormValue();

      var nextFormValue = (0, _extends5.default)({}, formValue, (_extends4 = {}, _extends4[name] = value, _extends4));

      _this.setState({
        formValue: nextFormValue
      });

      onChange && onChange(nextFormValue, event);
    });
    var _this$props4 = _this.props,
        formDefaultValue = _this$props4.formDefaultValue,
        _formError = _this$props4.formError;
    _this.state = {
      formError: _formError || {},
      formValue: formDefaultValue
    };
    return _this;
  }

  var _proto = Form.prototype;

  /**
   * public APIs
   */
  _proto.cleanErrors = function cleanErrors(callback) {
    this.setState({
      formError: {}
    }, callback);
  }
  /**
   * public APIs
   */
  ;

  _proto.cleanErrorForFiled = function cleanErrorForFiled(fieldName, callback) {
    this.setState({
      formError: (0, _omit2.default)(this.state.formError, [fieldName])
    }, callback);
  }
  /**
   * public APIs
   */
  ;

  _proto.resetErrors = function resetErrors(formError, callback) {
    if (formError === void 0) {
      formError = {};
    }

    this.setState({
      formError: formError
    }, callback);
  };

  _proto.getFormContextValue = function getFormContextValue() {
    var _this$props5 = this.props,
        formDefaultValue = _this$props5.formDefaultValue,
        errorFromContext = _this$props5.errorFromContext,
        model = _this$props5.model,
        checkTrigger = _this$props5.checkTrigger;
    var nextFormContextValue = {
      model: model,
      checkTrigger: checkTrigger,
      formDefaultValue: formDefaultValue,
      errorFromContext: errorFromContext,
      onFieldChange: this.handleFieldChange,
      onFieldError: this.handleFieldError,
      onFieldSuccess: this.handleFieldSuccess
    };

    if (!(0, _utils.shallowEqual)(nextFormContextValue, this.formContextValue)) {
      this.formContextValue = nextFormContextValue;
    }

    return this.formContextValue;
  };

  _proto.checkErrorFromContext = function checkErrorFromContext(children) {
    var errorFromContext = this.props.errorFromContext;

    if (errorFromContext) {
      var _formError2 = this.getFormError();

      return React.createElement(_FormContext.FormErrorContext.Provider, {
        value: _formError2
      }, children);
    }

    return children;
  };

  _proto.render = function render() {
    var _this$props6 = this.props,
        _this$props6$formValu = _this$props6.formValue,
        formValue = _this$props6$formValu === void 0 ? {} : _this$props6$formValu,
        layout = _this$props6.layout,
        classPrefix = _this$props6.classPrefix,
        fluid = _this$props6.fluid,
        className = _this$props6.className,
        children = _this$props6.children,
        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props6, ["formValue", "layout", "classPrefix", "fluid", "className", "children"]);
    var addPrefix = (0, _utils2.prefix)(classPrefix);
    var classes = (0, _classnames.default)(classPrefix, className, addPrefix(layout), addPrefix(fluid && layout === 'vertical' ? 'fluid' : 'fixed-width'));
    var unhandled = (0, _utils2.getUnhandledProps)(Form, props);
    var contextDefalutValue = this.getFormContextValue();
    return React.createElement("form", (0, _extends5.default)({
      onSubmit: preventDefaultEvent
    }, unhandled, {
      className: classes
    }), React.createElement(_FormContext.default.Provider, {
      value: contextDefalutValue
    }, React.createElement(_FormContext.FormValueContext.Provider, {
      value: formValue
    }, this.checkErrorFromContext(children))));
  };

  return Form;
}(React.Component);

(0, _defineProperty2.default)(Form, "defaultProps", {
  classPrefix: (0, _prefix.defaultClassPrefix)('form'),
  model: (0, _schemaTyped.SchemaModel)({}),
  layout: 'vertical',
  formDefaultValue: {},
  checkDelay: 500,
  checkTrigger: 'change',
  errorFromContext: true
});
(0, _defineProperty2.default)(Form, "handledProps", ["checkDelay", "checkTrigger", "children", "className", "classPrefix", "errorFromContext", "fluid", "formDefaultValue", "formError", "formValue", "layout", "model", "onChange", "onCheck", "onError"]);

var _default = React.createContext ? Form : _Form.default;

exports.default = _default;