"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _domLib = require("dom-lib");

var _utils = require("rsuite-utils/lib/utils");

var _constants = require("../utils/constants");

var INITIAL_PADDING = 12;
var PADDING = 16;

var TreeCheckNode =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(TreeCheckNode, _React$Component);

  function TreeCheckNode() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTreeToggle", function (event) {
      var _this$props = _this.props,
          onTreeToggle = _this$props.onTreeToggle,
          layer = _this$props.layer,
          nodeData = _this$props.nodeData; // 异步加载数据自定义loading图标时，阻止原生冒泡，不触发 document.click

      if (event.nativeEvent && event.nativeEvent.stopImmediatePropagation) {
        event.nativeEvent.stopImmediatePropagation();
      }

      onTreeToggle && onTreeToggle(nodeData, layer, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelect", function (event) {
      var _this$props2 = _this.props,
          classPrefix = _this$props2.classPrefix,
          onSelect = _this$props2.onSelect,
          layer = _this$props2.layer,
          disabled = _this$props2.disabled,
          uncheckable = _this$props2.uncheckable,
          nodeData = _this$props2.nodeData,
          checkState = _this$props2.checkState;

      if (disabled || uncheckable) {
        return;
      } // 如果点击的是展开 icon 就 return


      if (event.target instanceof HTMLElement) {
        if ((0, _domLib.hasClass)(event.target.parentNode, classPrefix + "-node-expand-icon-wrapper")) {
          return;
        }
      }

      var isChecked = false;

      if (checkState === _constants.CHECK_STATE.UNCHECK || checkState === _constants.CHECK_STATE.INDETERMINATE) {
        isChecked = true;
      }

      if (checkState === _constants.CHECK_STATE.CHECK) {
        isChecked = false;
      }

      nodeData.check = isChecked;
      onSelect && onSelect(nodeData, layer, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderIcon", function () {
      var _classNames;

      var _this$props3 = _this.props,
          expand = _this$props3.expand,
          onRenderTreeIcon = _this$props3.onRenderTreeIcon,
          hasChildren = _this$props3.hasChildren,
          nodeData = _this$props3.nodeData,
          classPrefix = _this$props3.classPrefix;
      var expandIconClasses = (0, _classnames.default)(classPrefix + "-node-expand-icon icon", (_classNames = {}, _classNames[classPrefix + "-node-expanded"] = expand, _classNames));
      var expandIcon = React.createElement("i", {
        className: expandIconClasses
      });

      if (typeof onRenderTreeIcon === 'function') {
        var customIcon = onRenderTreeIcon(nodeData);
        expandIcon = customIcon !== null ? React.createElement("div", {
          className: classPrefix + "-custom-icon"
        }, customIcon) : expandIcon;
      }

      return hasChildren ? React.createElement("div", {
        role: "button",
        tabIndex: "-1",
        "data-ref": nodeData.refKey,
        className: classPrefix + "-node-expand-icon-wrapper",
        onClick: _this.handleTreeToggle
      }, expandIcon) : null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLabel", function () {
      var _this$props4 = _this.props,
          classPrefix = _this$props4.classPrefix,
          nodeData = _this$props4.nodeData,
          onRenderTreeNode = _this$props4.onRenderTreeNode,
          label = _this$props4.label,
          layer = _this$props4.layer,
          disabled = _this$props4.disabled,
          uncheckable = _this$props4.uncheckable;
      var addPrefix = (0, _utils.prefix)(classPrefix);
      var input = React.createElement("span", {
        className: addPrefix('input-wrapper')
      }, React.createElement("input", {
        className: addPrefix('input'),
        type: "checkbox",
        disabled: disabled,
        onChange: _this.handleSelect
      }), React.createElement("span", {
        className: addPrefix('inner')
      }));
      var custom = typeof onRenderTreeNode === 'function' ? onRenderTreeNode(nodeData) : label;
      return React.createElement("span", {
        role: "button",
        tabIndex: "-1",
        className: addPrefix('checknode-label'),
        title: _this.getTitle(),
        "data-layer": layer,
        "data-key": nodeData.refKey,
        onClick: _this.handleSelect
      }, !uncheckable ? input : null, custom);
    });
    return _this;
  }

  var _proto = TreeCheckNode.prototype;

  _proto.getTitle = function getTitle() {
    var label = this.props.label;

    if (typeof label === 'string') {
      return label;
    } else if (React.isValidElement(label)) {
      var nodes = (0, _utils.reactToString)(label);
      return nodes.join('');
    }
  }
  /**
   * 展开收缩节点
   */
  ;

  _proto.render = function render() {
    var _classNames2;

    var _this$props5 = this.props,
        style = _this$props5.style,
        classPrefix = _this$props5.classPrefix,
        visible = _this$props5.visible,
        active = _this$props5.active,
        layer = _this$props5.layer,
        disabled = _this$props5.disabled,
        checkState = _this$props5.checkState,
        allUncheckable = _this$props5.allUncheckable;
    var addPrefix = (0, _utils.prefix)(classPrefix + "-node");
    var classes = (0, _classnames.default)(classPrefix + "-node", (_classNames2 = {
      'text-muted': disabled
    }, _classNames2[addPrefix('indeterminate')] = checkState === _constants.CHECK_STATE.INDETERMINATE, _classNames2[addPrefix('checked')] = checkState === _constants.CHECK_STATE.CHECK, _classNames2[addPrefix('disabled')] = disabled, _classNames2[addPrefix('active')] = active, _classNames2[addPrefix('all-uncheckable')] = !!allUncheckable, _classNames2));
    var styles = {
      paddingLeft: layer * PADDING + INITIAL_PADDING
    };
    return visible ? React.createElement("div", {
      style: (0, _extends2.default)({}, style, styles),
      className: classes
    }, this.renderIcon(), this.renderLabel()) : null;
  };

  return TreeCheckNode;
}(React.Component);

(0, _defineProperty2.default)(TreeCheckNode, "defaultProps", {
  visible: true
});
(0, _defineProperty2.default)(TreeCheckNode, "handledProps", ["active", "allUncheckable", "checkState", "classPrefix", "disabled", "expand", "hasChildren", "label", "layer", "nodeData", "onRenderTreeIcon", "onRenderTreeNode", "onSelect", "onTreeToggle", "style", "uncheckable", "value", "visible"]);
var _default = TreeCheckNode;
exports.default = _default;