"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.isEveryChildChecked = isEveryChildChecked;
exports.isSomeChildChecked = isSomeChildChecked;
exports.isSomeNodeHasChildren = isSomeNodeHasChildren;
exports.getTopParentNodeCheckState = getTopParentNodeCheckState;
exports.getSiblingNodeUncheckable = getSiblingNodeUncheckable;

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

function isEveryChildChecked(node, nodes, props) {
  var childrenKey = props.childrenKey;
  var children = null;

  if (node[childrenKey]) {
    children = node[childrenKey].filter(function (child) {
      return nodes[child.refKey] && !nodes[child.refKey].uncheckable;
    });

    if (!children.length) {
      return nodes[node.refKey].check;
    }

    return children.every(function (child) {
      if (child[childrenKey] && child[childrenKey].length) {
        return isEveryChildChecked(child, nodes, props);
      }

      return nodes[child.refKey].check;
    });
  }

  return nodes[node.refKey].check;
}

function isSomeChildChecked(node, nodes, props) {
  var childrenKey = props.childrenKey;

  if (!node[childrenKey]) {
    return false;
  }

  return node[childrenKey].some(function (child) {
    if (nodes[child.refKey] && nodes[child.refKey].check) {
      return true;
    }

    return isSomeChildChecked(child, nodes, props);
  });
}
/**
 * 判断第一层节点是否存在有children的节点
 * @param {*} data
 */


function isSomeNodeHasChildren(data, childrenKey) {
  return data.some(function (node) {
    return node[childrenKey];
  });
}
/**
 * 获取每个节点的最顶层父节点的check值
 * @param {*} nodes
 * @param {*} node
 */


function getTopParentNodeCheckState(nodes, node) {
  if (node.parentNode) {
    return getTopParentNodeCheckState(nodes, node.parentNode);
  }

  return nodes[node.refKey].check;
}
/**
 * 获取该节点的兄弟节点是否都为 uncheckable
 * @param {*} node
 */


function getSiblingNodeUncheckable(node, nodes) {
  var list = [];
  var parentNodeRefkey = node.parentNode ? node.parentNode.refKey : '';
  Object.keys(nodes).forEach(function (refKey) {
    var curNode = nodes[refKey];

    if ((0, _isUndefined2.default)(node.parentNode) && (0, _isUndefined2.default)(curNode.parentNode)) {
      list.push(curNode);
    } else if (curNode.parentNode && curNode.parentNode.refKey === parentNodeRefkey) {
      list.push(curNode);
    }
  });
  return list.every(function (node) {
    return node.uncheckable;
  });
}