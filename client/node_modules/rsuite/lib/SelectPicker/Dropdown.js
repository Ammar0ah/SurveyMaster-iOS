"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _kebabCase2 = _interopRequireDefault(require("lodash/kebabCase"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _trim2 = _interopRequireDefault(require("lodash/trim"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../utils");

var _utils2 = require("rsuite-utils/lib/utils");

var _picker = require("../_picker");

var Dropdown =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(Dropdown, _React$Component);

  function Dropdown(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getFocusableMenuItems", function () {
      var labelKey = _this.props.labelKey;
      var menuItems = _this.menuContainer.menuItems;

      if (!menuItems) {
        return [];
      }

      var items = Object.values(menuItems).map(function (item) {
        return item.props.getItemData();
      });
      return (0, _utils2.filterNodesOfTree)(items, function (item) {
        return _this.shouldDisplay(item[labelKey]);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "menuContainer", {
      menuItems: null
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindMenuContainerRef", function (ref) {
      _this.menuContainer = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "searchBarContainer", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindSearchBarContainerRef", function (ref) {
      _this.searchBarContainer = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "trigger", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindTriggerRef", function (ref) {
      _this.trigger = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "position", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindPositionRef", function (ref) {
      _this.position = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggle", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "bindToggleRef", function (ref) {
      _this.toggle = ref;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getToggleInstance", function () {
      return _this.toggle;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getPositionInstance", function () {
      return _this.position;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focusNextMenuItem", function () {
      var valueKey = _this.props.valueKey;

      _this.findNode(function (items, index) {
        var focusItem = items[index + 1];

        if (!(0, _isUndefined2.default)(focusItem)) {
          _this.setState({
            focusItemValue: focusItem[valueKey]
          });
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focusPrevMenuItem", function () {
      var valueKey = _this.props.valueKey;

      _this.findNode(function (items, index) {
        var focusItem = items[index - 1];

        if (!(0, _isUndefined2.default)(focusItem)) {
          _this.setState({
            focusItemValue: focusItem[valueKey]
          });
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "selectFocusMenuItem", function (event) {
      var focusItemValue = _this.state.focusItemValue;
      var _this$props = _this.props,
          data = _this$props.data,
          valueKey = _this$props.valueKey;

      if (!focusItemValue) {
        return;
      } // Find active `MenuItem` by `value`


      var focusItem = (0, _utils2.findNodeOfTree)(data, function (item) {
        return (0, _utils2.shallowEqual)(item[valueKey], focusItemValue);
      });

      _this.setState({
        value: focusItemValue
      }, function () {
        _this.handleSelect(focusItemValue, focusItem, event);

        _this.handleChange(focusItemValue, event);
      });

      _this.closeDropdown();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyDown", function (event) {
      var _this$state = _this.state,
          focusItemValue = _this$state.focusItemValue,
          active = _this$state.active; // enter

      if ((!focusItemValue || !active) && event.keyCode === 13) {
        _this.toggleDropdown();
      } // delete


      if (event.keyCode === 8 && event.target === (0, _get2.default)((0, _assertThisInitialized2.default)(_this), 'toggle.toggle')) {
        _this.handleClean(event);
      }

      if (!_this.menuContainer) {
        return;
      }

      (0, _picker.onMenuKeyDown)(event, {
        down: _this.focusNextMenuItem,
        up: _this.focusPrevMenuItem,
        enter: _this.selectFocusMenuItem,
        esc: _this.closeDropdown
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleItemSelect", function (value, item, event) {
      var nextState = {
        value: value,
        focusItemValue: value
      };

      _this.setState(nextState, function () {
        _this.handleSelect(value, item, event);

        _this.handleChange(value, event);
      });

      _this.closeDropdown();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSelect", function (value, item, event) {
      var onSelect = _this.props.onSelect;
      onSelect && onSelect(value, item, event);

      if (_this.toggle) {
        _this.toggle.onFocus();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSearch", function (searchKeyword, event) {
      var onSearch = _this.props.onSearch;

      _this.setState({
        searchKeyword: searchKeyword,
        focusItemValue: undefined
      });

      onSearch && onSearch(searchKeyword, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "closeDropdown", function () {
      if (_this.trigger) {
        _this.trigger.hide();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "openDropdown", function () {
      if (_this.trigger) {
        _this.trigger.show();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleDropdown", function () {
      var active = _this.state.active;

      if (active) {
        _this.closeDropdown();

        return;
      }

      _this.openDropdown();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function (value, event) {
      var onChange = _this.props.onChange;
      onChange && onChange(value, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClean", function (event) {
      var _this$props2 = _this.props,
          disabled = _this$props2.disabled,
          cleanable = _this$props2.cleanable;

      if (disabled || !cleanable) {
        return;
      }

      var nextState = {
        value: null,
        focusItemValue: null
      };

      _this.setState(nextState, function () {
        _this.handleChange(null, event);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleExit", function () {
      var onClose = _this.props.onClose;

      _this.setState({
        searchKeyword: '',
        active: false
      });

      onClose && onClose();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOpen", function () {
      var onOpen = _this.props.onOpen;

      var value = _this.getValue();

      _this.setState({
        active: true,
        focusItemValue: value
      });

      onOpen && onOpen();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "addPrefix", function (name) {
      return (0, _utils.prefix)(_this.props.classPrefix)(name);
    });
    var _value = props.value,
        defaultValue = props.defaultValue,
        groupBy = props.groupBy,
        _valueKey = props.valueKey,
        _labelKey = props.labelKey;
    var nextValue = _value || defaultValue;
    _this.state = {
      value: nextValue,
      focusItemValue: nextValue,
      searchKeyword: ''
    };

    if (groupBy === _valueKey || groupBy === _labelKey) {
      throw Error('`groupBy` can not be equal to `valueKey` and `labelKey`');
    }

    return _this;
  }

  var _proto = Dropdown.prototype;

  _proto.getValue = function getValue() {
    var value = this.props.value;
    return (0, _isUndefined2.default)(value) ? this.state.value : value;
  };

  /**
   * Index of keyword  in `label`
   * @param {node} label
   */
  _proto.shouldDisplay = function shouldDisplay(label) {
    var searchKeyword = this.state.searchKeyword;

    if (!(0, _trim2.default)(searchKeyword)) {
      return true;
    }

    var keyword = searchKeyword.toLocaleLowerCase();

    if (typeof label === 'string' || typeof label === 'number') {
      return ("" + label).toLocaleLowerCase().indexOf(keyword) >= 0;
    } else if (React.isValidElement(label)) {
      var nodes = (0, _utils2.reactToString)(label);
      return nodes.join('').toLocaleLowerCase().indexOf(keyword) >= 0;
    }

    return false;
  };

  _proto.findNode = function findNode(focus) {
    var items = this.getFocusableMenuItems();
    var valueKey = this.props.valueKey;
    var focusItemValue = this.state.focusItemValue;

    for (var i = 0; i < items.length; i += 1) {
      if ((0, _utils2.shallowEqual)(focusItemValue, items[i][valueKey])) {
        focus(items, i);
        return;
      }
    }

    focus(items, -1);
  };

  _proto.renderDropdownMenu = function renderDropdownMenu() {
    var _this2 = this;

    var _this$props3 = this.props,
        data = _this$props3.data,
        labelKey = _this$props3.labelKey,
        groupBy = _this$props3.groupBy,
        searchable = _this$props3.searchable,
        placement = _this$props3.placement,
        locale = _this$props3.locale,
        renderMenu = _this$props3.renderMenu,
        renderExtraFooter = _this$props3.renderExtraFooter,
        menuClassName = _this$props3.menuClassName,
        menuStyle = _this$props3.menuStyle,
        menuAutoWidth = _this$props3.menuAutoWidth,
        sort = _this$props3.sort;
    var focusItemValue = this.state.focusItemValue;
    var classes = (0, _classnames.default)(this.addPrefix('select-menu'), this.addPrefix("placement-" + (0, _kebabCase2.default)(placement)), menuClassName);
    var filteredData = (0, _utils2.filterNodesOfTree)(data, function (item) {
      return _this2.shouldDisplay(item[labelKey]);
    }); // Create a tree structure data when set `groupBy`

    if (groupBy) {
      filteredData = (0, _utils.getDataGroupBy)(filteredData, groupBy, sort);
    } else if (typeof sort === 'function') {
      filteredData = filteredData.sort(sort(false));
    }

    var menuProps = (0, _pick2.default)(this.props, _picker.DropdownMenu.handledProps.filter(function (name) {
      return !['className', 'style', 'classPrefix'].some(function (item) {
        return item === name;
      });
    }));
    var menu = filteredData.length ? React.createElement(_picker.DropdownMenu, (0, _extends2.default)({}, menuProps, {
      classPrefix: this.addPrefix('select-menu'),
      dropdownMenuItemClassPrefix: this.addPrefix('select-menu-item'),
      dropdownMenuItemComponentClass: _picker.DropdownMenuItem,
      ref: this.bindMenuContainerRef,
      activeItemValues: [this.getValue()],
      focusItemValue: focusItemValue,
      data: filteredData,
      group: !(0, _isUndefined2.default)(groupBy),
      onSelect: this.handleItemSelect
    })) : React.createElement("div", {
      className: this.addPrefix('none')
    }, locale.noResultsText);
    return React.createElement(_picker.MenuWrapper, {
      autoWidth: menuAutoWidth,
      className: classes,
      style: menuStyle,
      onKeyDown: this.handleKeyDown,
      getToggleInstance: this.getToggleInstance,
      getPositionInstance: this.getPositionInstance
    }, searchable && React.createElement(_picker.SearchBar, {
      ref: this.bindSearchBarContainerRef,
      placeholder: locale.searchPlaceholder,
      onChange: this.handleSearch,
      value: this.state.searchKeyword
    }), renderMenu ? renderMenu(menu) : menu, renderExtraFooter && renderExtraFooter());
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        data = _this$props4.data,
        valueKey = _this$props4.valueKey,
        labelKey = _this$props4.labelKey,
        placeholder = _this$props4.placeholder,
        renderValue = _this$props4.renderValue,
        disabled = _this$props4.disabled,
        cleanable = _this$props4.cleanable,
        locale = _this$props4.locale,
        toggleComponentClass = _this$props4.toggleComponentClass,
        style = _this$props4.style,
        onEntered = _this$props4.onEntered,
        onExited = _this$props4.onExited,
        onClean = _this$props4.onClean,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props4, ["data", "valueKey", "labelKey", "placeholder", "renderValue", "disabled", "cleanable", "locale", "toggleComponentClass", "style", "onEntered", "onExited", "onClean"]);
    var unhandled = (0, _utils.getUnhandledProps)(Dropdown, rest);
    var value = this.getValue(); // Find active `MenuItem` by `value`

    var activeItem = (0, _utils2.findNodeOfTree)(data, function (item) {
      return (0, _utils2.shallowEqual)(item[valueKey], value);
    });
    var hasValue = !!activeItem;
    var selectedElement = placeholder;

    if (activeItem && activeItem[labelKey]) {
      selectedElement = activeItem[labelKey];

      if (renderValue) {
        selectedElement = renderValue(value, activeItem, selectedElement);
      }
    }

    var classes = (0, _picker.getToggleWrapperClassName)('select', this.addPrefix, this.props, hasValue);
    return React.createElement(_picker.PickerToggleTrigger, {
      pickerProps: this.props,
      innerRef: this.bindTriggerRef,
      positionRef: this.bindPositionRef,
      onEntered: (0, _utils.createChainedFunction)(this.handleOpen, onEntered),
      onExit: (0, _utils.createChainedFunction)(this.handleExit, onExited),
      speaker: this.renderDropdownMenu()
    }, React.createElement("div", {
      className: classes,
      style: style,
      tabIndex: -1,
      role: "menu"
    }, React.createElement(_picker.PickerToggle, (0, _extends2.default)({}, unhandled, {
      ref: this.bindToggleRef,
      onClean: (0, _utils.createChainedFunction)(this.handleClean, onClean),
      onKeyDown: this.handleKeyDown,
      componentClass: toggleComponentClass,
      cleanable: cleanable && !disabled,
      hasValue: hasValue,
      active: this.state.active
    }), selectedElement || locale.placeholder)));
  };

  return Dropdown;
}(React.Component);

(0, _defineProperty2.default)(Dropdown, "defaultProps", {
  appearance: 'default',
  data: [],
  disabledItemValues: [],
  maxHeight: 320,
  valueKey: 'value',
  labelKey: 'label',
  locale: {
    placeholder: 'Select',
    searchPlaceholder: 'Search',
    noResultsText: 'No results found'
  },
  searchable: true,
  cleanable: true,
  menuAutoWidth: true,
  placement: 'bottomLeft'
});
(0, _defineProperty2.default)(Dropdown, "handledProps", ["appearance", "block", "className", "classPrefix", "cleanable", "container", "containerPadding", "data", "defaultOpen", "defaultValue", "disabled", "disabledItemValues", "groupBy", "labelKey", "locale", "maxHeight", "menuAutoWidth", "menuClassName", "menuStyle", "onChange", "onClean", "onClose", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onGroupTitleClick", "onHide", "onOpen", "onSearch", "onSelect", "open", "placeholder", "placement", "renderExtraFooter", "renderMenu", "renderMenuGroup", "renderMenuItem", "renderValue", "searchable", "sort", "style", "toggleComponentClass", "value", "valueKey"]);
var enhance = (0, _utils.defaultProps)({
  classPrefix: 'picker'
});

var _default = enhance(Dropdown);

exports.default = _default;