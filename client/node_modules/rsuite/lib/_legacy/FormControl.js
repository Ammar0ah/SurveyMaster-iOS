"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Input = _interopRequireDefault(require("../Input"));

var _ErrorMessage = _interopRequireDefault(require("../ErrorMessage"));

var _utils = require("../utils");

var FormControl =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(FormControl, _React$Component);

  function FormControl(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFieldChange", function (value, event) {
      var _this$props = _this.props,
          name = _this$props.name,
          onChange = _this$props.onChange;
      var onFieldChange = _this.context.form.onFieldChange;

      var checkTrigger = _this.getCheckTrigger();

      var checkResult = _this.handleFieldCheck(value, checkTrigger === 'change');

      _this.setState({
        checkResult: checkResult,
        value: value
      });

      onFieldChange(name, value, event);
      onChange && onChange(value, event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFieldBlur", function (event) {
      var onBlur = _this.props.onBlur;

      var checkTrigger = _this.getCheckTrigger();

      _this.handleFieldCheck(_this.getValue(), checkTrigger === 'blur');

      onBlur && onBlur(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFieldCheck", function (value, isCheckTrigger, callback) {
      var name = _this.props.name;
      var _this$context$form = _this.context.form,
          onFieldError = _this$context$form.onFieldError,
          onFieldSuccess = _this$context$form.onFieldSuccess,
          model = _this$context$form.model,
          formValue = _this$context$form.formValue;
      var checkResult = model.checkForField(name, value, formValue);

      if (isCheckTrigger) {
        if (checkResult.hasError) {
          onFieldError(name, checkResult.errorMessage, callback);
        } else {
          onFieldSuccess(name, callback);
        }
      }

      return checkResult;
    });

    if (!context.form) {
      throw new Error('FormControl must be inside a component decorated with <Form>');
    }

    var _context$form = context.form,
        _context$form$formVal = _context$form.formValue,
        _formValue = _context$form$formVal === void 0 ? {} : _context$form$formVal,
        _context$form$formDef = _context$form.formDefaultValue,
        formDefaultValue = _context$form$formDef === void 0 ? {} : _context$form$formDef;

    var _name = props.name;
    _this.state = {
      checkResult: {},
      value: _formValue[_name] || formDefaultValue[_name]
    };
    return _this;
  }

  var _proto = FormControl.prototype;

  _proto.getValue = function getValue() {
    var formValue = this.context.form.formValue;
    var name = this.props.name;

    if (formValue && typeof formValue[name] !== 'undefined') {
      return formValue[name];
    }

    return this.state.value;
  };

  _proto.getErrorMessage = function getErrorMessage() {
    var _this$context$form2 = this.context.form,
        formError = _this$context$form2.formError,
        errorFromContext = _this$context$form2.errorFromContext;
    var _this$props2 = this.props,
        name = _this$props2.name,
        errorMessage = _this$props2.errorMessage;

    if (errorMessage) {
      return errorMessage;
    }

    if (errorFromContext) {
      return formError ? formError[name] : null;
    }

    return null;
  };

  _proto.getCheckTrigger = function getCheckTrigger() {
    var checkTrigger = this.context.form.checkTrigger;
    return this.props.checkTrigger || checkTrigger;
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        name = _this$props3.name,
        Component = _this$props3.accepter,
        classPrefix = _this$props3.classPrefix,
        errorPlacement = _this$props3.errorPlacement,
        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props3, ["name", "accepter", "classPrefix", "errorPlacement"]);
    var _this$context$form3 = this.context.form,
        _this$context$form3$f = _this$context$form3.formValue,
        formValue = _this$context$form3$f === void 0 ? {} : _this$context$form3$f,
        _this$context$form3$f2 = _this$context$form3.formDefaultValue,
        formDefaultValue = _this$context$form3$f2 === void 0 ? {} : _this$context$form3$f2;
    var unhandled = (0, _utils.getUnhandledProps)(FormControl, props);
    var addPrefix = (0, _utils.prefix)(classPrefix);
    var errorMessage = this.getErrorMessage();
    var hasError = !!errorMessage;
    return React.createElement("div", {
      className: addPrefix('wrapper')
    }, React.createElement(Component, (0, _extends2.default)({}, unhandled, {
      name: name,
      onChange: this.handleFieldChange,
      onBlur: this.handleFieldBlur,
      defaultValue: formDefaultValue[name],
      value: formValue[name]
    })), React.createElement(_ErrorMessage.default, {
      show: hasError,
      className: addPrefix('message-wrapper'),
      placement: errorPlacement
    }, errorMessage));
  };

  return FormControl;
}(React.Component);

(0, _defineProperty2.default)(FormControl, "defaultProps", {
  accepter: _Input.default,
  errorPlacement: 'bottomLeft'
});
(0, _defineProperty2.default)(FormControl, "contextTypes", {
  form: _propTypes.default.object
});
(0, _defineProperty2.default)(FormControl, "handledProps", ["accepter", "checkTrigger", "classPrefix", "errorMessage", "errorPlacement", "name", "onBlur", "onChange"]);

var _default = (0, _utils.defaultProps)({
  classPrefix: 'form-control'
})(FormControl);

exports.default = _default;