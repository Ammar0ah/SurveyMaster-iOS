"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends5 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _schemaTyped = require("schema-typed");

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../utils");

var _prefix = require("../utils/prefix");

var Form =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(Form, _React$Component);

  function Form(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "check", function (callback) {
      var formValue = _this.getFormValue() || {};
      var _this$props = _this.props,
          model = _this$props.model,
          onCheck = _this$props.onCheck,
          onError = _this$props.onError;
      var formError = {};
      var errorCount = 0;
      Object.keys(model.schema).forEach(function (key) {
        var checkResult = model.checkForField(key, formValue[key], formValue);

        if (checkResult.hasError === true) {
          errorCount += 1;
          formError[key] = checkResult.errorMessage;
        }
      });

      _this.setState({
        formError: formError
      });

      onCheck && onCheck(formError);
      callback && callback(formError);

      if (errorCount > 0) {
        onError && onError(formError);
        return false;
      }

      return true;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "checkForField", function (fieldName, callback) {
      var _extends2;

      var formValue = _this.getFormValue() || {};
      var _this$props2 = _this.props,
          model = _this$props2.model,
          onCheck = _this$props2.onCheck,
          onError = _this$props2.onError;
      var checkResult = model.checkForField(fieldName, formValue[fieldName], formValue);
      var formError = (0, _extends5.default)({}, _this.getFormError(), (_extends2 = {}, _extends2[fieldName] = checkResult.errorMessage, _extends2));
      onCheck && onCheck(formError);
      callback && callback(checkResult);

      if (checkResult.hasError) {
        onError && onError(formError);
        return false;
      }

      return true;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFieldError", function (name, errorMessage) {
      var _extends3;

      var _this$props3 = _this.props,
          onError = _this$props3.onError,
          onCheck = _this$props3.onCheck;
      var formError = (0, _extends5.default)({}, _this.state.formError, (_extends3 = {}, _extends3[name] = errorMessage, _extends3));

      _this.setState({
        formError: formError
      }, function () {
        onError && onError(formError);
        onCheck && onCheck(formError);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFieldSuccess", function (name) {
      var onCheck = _this.props.onCheck;
      var formError = (0, _omit2.default)(_this.state.formError, [name]);

      _this.setState({
        formError: formError
      }, function () {
        onCheck && onCheck(formError);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFieldChange", function (name, value, event) {
      var _extends4;

      var onChange = _this.props.onChange;

      var formValue = _this.getFormValue();

      var nextFormValue = (0, _extends5.default)({}, formValue, (_extends4 = {}, _extends4[name] = value, _extends4));

      _this.setState({
        formValue: nextFormValue
      });

      onChange && onChange(nextFormValue, event);
    });
    _this.state = {
      formError: props.formError || {},
      formValue: props.formDefaultValue
    };
    return _this;
  }

  var _proto = Form.prototype;

  _proto.getChildContext = function getChildContext() {
    var _this$props4 = this.props,
        formDefaultValue = _this$props4.formDefaultValue,
        formValue = _this$props4.formValue,
        model = _this$props4.model,
        checkTrigger = _this$props4.checkTrigger,
        errorFromContext = _this$props4.errorFromContext;
    var formError = this.getFormError();
    return {
      form: {
        onFieldChange: this.handleFieldChange,
        onFieldError: this.handleFieldError,
        onFieldSuccess: this.handleFieldSuccess,
        checkTrigger: checkTrigger,
        formValue: formValue,
        formDefaultValue: formDefaultValue,
        formError: formError,
        model: model,
        errorFromContext: errorFromContext
      }
    };
  };

  _proto.getFormValue = function getFormValue() {
    var formValue = this.props.formValue;
    return (0, _isUndefined2.default)(formValue) ? this.state.formValue : formValue;
  };

  _proto.getFormError = function getFormError() {
    var formError = this.props.formError;
    return (0, _isUndefined2.default)(formError) ? this.state.formError : formError;
  }
  /**
   * public APIs
   */
  ;

  /**
   * public APIs
   */
  _proto.cleanErrors = function cleanErrors(callback) {
    this.setState({
      formError: {}
    }, callback);
  }
  /**
   * public APIs
   */
  ;

  _proto.resetErrors = function resetErrors(formError, callback) {
    if (formError === void 0) {
      formError = {};
    }

    this.setState({
      formError: formError
    }, callback);
  };

  _proto.render = function render() {
    var _this$props5 = this.props,
        layout = _this$props5.layout,
        classPrefix = _this$props5.classPrefix,
        fluid = _this$props5.fluid,
        className = _this$props5.className,
        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props5, ["layout", "classPrefix", "fluid", "className"]);
    var addPrefix = (0, _utils.prefix)(classPrefix);
    var classes = (0, _classnames.default)(classPrefix, addPrefix(layout), className, addPrefix(fluid && layout === 'vertical' ? 'fluid' : 'fixed-width'));
    var unhandled = (0, _utils.getUnhandledProps)(Form, props);
    return React.createElement("form", (0, _extends5.default)({}, unhandled, {
      onSubmit: function onSubmit(e) {
        return e.preventDefault();
      },
      className: classes
    }));
  };

  return Form;
}(React.Component);

(0, _defineProperty2.default)(Form, "defaultProps", {
  classPrefix: (0, _prefix.defaultClassPrefix)('form'),
  model: (0, _schemaTyped.SchemaModel)({}),
  layout: 'vertical',
  formDefaultValue: {},
  checkDelay: 500,
  checkTrigger: 'change',
  errorFromContext: true
});
(0, _defineProperty2.default)(Form, "childContextTypes", {
  form: _propTypes.default.object.isRequired
});
(0, _defineProperty2.default)(Form, "handledProps", ["checkDelay", "checkTrigger", "className", "classPrefix", "errorFromContext", "fluid", "formDefaultValue", "formError", "formValue", "layout", "model", "onChange", "onCheck", "onError"]);
var _default = Form;
exports.default = _default;