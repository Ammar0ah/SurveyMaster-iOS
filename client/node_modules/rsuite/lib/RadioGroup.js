"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _shallowEqual = _interopRequireDefault(require("rsuite-utils/lib/utils/shallowEqual"));

var _utils = require("./utils");

var RadioGroup =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2.default)(RadioGroup, _React$Component);

  function RadioGroup(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function (nextValue, itemChecked, event) {
      var onChange = _this.props.onChange;

      _this.setState({
        value: nextValue
      });

      onChange && onChange(nextValue, event);
    });
    _this.state = {
      value: props.defaultValue
    };
    return _this;
  }

  var _proto = RadioGroup.prototype;

  _proto.getValue = function getValue() {
    var value = this.props.value;
    return (0, _isUndefined2.default)(value) ? this.state.value : value;
  };

  _proto.render = function render() {
    var _classNames,
        _this2 = this;

    var _this$props = this.props,
        className = _this$props.className,
        inline = _this$props.inline,
        name = _this$props.name,
        children = _this$props.children,
        classPrefix = _this$props.classPrefix,
        appearance = _this$props.appearance,
        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, ["className", "inline", "name", "children", "classPrefix", "appearance"]);
    var addPrefix = (0, _utils.prefix)(classPrefix);
    var classes = (0, _classnames.default)(classPrefix, addPrefix(appearance), className, (_classNames = {}, _classNames[addPrefix('inline')] = inline, _classNames));
    var nextValue = this.getValue();

    var items = _utils.ReactChildren.mapCloneElement(children, function (child) {
      if (child.type.displayName === 'Radio') {
        return {
          inline: inline,
          name: name,
          checked: (0, _shallowEqual.default)(nextValue, child.props.value),
          onChange: (0, _utils.createChainedFunction)(_this2.handleChange, child.props.onChange)
        };
      }

      return child.props;
    });

    var unhandled = (0, _utils.getUnhandledProps)(RadioGroup, rest);
    return React.createElement("div", (0, _extends2.default)({}, unhandled, {
      className: classes,
      role: "button"
    }), items);
  };

  return RadioGroup;
}(React.Component);

(0, _defineProperty2.default)(RadioGroup, "handledProps", ["appearance", "children", "className", "classPrefix", "defaultValue", "inline", "name", "onChange", "value"]);

var _default = (0, _utils.defaultProps)({
  appearance: 'default',
  classPrefix: 'radio-group'
})(RadioGroup);

exports.default = _default;