"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _emptyFunction = _interopRequireDefault(require("./utils/emptyFunction"));

var _normalizeWheel = _interopRequireDefault(require("./normalizeWheel"));

var _requestAnimationFramePolyfill = _interopRequireDefault(require("./animation/requestAnimationFramePolyfill"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var WheelHandler =
/*#__PURE__*/
function () {
  function WheelHandler(onWheel, handleScrollX, handleScrollY, stopPropagation) {
    _classCallCheck(this, WheelHandler);

    this.animationFrameID = null;
    this.deltaX = 0;
    this.deltaY = 0;
    this.didWheel = this.didWheel.bind(this);
    this._rootRef = null;

    if (typeof handleScrollX !== 'function') {
      handleScrollX = handleScrollX ? _emptyFunction.default.thatReturnsTrue : _emptyFunction.default.thatReturnsFalse;
    }

    if (typeof handleScrollY !== 'function') {
      handleScrollY = handleScrollY ? _emptyFunction.default.thatReturnsTrue : _emptyFunction.default.thatReturnsFalse;
    }

    if (typeof stopPropagation !== 'function') {
      stopPropagation = stopPropagation ? _emptyFunction.default.thatReturnsTrue : _emptyFunction.default.thatReturnsFalse;
    }

    this.handleScrollX = handleScrollX;
    this.handleScrollY = handleScrollY;
    this.stopPropagation = stopPropagation;
    this.onWheelCallback = onWheel;
    this.onWheel = this.onWheel.bind(this);
  }

  _createClass(WheelHandler, [{
    key: "contains",
    value: function contains(target) {
      var parent = target;

      while (parent !== document.body) {
        if (parent === this._rootRef) {
          return true;
        }

        parent = parent.parentNode;
      }

      return false;
    }
  }, {
    key: "onWheel",
    value: function onWheel(event) {
      var normalizedEvent = (0, _normalizeWheel.default)(event);
      var deltaX = this.deltaX + normalizedEvent.pixelX;
      var deltaY = this.deltaY + normalizedEvent.pixelY;
      var handleScrollX = this.handleScrollX(deltaX, deltaY);
      var handleScrollY = this.handleScrollY(deltaY, deltaX);

      if (!handleScrollX && !handleScrollY) {
        return;
      }

      if (this._rootRef && !this.contains(event.target)) {
        return;
      }

      this.deltaX += handleScrollX ? normalizedEvent.pixelX : 0;
      this.deltaY += handleScrollY ? normalizedEvent.pixelY : 0;
      event.preventDefault();
      var changed;

      if (this.deltaX !== 0 || this.deltaY !== 0) {
        if (this.stopPropagation()) {
          event.stopPropagation();
        }

        changed = true;
      }

      if (changed === true && this.animationFrameID === null) {
        this.animationFrameID = (0, _requestAnimationFramePolyfill.default)(this.didWheel);
      }
    }
  }, {
    key: "setRoot",
    value: function setRoot(rootRef) {
      this._rootRef = rootRef;
    }
  }, {
    key: "didWheel",
    value: function didWheel() {
      this.animationFrameID = null;
      this.onWheelCallback(this.deltaX, this.deltaY);
      this.deltaX = 0;
      this.deltaY = 0;
    }
  }]);

  return WheelHandler;
}();

var _default = WheelHandler;
exports.default = _default;