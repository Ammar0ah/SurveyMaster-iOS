'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _Type2 = require('./Type');

var _Type3 = _interopRequireDefault(_Type2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var ObjectType = function (_Type) {
  _inherits(ObjectType, _Type);

  ObjectType.from = function from(n) {
    return n;
  };

  function ObjectType() {
    var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Please enter a valid `object`';

    _classCallCheck(this, ObjectType);

    var _this = _possibleConstructorReturn(this, _Type.call(this, 'object'));

    _Type.prototype.pushCheck.call(_this, function (v) {
      return (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object';
    }, errorMessage);
    return _this;
  }

  /**
   * @example
   * ObjectType('这是一个对象').shape({
   *  name: StringType(),
   *  age: NumberType()
   * })
   */


  ObjectType.prototype.shape = function shape(types) {
    _Type.prototype.pushCheck.call(this, function (values) {
      var valids = Object.entries(types).map(function (item) {
        var key = item[0];
        var type = item[1];
        return type.check(values[key]);
      });

      var errors = valids.filter(function (item) {
        return item.hasError;
      }) || [];

      if (errors.length) {
        return errors[0];
      }

      return errors.length === 0;
    }, null);

    return this;
  };

  return ObjectType;
}(_Type3.default);

exports.default = function (errorMessage) {
  return new ObjectType(errorMessage);
};