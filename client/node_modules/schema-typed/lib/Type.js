'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function isEmpty(value) {
  return typeof value === 'undefined' || value === null || value === '';
}

function checkRequired(value, trim) {
  // String trim
  if (trim && typeof value === 'string') {
    value = value.replace(/(^\s*)|(\s*$)/g, '');
  }

  // Array
  if (Array.isArray(value)) {
    return !!value.length;
  }

  return !isEmpty(value);
}

function getCheck(data) {
  return function (value, rules) {
    for (var i = 0; i < rules.length; i += 1) {
      var _rules$i = rules[i],
          onValid = _rules$i.onValid,
          errorMessage = _rules$i.errorMessage;

      var checkResult = onValid(value, data);

      if (typeof checkResult === 'boolean' && !checkResult) {
        return { hasError: true, errorMessage: errorMessage };
      } else if ((typeof checkResult === 'undefined' ? 'undefined' : _typeof(checkResult)) === 'object') {
        return checkResult;
      }
    }

    return null;
  };
}

var Type = function () {
  function Type(name) {
    _classCallCheck(this, Type);

    this.name = name;
    this.required = false;
    this.requiredMessage = '';
    this.trim = false;
    this.rules = [];
  }

  Type.prototype.check = function check(value, data) {
    if (this.required && !checkRequired(value, this.trim)) {
      return { hasError: true, errorMessage: this.requiredMessage };
    }

    var checkValue = getCheck(data);
    var rules = [];
    var customRules = [];
    var checkStatus = null;

    this.rules.forEach(function (item) {
      if (item.customRule) {
        customRules.push(item);
      } else {
        rules.push(item);
      }
    });

    checkStatus = checkValue(value, customRules);
    if (checkStatus !== null) {
      return checkStatus;
    }

    if (!this.required && isEmpty(value)) {
      return { hasError: false };
    }

    checkStatus = checkValue(value, rules);
    if (checkStatus !== null) {
      return checkStatus;
    }

    return { hasError: false };
  };

  Type.prototype.pushCheck = function pushCheck(onValid, errorMessage, customRule) {
    errorMessage = errorMessage || this.rules[0].errorMessage;
    this.rules.push({
      onValid: onValid,
      errorMessage: errorMessage,
      customRule: customRule
    });
  };

  Type.prototype.addRule = function addRule(onValid, errorMessage) {
    this.pushCheck(onValid, errorMessage, true);
    return this;
  };

  Type.prototype.isRequired = function isRequired(errorMessage) {
    var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    this.required = true;
    this.trim = trim;
    this.requiredMessage = errorMessage;
    return this;
  };

  return Type;
}();

exports.default = Type;