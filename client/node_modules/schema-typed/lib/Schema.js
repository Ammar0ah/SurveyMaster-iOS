'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaModel = exports.Schema = undefined;

var _StringType = require('./StringType');

var _StringType2 = _interopRequireDefault(_StringType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Schema = exports.Schema = function () {
  function Schema(schema) {
    _classCallCheck(this, Schema);

    this.schema = schema;
  }

  Schema.prototype.getFieldType = function getFieldType(fieldName) {
    return this.schema[fieldName] || new _StringType2.default();
  };

  Schema.prototype.getKeys = function getKeys() {
    return Object.keys(this.schema);
  };

  Schema.prototype.checkForField = function checkForField(fieldName, fieldValue, data) {
    var fieldChecker = this.schema[fieldName];
    if (!fieldChecker) {
      return { hasError: false }; // fieldValue can be anything if no schema defined
    }
    return fieldChecker.check(fieldValue, data);
  };

  Schema.prototype.check = function check(data) {
    var _this = this;

    var checkResult = {};
    Object.keys(this.schema).forEach(function (key) {
      checkResult[key] = _this.checkForField(key, data[key], data);
    });
    return checkResult;
  };

  return Schema;
}();

var SchemaModel = exports.SchemaModel = function SchemaModel(o) {
  return new Schema(o);
};

SchemaModel.combine = function () {
  for (var _len = arguments.length, models = Array(_len), _key = 0; _key < _len; _key++) {
    models[_key] = arguments[_key];
  }

  return new Schema(models.map(function (model) {
    return model.schema;
  }).reduce(function (accumulator, currentValue) {
    return Object.assign(accumulator, currentValue);
  }, {}));
};