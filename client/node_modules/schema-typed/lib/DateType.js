'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Type2 = require('./Type');

var _Type3 = _interopRequireDefault(_Type2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var DateType = function (_Type) {
  _inherits(DateType, _Type);

  DateType.from = function from(n) {
    return n;
  };

  function DateType() {
    var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Please enter a valid date';

    _classCallCheck(this, DateType);

    var _this = _possibleConstructorReturn(this, _Type.call(this, 'date'));

    _Type.prototype.pushCheck.call(_this, function (value) {
      return !/Invalid|NaN/.test(new Date(value));
    }, errorMessage);
    return _this;
  }

  DateType.prototype.range = function range(min, max, errorMessage) {
    _Type.prototype.pushCheck.call(this, function (value) {
      return new Date(value) >= new Date(min) && new Date(value) <= new Date(max);
    }, errorMessage);
    return this;
  };

  DateType.prototype.min = function min(_min, errorMessage) {
    _Type.prototype.pushCheck.call(this, function (value) {
      return new Date(value) >= new Date(_min);
    }, errorMessage);
    return this;
  };

  DateType.prototype.max = function max(_max, errorMessage) {
    _Type.prototype.pushCheck.call(this, function (value) {
      return new Date(value) <= new Date(_max);
    }, errorMessage);
    return this;
  };

  return DateType;
}(_Type3.default);

exports.default = function (errorMessage) {
  return new DateType(errorMessage);
};