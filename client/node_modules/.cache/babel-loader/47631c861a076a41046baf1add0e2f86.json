{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Collapse = _interopRequireDefault(require(\"rsuite-utils/lib/Animation/Collapse\"));\n\nvar _utils = require(\"./utils\");\n\nvar Panel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Panel, _React$Component);\n\n  function Panel(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (event) {\n      event.persist();\n      event.selected = true;\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          eventKey = _this$props.eventKey;\n\n      if (onSelect) {\n        onSelect(eventKey, event);\n      }\n\n      if (event.selected) {\n        _this.handleToggle();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleToggle\", function () {\n      _this.setState({\n        expanded: !_this.state.expanded\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils.prefix)(_this.props.classPrefix)(name);\n    });\n    _this.state = {\n      expanded: props.defaultExpanded\n    };\n    return _this;\n  }\n\n  var _proto = Panel.prototype;\n\n  _proto.isExpanded = function isExpanded() {\n    return (0, _isUndefined2.default)(this.props.expanded) ? this.state.expanded : this.props.expanded;\n  };\n\n  _proto.renderCollapsibleTitle = function renderCollapsibleTitle(header, headerRole) {\n    return React.createElement(\"h4\", {\n      className: this.addPrefix('title'),\n      role: \"presentation\"\n    }, this.renderAnchor(header, headerRole));\n  };\n\n  _proto.renderCollapsibleBody = function renderCollapsibleBody(panelRole) {\n    var id = this.props.id;\n    var collapseProps = (0, _extends2.default)({}, (0, _pick2.default)(this.props, _Collapse.default.handledProps), {\n      in: this.isExpanded()\n    });\n    var props = {\n      id: id,\n      className: this.addPrefix('collapse'),\n      'aria-hidden': !this.isExpanded()\n    };\n\n    if (panelRole) {\n      props.role = panelRole;\n    }\n\n    return React.createElement(_Collapse.default, collapseProps, React.createElement(\"div\", props, this.renderBody()));\n  };\n\n  _proto.renderBody = function renderBody() {\n    var _classNames;\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        bodyFill = _this$props2.bodyFill;\n    var classes = (0, _classnames.default)(this.addPrefix('body'), (_classNames = {}, _classNames[this.addPrefix('body-fill')] = bodyFill, _classNames));\n    return React.createElement(\"div\", {\n      className: classes\n    }, children);\n  };\n\n  _proto.renderHeading = function renderHeading(headerRole) {\n    var _this$props3 = this.props,\n        header = _this$props3.header,\n        collapsible = _this$props3.collapsible;\n\n    if (!header) {\n      return null;\n    }\n\n    if (!React.isValidElement(header) || Array.isArray(header)) {\n      header = collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;\n    } else {\n      var className = (0, _classnames.default)(this.addPrefix('title'), header.props.className);\n      header = React.cloneElement(header, {\n        className: className\n      });\n    }\n\n    return React.createElement(\"div\", {\n      role: \"rowheader\",\n      className: this.addPrefix('heading'),\n      onClick: this.handleSelect,\n      tabIndex: -1\n    }, header);\n  };\n\n  _proto.renderAnchor = function renderAnchor(header, headerRole) {\n    var _this$props4 = this.props,\n        id = _this$props4.id,\n        collapsible = _this$props4.collapsible;\n    return React.createElement(\"span\", {\n      \"aria-controls\": collapsible ? id : null,\n      className: this.isExpanded() ? null : 'collapsed',\n      \"aria-expanded\": this.isExpanded(),\n      \"aria-selected\": this.isExpanded(),\n      role: headerRole\n    }, header);\n  };\n\n  _proto.render = function render() {\n    var _classNames2;\n\n    var _this$props5 = this.props,\n        headerRole = _this$props5.headerRole,\n        panelRole = _this$props5.panelRole,\n        className = _this$props5.className,\n        collapsible = _this$props5.collapsible,\n        bordered = _this$props5.bordered,\n        classPrefix = _this$props5.classPrefix,\n        id = _this$props5.id,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props5, [\"headerRole\", \"panelRole\", \"className\", \"collapsible\", \"bordered\", \"classPrefix\", \"id\"]);\n    var classes = (0, _classnames.default)(classPrefix, this.addPrefix('default'), className, (_classNames2 = {}, _classNames2[this.addPrefix('in')] = this.isExpanded(), _classNames2[this.addPrefix('collapsible')] = collapsible, _classNames2[this.addPrefix('bordered')] = bordered, _classNames2));\n    var unhandled = (0, _utils.getUnhandledProps)(Panel, props);\n    return React.createElement(\"div\", (0, _extends2.default)({}, unhandled, {\n      className: classes,\n      onSelect: null,\n      id: collapsible ? null : id\n    }), this.renderHeading(headerRole), collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody());\n  };\n\n  return Panel;\n}(React.Component);\n\n(0, _defineProperty2.default)(Panel, \"handledProps\", [\"bodyFill\", \"bordered\", \"children\", \"className\", \"classPrefix\", \"collapsible\", \"defaultExpanded\", \"eventKey\", \"expanded\", \"header\", \"headerRole\", \"id\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onSelect\", \"panelRole\"]);\n\nvar _default = (0, _utils.defaultProps)({\n  classPrefix: 'panel'\n})(Panel);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}