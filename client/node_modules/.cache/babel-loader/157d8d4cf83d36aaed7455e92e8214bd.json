{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _kebabCase2 = _interopRequireDefault(require(\"lodash/kebabCase\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _rsuiteIntl = require(\"rsuite-intl\");\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _Calendar = _interopRequireDefault(require(\"../Calendar\"));\n\nvar _Toolbar = _interopRequireDefault(require(\"./Toolbar\"));\n\nvar _utils = require(\"../utils\");\n\nvar _disabledTime = _interopRequireWildcard(require(\"../utils/disabledTime\"));\n\nvar _picker = require(\"../_picker\");\n\nvar _formatUtils = require(\"../utils/formatUtils\");\n\nvar _set_seconds = _interopRequireDefault(require(\"date-fns/set_seconds\"));\n\nvar _set_minutes = _interopRequireDefault(require(\"date-fns/set_minutes\"));\n\nvar _set_hours = _interopRequireDefault(require(\"date-fns/set_hours\"));\n\nvar _get_seconds = _interopRequireDefault(require(\"date-fns/get_seconds\"));\n\nvar _is_same_day = _interopRequireDefault(require(\"date-fns/is_same_day\"));\n\nvar _get_hours = _interopRequireDefault(require(\"date-fns/get_hours\"));\n\nvar _get_minutes = _interopRequireDefault(require(\"date-fns/get_minutes\"));\n\nvar _format = _interopRequireDefault(require(\"date-fns/format\"));\n\nvar _composeFunctions = _interopRequireDefault(require(\"../utils/composeFunctions\"));\n\nvar DatePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(DatePicker, _React$Component);\n\n  function DatePicker(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"onMoveForword\", function (nextPageDate) {\n      var _this$props = _this.props,\n          onNextMonth = _this$props.onNextMonth,\n          onChangeCalendarDate = _this$props.onChangeCalendarDate;\n\n      _this.setState({\n        pageDate: nextPageDate\n      });\n\n      onNextMonth && onNextMonth(nextPageDate);\n      onChangeCalendarDate && onChangeCalendarDate(nextPageDate);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"onMoveBackward\", function (nextPageDate) {\n      var _this$props2 = _this.props,\n          onPrevMonth = _this$props2.onPrevMonth,\n          onChangeCalendarDate = _this$props2.onChangeCalendarDate;\n\n      _this.setState({\n        pageDate: nextPageDate\n      });\n\n      onPrevMonth && onPrevMonth(nextPageDate);\n      onChangeCalendarDate && onChangeCalendarDate(nextPageDate);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getValue\", function () {\n      return _this.props.value || _this.state.value;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"calendar\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleChangePageDate\", function (nextPageDate) {\n      _this.setState({\n        pageDate: nextPageDate,\n        calendarState: undefined\n      });\n\n      _this.handleAllSelect(nextPageDate);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleChangePageTime\", function (nextPageTime) {\n      _this.setState({\n        pageDate: nextPageTime\n      });\n\n      _this.handleAllSelect(nextPageTime);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleShortcutPageDate\", function (value, closeOverlay, event) {\n      _this.updateValue(value, closeOverlay);\n\n      _this.handleAllSelect(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleOK\", function (event) {\n      var onOk = _this.props.onOk;\n\n      _this.updateValue();\n\n      onOk && onOk(_this.state.pageDate, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggleMonthDropdown\", function () {\n      var calendarState = _this.state.calendarState;\n      var onToggleMonthDropdown = _this.props.onToggleMonthDropdown;\n      var toggle;\n\n      if (calendarState === 'DROP_MONTH') {\n        _this.hideMonthDropdown();\n\n        toggle = false;\n      } else {\n        _this.showMonthDropdown();\n\n        toggle = true;\n      }\n\n      onToggleMonthDropdown && onToggleMonthDropdown(toggle);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggleTimeDropdown\", function () {\n      var calendarState = _this.state.calendarState;\n      var onToggleTimeDropdown = _this.props.onToggleTimeDropdown;\n      var toggle;\n\n      if (calendarState === 'DROP_TIME') {\n        _this.hideTimeDropdown();\n\n        toggle = false;\n      } else {\n        _this.showTimeDropdown();\n\n        toggle = true;\n      }\n\n      onToggleTimeDropdown && onToggleTimeDropdown(toggle);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClean\", function () {\n      _this.setState({\n        pageDate: new Date()\n      });\n\n      _this.updateValue(null);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleAllSelect\", function (nextValue, event) {\n      var _this$props3 = _this.props,\n          onSelect = _this$props3.onSelect,\n          onChangeCalendarDate = _this$props3.onChangeCalendarDate;\n      onSelect && onSelect(nextValue, event);\n      onChangeCalendarDate && onChangeCalendarDate(nextValue, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (nextValue) {\n      var oneTap = _this.props.oneTap;\n      var pageDate = _this.state.pageDate;\n\n      _this.setState({\n        pageDate: (0, _composeFunctions.default)(function (d) {\n          return (0, _set_hours.default)(d, (0, _get_hours.default)(pageDate));\n        }, function (d) {\n          return (0, _set_minutes.default)(d, (0, _get_minutes.default)(pageDate));\n        }, function (d) {\n          return (0, _set_seconds.default)(d, (0, _get_seconds.default)(pageDate));\n        })(nextValue)\n      });\n\n      _this.handleAllSelect(nextValue);\n\n      if (oneTap) {\n        _this.updateValue(nextValue);\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleEntered\", function () {\n      var onOpen = _this.props.onOpen;\n      onOpen && onOpen();\n\n      _this.setState({\n        active: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleExit\", function () {\n      var onClose = _this.props.onClose;\n      onClose && onClose();\n\n      _this.setState({\n        calendarState: undefined,\n        active: false\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"disabledToolbarHandle\", function (date) {\n      var disabledDate = _this.props.disabledDate;\n      var allowDate = disabledDate ? disabledDate(date) : false;\n      var allowTime = (0, _disabledTime.default)(_this.props, date);\n      return allowDate || allowTime;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"calendar\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"container\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"trigger\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"menuContainer\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTriggerRef\", function (ref) {\n      _this.trigger = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindContainerRef\", function (ref) {\n      _this.container = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindMenuContainerRef\", function (ref) {\n      _this.menuContainer = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindCalendarRef\", function (ref) {\n      _this.calendar = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils.prefix)(_this.props.classPrefix)(name);\n    });\n    var defaultValue = props.defaultValue,\n        _value = props.value,\n        calendarDefaultDate = props.calendarDefaultDate;\n    var activeValue = _value || defaultValue;\n    _this.state = {\n      value: activeValue,\n      pageDate: activeValue || calendarDefaultDate || new Date() // display calendar date\n\n    };\n    return _this;\n  }\n\n  DatePicker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (typeof nextProps.value !== 'undefined') {\n      var _value2 = nextProps.value;\n\n      if (_value2 && !(0, _is_same_day.default)(_value2, prevState.value)) {\n        return {\n          value: _value2,\n          pageDate: _value2\n        };\n      }\n\n      return {\n        value: _value2\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = DatePicker.prototype;\n\n  _proto.getDateString = function getDateString() {\n    var _this$props4 = this.props,\n        placeholder = _this$props4.placeholder,\n        formatType = _this$props4.format,\n        renderValue = _this$props4.renderValue;\n    var value = this.getValue();\n\n    if (value) {\n      return renderValue ? renderValue(value, formatType) : (0, _format.default)(value, formatType);\n    }\n\n    return placeholder || formatType;\n  };\n\n  _proto.updateValue = function updateValue(nextPageDate, closeOverlay) {\n    if (closeOverlay === void 0) {\n      closeOverlay = true;\n    }\n\n    var pageDate = this.state.pageDate;\n    var onChange = this.props.onChange;\n    var value = this.getValue();\n    var nextValue = !(0, _isUndefined2.default)(nextPageDate) ? nextPageDate : pageDate;\n    this.setState({\n      pageDate: nextValue || new Date(),\n      value: nextValue\n    });\n\n    if (nextValue !== value || !(0, _is_same_day.default)(nextValue, value)) {\n      onChange && onChange(nextValue);\n    } // `closeOverlay` default value is `true`\n\n\n    if (closeOverlay !== false) {\n      this.close();\n    }\n  };\n\n  _proto.resetPageDate = function resetPageDate() {\n    var calendarDefaultDate = this.props.calendarDefaultDate;\n    var value = this.getValue();\n    this.setState({\n      pageDate: value || calendarDefaultDate || new Date()\n    });\n  };\n\n  _proto.open = function open() {\n    if (this.trigger) {\n      this.trigger.show();\n    }\n  };\n\n  _proto.close = function close() {\n    if (this.trigger) {\n      this.trigger.hide();\n    }\n  };\n\n  _proto.showMonthDropdown = function showMonthDropdown() {\n    this.setState({\n      calendarState: 'DROP_MONTH'\n    });\n  };\n\n  _proto.hideMonthDropdown = function hideMonthDropdown() {\n    this.setState({\n      calendarState: undefined\n    });\n  };\n\n  _proto.showTimeDropdown = function showTimeDropdown() {\n    this.setState({\n      calendarState: 'DROP_TIME'\n    });\n  };\n\n  _proto.hideTimeDropdown = function hideTimeDropdown() {\n    this.setState({\n      calendarState: undefined\n    });\n  };\n\n  _proto.renderCalendar = function renderCalendar() {\n    var _this$props5 = this.props,\n        format = _this$props5.format,\n        isoWeek = _this$props5.isoWeek,\n        limitEndYear = _this$props5.limitEndYear,\n        disabledDate = _this$props5.disabledDate;\n    var _this$state = this.state,\n        calendarState = _this$state.calendarState,\n        pageDate = _this$state.pageDate;\n    var calendarProps = (0, _pick2.default)(this.props, _disabledTime.calendarOnlyProps);\n    return React.createElement(_Calendar.default, (0, _extends2.default)({}, calendarProps, {\n      disabledDate: disabledDate,\n      limitEndYear: limitEndYear,\n      format: format,\n      isoWeek: isoWeek,\n      calendarState: calendarState,\n      pageDate: pageDate,\n      onMoveForword: this.onMoveForword,\n      onMoveBackward: this.onMoveBackward,\n      onSelect: this.handleSelect,\n      onToggleMonthDropdown: this.toggleMonthDropdown,\n      onToggleTimeDropdown: this.toggleTimeDropdown,\n      onChangePageDate: this.handleChangePageDate,\n      onChangePageTime: this.handleChangePageTime,\n      calendarRef: this.bindCalendarRef\n    }));\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu(calendar) {\n    var _this$props6 = this.props,\n        placement = _this$props6.placement,\n        ranges = _this$props6.ranges,\n        menuClassName = _this$props6.menuClassName,\n        oneTap = _this$props6.oneTap;\n    var pageDate = this.state.pageDate;\n    var classes = (0, _classnames.default)(this.addPrefix('date-menu'), this.addPrefix(\"placement-\" + (0, _kebabCase2.default)(placement)), menuClassName);\n    return React.createElement(_picker.MenuWrapper, {\n      className: classes\n    }, React.createElement(\"div\", {\n      ref: this.bindMenuContainerRef\n    }, calendar, React.createElement(_Toolbar.default, {\n      ranges: ranges,\n      pageDate: pageDate,\n      disabledHandle: this.disabledToolbarHandle,\n      onShortcut: this.handleShortcutPageDate,\n      onOk: this.handleOK,\n      hideOkButton: oneTap\n    })));\n  };\n\n  _proto.render = function render() {\n    var _getToggleWrapperClas;\n\n    var _this$props7 = this.props,\n        inline = _this$props7.inline,\n        className = _this$props7.className,\n        disabled = _this$props7.disabled,\n        cleanable = _this$props7.cleanable,\n        classPrefix = _this$props7.classPrefix,\n        format = _this$props7.format,\n        locale = _this$props7.locale,\n        toggleComponentClass = _this$props7.toggleComponentClass,\n        style = _this$props7.style,\n        onEntered = _this$props7.onEntered,\n        onExited = _this$props7.onExited,\n        onClean = _this$props7.onClean,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props7, [\"inline\", \"className\", \"disabled\", \"cleanable\", \"classPrefix\", \"format\", \"locale\", \"toggleComponentClass\", \"style\", \"onEntered\", \"onExited\", \"onClean\"]);\n    var value = this.getValue();\n    var unhandled = (0, _utils.getUnhandledProps)(DatePicker, rest);\n    var hasValue = !!value;\n    var calendar = this.renderCalendar();\n\n    if (inline) {\n      return React.createElement(_rsuiteIntl.IntlProvider, {\n        locale: locale\n      }, React.createElement(\"div\", {\n        className: (0, _classnames.default)(classPrefix, this.addPrefix('date-inline'), className)\n      }, calendar));\n    }\n\n    var classes = (0, _picker.getToggleWrapperClassName)('date', this.addPrefix, this.props, hasValue, (_getToggleWrapperClas = {}, _getToggleWrapperClas[this.addPrefix('date-only-time')] = (0, _formatUtils.shouldOnlyTime)(format), _getToggleWrapperClas));\n    return React.createElement(_rsuiteIntl.IntlProvider, {\n      locale: locale\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      ref: this.bindContainerRef\n    }, React.createElement(_picker.PickerToggleTrigger, {\n      pickerProps: this.props,\n      innerRef: this.bindTriggerRef,\n      onEntered: (0, _utils.createChainedFunction)(this.handleEntered, onEntered),\n      onExit: (0, _utils.createChainedFunction)(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu(calendar)\n    }, React.createElement(_picker.PickerToggle, (0, _extends2.default)({}, unhandled, {\n      componentClass: toggleComponentClass,\n      onClean: (0, _utils.createChainedFunction)(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active\n    }), this.getDateString()))));\n  };\n\n  return DatePicker;\n}(React.Component);\n\n(0, _defineProperty2.default)(DatePicker, \"defaultProps\", {\n  appearance: 'default',\n  placement: 'bottomLeft',\n  limitEndYear: 1000,\n  format: 'YYYY-MM-DD',\n  placeholder: '',\n  locale: {\n    sunday: 'Su',\n    monday: 'Mo',\n    tuesday: 'Tu',\n    wednesday: 'We',\n    thursday: 'Th',\n    friday: 'Fr',\n    saturday: 'Sa',\n    ok: 'OK',\n    today: 'Today',\n    yesterday: 'Yesterday',\n    hours: 'Hours',\n    minutes: 'Minutes',\n    seconds: 'Seconds'\n  },\n  cleanable: true\n});\n(0, _defineProperty2.default)(DatePicker, \"handledProps\", [\"appearance\", \"block\", \"calendarDefaultDate\", \"className\", \"classPrefix\", \"cleanable\", \"container\", \"containerPadding\", \"defaultOpen\", \"defaultValue\", \"disabled\", \"disabledDate\", \"disabledHours\", \"disabledMinutes\", \"disabledSeconds\", \"format\", \"hideHours\", \"hideMinutes\", \"hideSeconds\", \"inline\", \"isoWeek\", \"limitEndYear\", \"locale\", \"menuClassName\", \"onChange\", \"onChangeCalendarDate\", \"onClean\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onHide\", \"onNextMonth\", \"onOk\", \"onOpen\", \"onPrevMonth\", \"onSelect\", \"onToggleMonthDropdown\", \"onToggleTimeDropdown\", \"oneTap\", \"open\", \"placeholder\", \"placement\", \"ranges\", \"renderValue\", \"style\", \"toggleComponentClass\", \"value\"]);\n(0, _reactLifecyclesCompat.polyfill)(DatePicker);\nvar enhance = (0, _utils.defaultProps)({\n  classPrefix: 'picker'\n});\n\nvar _default = enhance(DatePicker);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}