{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _isNumber2 = _interopRequireDefault(require(\"lodash/isNumber\"));\n\nvar _isString2 = _interopRequireDefault(require(\"lodash/isString\"));\n\nvar _kebabCase2 = _interopRequireDefault(require(\"lodash/kebabCase\"));\n\nvar _isEmpty2 = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _isArray2 = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _domLib = require(\"dom-lib\");\n\nvar _rsuiteIntl = require(\"rsuite-intl\");\n\nvar _List = _interopRequireDefault(require(\"react-virtualized/dist/commonjs/List\"));\n\nvar _AutoSizer = _interopRequireDefault(require(\"react-virtualized/dist/commonjs/AutoSizer\"));\n\nvar _CellMeasurer = require(\"react-virtualized/dist/commonjs/CellMeasurer\");\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _utils = require(\"rsuite-utils/lib/utils\");\n\nvar _TreeNode = _interopRequireDefault(require(\"./TreeNode\"));\n\nvar _utils2 = require(\"../utils\");\n\nvar _treeUtils = require(\"../utils/treeUtils\");\n\nvar _picker = require(\"../_picker\");\n\nvar defaultHeight = 360;\nvar defaultWidth = 200;\n\nvar Tree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Tree, _React$Component);\n\n  function Tree(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getFocusableMenuItems\", function () {\n      var filterData = _this.state.filterData;\n      var _this$props = _this.props,\n          childrenKey = _this$props.childrenKey,\n          _this$props$disabledI = _this$props.disabledItemValues,\n          disabledItemValues = _this$props$disabledI === void 0 ? [] : _this$props$disabledI,\n          valueKey = _this$props.valueKey;\n      var items = [];\n\n      var loop = function loop(nodes) {\n        nodes.forEach(function (node) {\n          var disabled = disabledItemValues.some(function (disabledItem) {\n            return (0, _utils.shallowEqual)(disabledItem, node[valueKey]);\n          });\n\n          if (!disabled) {\n            items.push(node);\n\n            if (!_this.getExpandState(node, _this.props)) {\n              return;\n            }\n\n            if (node[childrenKey]) {\n              loop(node[childrenKey]);\n            }\n          }\n        });\n      };\n\n      loop(filterData);\n      return items;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getElementByDataKey\", function (dataKey) {\n      var ele = (0, _reactDom.findDOMNode)(_this.nodeRefs[dataKey]);\n\n      if (ele instanceof Element) {\n        return ele.querySelector(\".\" + _this.addPrefix('tree-view-node-label'));\n      }\n\n      return null;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"nodes\", {});\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"node\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"isControlled\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"tempNode\", []);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"treeView\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"list\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"cache\", new _CellMeasurer.CellMeasurerCache({\n      fixedWidth: true,\n      minHeight: 20\n    }));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindListRef\", function (ref) {\n      _this.list = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTreeViewRef\", function (ref) {\n      _this.treeView = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"trigger\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTriggerRef\", function (ref) {\n      _this.trigger = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"container\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindContainerRef\", function (ref) {\n      _this.container = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"nodeRefs\", {});\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindNodeRefs\", function (refKey, ref) {\n      _this.nodeRefs[refKey] = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"menu\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindMenuRef\", function (ref) {\n      _this.menu = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"position\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindPositionRef\", function (ref) {\n      _this.position = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggle\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindToggleRef\", function (ref) {\n      _this.toggle = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getPositionInstance\", function () {\n      return _this.position;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getToggleInstance\", function () {\n      return _this.toggle;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"selectActiveItem\", function (event) {\n      var _this$getActiveItem = _this.getActiveItem(),\n          nodeData = _this$getActiveItem.nodeData,\n          layer = _this$getActiveItem.layer;\n\n      _this.handleSelect(nodeData, +layer, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"focusNextItem\", function () {\n      var _this$getItemsAndActi = _this.getItemsAndActiveIndex(),\n          items = _this$getItemsAndActi.items,\n          activeIndex = _this$getItemsAndActi.activeIndex;\n\n      if (items.length === 0) {\n        return;\n      }\n\n      var nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1;\n\n      var node = _this.getElementByDataKey(items[nextIndex].refKey);\n\n      if (node !== null) {\n        node.focus();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"focusPreviousItem\", function () {\n      var _this$getItemsAndActi2 = _this.getItemsAndActiveIndex(),\n          items = _this$getItemsAndActi2.items,\n          activeIndex = _this$getItemsAndActi2.activeIndex;\n\n      if (items.length === 0) {\n        return;\n      }\n\n      var prevIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1;\n      prevIndex = prevIndex >= 0 ? prevIndex : 0;\n\n      var node = _this.getElementByDataKey(items[prevIndex].refKey);\n\n      if (node !== null) {\n        node.focus();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"closeDropdown\", function () {\n      if (_this.trigger) {\n        _this.trigger.hide();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"openDropdown\", function () {\n      if (_this.trigger) {\n        _this.trigger.show();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggleDropdown\", function () {\n      var active = _this.state.active;\n\n      if (active) {\n        _this.closeDropdown();\n\n        return;\n      }\n\n      _this.openDropdown();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils2.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleToggle\", function (nodeData, layer) {\n      var _this$props2 = _this.props,\n          _this$props2$classPre = _this$props2.classPrefix,\n          classPrefix = _this$props2$classPre === void 0 ? '' : _this$props2$classPre,\n          valueKey = _this$props2.valueKey,\n          onExpand = _this$props2.onExpand,\n          virtualized = _this$props2.virtualized;\n\n      if (!virtualized) {\n        var openClass = classPrefix + \"-tree-view-open\";\n        (0, _domLib.toggleClass)((0, _reactDom.findDOMNode)(_this.nodeRefs[nodeData.refKey]), openClass);\n        nodeData.expand = (0, _domLib.hasClass)((0, _reactDom.findDOMNode)(_this.nodeRefs[nodeData.refKey]), openClass);\n        _this.nodes[nodeData.refKey].expand = nodeData.expand;\n      } else {\n        _this.nodes[nodeData.refKey].expand = !nodeData.expand;\n      }\n\n      _this.setState({\n        expandItemValues: _this.serializeList('expand')\n      });\n\n      onExpand && onExpand(nodeData, layer, (0, _picker.createConcatChildrenFunction)(nodeData, nodeData[valueKey]));\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (nodeData, layer, event) {\n      var _this$props3 = _this.props,\n          valueKey = _this$props3.valueKey,\n          onChange = _this$props3.onChange,\n          onSelect = _this$props3.onSelect;\n      _this.node = nodeData;\n\n      if (!_this.isControlled) {\n        _this.setState({\n          activeNode: nodeData,\n          selectedValue: nodeData[valueKey]\n        });\n      }\n\n      onChange && onChange(nodeData[valueKey]);\n      onSelect && onSelect(nodeData, layer, event);\n\n      _this.closeDropdown();\n\n      if (_this.toggle) {\n        _this.toggle.onFocus();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleKeyDown\", function (event) {\n      (0, _picker.onMenuKeyDown)(event, {\n        down: _this.focusNextItem,\n        up: _this.focusPreviousItem,\n        enter: _this.selectActiveItem,\n        del: _this.handleClean\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleToggleKeyDown\", function (event) {\n      var classPrefix = _this.props.classPrefix;\n      var _this$state = _this.state,\n          activeNode = _this$state.activeNode,\n          active = _this$state.active; // enter\n\n      if ((!activeNode || !active) && event.keyCode === 13) {\n        _this.toggleDropdown();\n      } // delete\n\n\n      if (event.keyCode === 8) {\n        _this.handleClean();\n      }\n\n      if (!_this.treeView) {\n        return;\n      }\n\n      if (event.target instanceof HTMLElement) {\n        var className = event.target.className;\n\n        if (className.includes(classPrefix + \"-toggle\") || className.includes(classPrefix + \"-toggle-custom\") || className.includes(classPrefix + \"-search-bar-input\")) {\n          (0, _picker.onMenuKeyDown)(event, {\n            down: _this.focusNextItem\n          });\n        }\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSearch\", function (value, event) {\n      var filterData = _this.state.filterData;\n      var _this$props4 = _this.props,\n          onSearch = _this$props4.onSearch,\n          searchKeyword = _this$props4.searchKeyword;\n\n      if ((0, _isUndefined2.default)(searchKeyword)) {\n        _this.setState({\n          searchKeyword: value,\n          filterData: _this.getFilterData(filterData, value)\n        });\n      }\n\n      onSearch && onSearch(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClean\", function () {\n      var onChange = _this.props.onChange;\n\n      _this.setState({\n        activeNode: null,\n        selectedValue: null\n      });\n\n      _this.node = null;\n      onChange && onChange(null);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleOnOpen\", function () {\n      var activeNode = _this.state.activeNode;\n      var onOpen = _this.props.onOpen;\n\n      if (activeNode) {\n        var node = _this.getElementByDataKey(activeNode.refKey);\n\n        if (node !== null) {\n          node.focus();\n        }\n      }\n\n      onOpen && onOpen();\n\n      _this.setState({\n        active: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleOnClose\", function () {\n      var filterData = _this.state.filterData;\n      var _this$props5 = _this.props,\n          searchKeyword = _this$props5.searchKeyword,\n          onClose = _this$props5.onClose;\n\n      if ((0, _isUndefined2.default)(searchKeyword)) {\n        _this.setState({\n          searchKeyword: '',\n          filterData: _this.getFilterData(filterData, '')\n        });\n      }\n\n      onClose && onClose();\n\n      _this.setState({\n        active: false\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"rowRenderer\", function (_ref) {\n      var node = _ref.node,\n          key = _ref.key,\n          style = _ref.style;\n\n      var treeViewClasses = _this.addPrefix('tree-view');\n\n      var options = {\n        key: key,\n        style: style,\n        classPrefix: treeViewClasses\n      };\n      return _this.renderVirtualNode(node, options);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"measureRowRenderer\", function (nodes) {\n      return function (_ref2) {\n        var key = _ref2.key,\n            index = _ref2.index,\n            style = _ref2.style,\n            parent = _ref2.parent;\n        var node = nodes[index];\n        return React.createElement(_CellMeasurer.CellMeasurer, {\n          cache: _this.cache,\n          columnIndex: 0,\n          key: key,\n          rowIndex: index,\n          parent: parent\n        }, function (m) {\n          return _this.rowRenderer((0, _extends2.default)({}, m, {\n            node: node,\n            key: key,\n            style: style\n          }));\n        });\n      };\n    });\n    var _value = props.value,\n        data = props.data,\n        _valueKey = props.valueKey;\n    _this.isControlled = !(0, _isUndefined2.default)(_value);\n    var nextData = [].concat(data);\n\n    var keyword = _this.getSearchKeyword(props);\n\n    _this.flattenNodes(nextData);\n\n    _this.state = {\n      data: data,\n      value: _value,\n      selectedValue: _this.getValue(props),\n      expandAll: _this.getExpandAll(props),\n      filterData: _this.getFilterData(nextData, keyword, props),\n      activeNode: _this.getActiveNode(_this.getValue(props), _valueKey),\n      searchKeyword: keyword,\n      expandItemValues: _this.serializeList('expand')\n    };\n    return _this;\n  }\n\n  var _proto = Tree.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var activeNode = this.state.activeNode;\n    this.focusNode(activeNode);\n  };\n\n  Tree.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var value = nextProps.value,\n        data = nextProps.data,\n        expandAll = nextProps.expandAll,\n        searchKeyword = nextProps.searchKeyword;\n    var nextState = {};\n\n    if ((0, _isArray2.default)(data) && (0, _isArray2.default)(prevState.data) && prevState.data !== data) {\n      nextState.data = data;\n    }\n\n    if (!(0, _utils.shallowEqual)(value, prevState.value)) {\n      nextState.value = value;\n      nextState.selectedValue = value;\n    }\n\n    if (searchKeyword !== prevState.searchKeyword) {\n      nextState.searchKeyword = searchKeyword;\n    }\n\n    if (expandAll !== prevState.expandAll) {\n      nextState.expandAll = expandAll;\n    }\n\n    return Object.keys(nextState).length ? nextState : null;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var _this$state2 = this.state,\n        filterData = _this$state2.filterData,\n        searchKeyword = _this$state2.searchKeyword;\n    var _this$props6 = this.props,\n        value = _this$props6.value,\n        data = _this$props6.data,\n        valueKey = _this$props6.valueKey;\n\n    if (prevState.data !== data) {\n      var nextData = [].concat(data);\n      this.flattenNodes(nextData);\n\n      var _filterData = this.getFilterData(nextData, searchKeyword);\n\n      var _activeNode = this.getActiveNode(this.getValue());\n\n      this.focusNode(_activeNode);\n      this.setState({\n        data: nextData,\n        filterData: _filterData,\n        activeNode: _activeNode\n      });\n    }\n\n    if (!(0, _utils.shallowEqual)(prevState.value, value)) {\n      var _activeNode2 = null;\n\n      if (this.node === null) {\n        _activeNode2 = this.getActiveNode(value);\n      }\n\n      if (value !== null && this.node !== null) {\n        _activeNode2 = (0, _utils.shallowEqual)(this.node[valueKey], value) ? this.node : this.getActiveNode(value);\n      }\n\n      var nextState = {\n        value: value,\n        activeNode: _activeNode2\n      };\n\n      if (value === null) {\n        nextState.activeNode = null;\n        this.node = null;\n      }\n\n      if (_activeNode2 !== null) {\n        this.focusNode(_activeNode2);\n      }\n\n      this.setState(nextState);\n    }\n\n    if (prevState.searchKeyword !== this.props.searchKeyword) {\n      this.setState({\n        filterData: this.getFilterData(filterData, this.props.searchKeyword)\n      });\n    }\n\n    if (this.list) {\n      this.list.forceUpdateGrid();\n    }\n  };\n\n  _proto.getExpandAll = function getExpandAll(props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    return props.expandAll !== undefined ? props.expandAll : props.defaultExpandAll;\n  };\n\n  _proto.getValue = function getValue(props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props = props,\n        value = _props.value,\n        defaultValue = _props.defaultValue;\n    return !(0, _isUndefined2.default)(value) ? value : defaultValue;\n  };\n\n  _proto.getSearchKeyword = function getSearchKeyword(props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props2 = props,\n        _props2$searchKeyword = _props2.searchKeyword,\n        searchKeyword = _props2$searchKeyword === void 0 ? '' : _props2$searchKeyword;\n    return !(0, _isUndefined2.default)(searchKeyword) ? searchKeyword : '';\n  };\n\n  _proto.getActiveNode = function getActiveNode(value, valueKey) {\n    var _this2 = this;\n\n    if (valueKey === void 0) {\n      valueKey = this.props.valueKey;\n    }\n\n    var activeNode = null;\n\n    if (!(0, _isUndefined2.default)(value)) {\n      Object.keys(this.nodes).forEach(function (refKey) {\n        if ((0, _utils.shallowEqual)(_this2.nodes[refKey][valueKey], value)) {\n          activeNode = _this2.nodes[refKey];\n        }\n      });\n    }\n\n    return activeNode;\n  };\n\n  _proto.getExpandState = function getExpandState(node, props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props3 = props,\n        valueKey = _props3.valueKey;\n    var expandItemValues = (0, _isUndefined2.default)(this.state) ? [] : this.state.expandItemValues;\n    var expandAll = this.getExpandAll(props);\n    var expand = expandItemValues.some(function (value) {\n      return (0, _utils.shallowEqual)(node[valueKey], value);\n    });\n    var _props4 = props,\n        childrenKey = _props4.childrenKey;\n\n    if (expandItemValues.length) {\n      return expand;\n    } else if (node[childrenKey] && node[childrenKey].length) {\n      if (expand) {\n        return !!node.expand;\n      } else if (expandAll) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  };\n\n  _proto.getActiveElementOption = function getActiveElementOption(options, value) {\n    var childrenKey = this.props.childrenKey;\n\n    for (var i = 0; i < options.length; i += 1) {\n      if (options[i].value === value) {\n        return options[i];\n      } else if (options[i][childrenKey] && options[i][childrenKey].length) {\n        var active = this.getActiveElementOption(options[i][childrenKey], value);\n\n        if (!(0, _isEmpty2.default)(active)) {\n          return active;\n        }\n      }\n    }\n\n    return {};\n  };\n\n  _proto.getItemsAndActiveIndex = function getItemsAndActiveIndex() {\n    var items = this.getFocusableMenuItems();\n    var activeIndex = -1;\n    items.forEach(function (item, index) {\n      if (document.activeElement !== null) {\n        if (item.refKey === document.activeElement.getAttribute('data-key')) {\n          activeIndex = index;\n        }\n      }\n    });\n    return {\n      items: items,\n      activeIndex: activeIndex\n    };\n  };\n\n  _proto.getActiveItem = function getActiveItem() {\n    var nodeData = {};\n\n    if (document.activeElement !== null) {\n      var activeItem = document.activeElement;\n      var _activeItem$dataset = activeItem.dataset,\n          key = _activeItem$dataset.key,\n          _layer = _activeItem$dataset.layer;\n      var _activeNode3 = this.nodes[key];\n\n      if (_activeNode3) {\n        nodeData = _activeNode3;\n      }\n\n      return {\n        nodeData: nodeData,\n        layer: _layer\n      };\n    }\n\n    return {};\n  };\n\n  _proto.getFilterData = function getFilterData(data, word, props) {\n    if (word === void 0) {\n      word = '';\n    }\n\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props5 = props,\n        labelKey = _props5.labelKey,\n        childrenKey = _props5.childrenKey;\n\n    var setVisible = function setVisible(nodes) {\n      if (nodes === void 0) {\n        nodes = [];\n      }\n\n      return nodes.forEach(function (item) {\n        item.visible = (0, _treeUtils.shouldDisplay)(item[labelKey], word);\n\n        if ((0, _isArray2.default)(item[childrenKey])) {\n          setVisible(item[childrenKey]);\n          item[childrenKey].forEach(function (child) {\n            if (child.visible) {\n              item.visible = child.visible;\n            }\n          });\n        }\n      });\n    };\n\n    if (!(0, _isUndefined2.default)(word) || !word !== '') {\n      setVisible(data);\n    }\n\n    return data;\n  };\n\n  _proto.getFlattenTreeData = function getFlattenTreeData(nodes) {\n    var _this3 = this;\n\n    var expandItemValues = this.state.expandItemValues;\n    var _this$props7 = this.props,\n        childrenKey = _this$props7.childrenKey,\n        valueKey = _this$props7.valueKey;\n    return (0, _treeUtils.flattenTree)(nodes, childrenKey, function (node) {\n      var formatted = (0, _extends2.default)({}, node);\n      var curNode = _this3.nodes[node.refKey];\n      var parentKeys = (0, _treeUtils.getNodeParents)(curNode, 'parentNode', valueKey);\n\n      if (curNode) {\n        formatted.expand = curNode.expand;\n        formatted.layer = curNode.layer;\n        formatted.parentNode = curNode.parentNode;\n        formatted.showNode = (0, _treeUtils.shouldShowNodeByExpanded)(expandItemValues, parentKeys);\n      }\n\n      return formatted;\n    });\n  };\n\n  _proto.focusNode = function focusNode(activeNode) {\n    var inline = this.props.inline;\n\n    if (activeNode && inline) {\n      var node = this.getElementByDataKey(activeNode.refKey);\n\n      if (node !== null) {\n        node.focus();\n      }\n    }\n  }\n  /**\n   * 将数组变为对象\n   * @param {*} nodes tree data\n   * @param {*} ref 当前层级\n   */\n  ;\n\n  _proto.flattenNodes = function flattenNodes(nodes, props, ref, parentNode, layer) {\n    var _this4 = this;\n\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    if (ref === void 0) {\n      ref = '0';\n    }\n\n    if (layer === void 0) {\n      layer = 0;\n    }\n\n    var _props6 = props,\n        labelKey = _props6.labelKey,\n        valueKey = _props6.valueKey,\n        childrenKey = _props6.childrenKey;\n\n    if (!Array.isArray(nodes) || nodes.length === 0) {\n      return [];\n    }\n\n    layer += 1;\n    nodes.map(function (node, index) {\n      var _this4$nodes$refKey;\n\n      var refKey = ref + \"-\" + index;\n      node.refKey = refKey;\n      _this4.nodes[refKey] = (_this4$nodes$refKey = {\n        layer: layer\n      }, _this4$nodes$refKey[labelKey] = node[labelKey], _this4$nodes$refKey[valueKey] = node[valueKey], _this4$nodes$refKey.expand = _this4.getExpandState(node, props), _this4$nodes$refKey.refKey = refKey, _this4$nodes$refKey);\n\n      if (parentNode) {\n        _this4.nodes[refKey].parentNode = parentNode;\n      }\n\n      _this4.flattenNodes(node[childrenKey], props, refKey, _this4.nodes[refKey], layer);\n    });\n  };\n\n  _proto.serializeList = function serializeList(key, nodes) {\n    if (nodes === void 0) {\n      nodes = this.nodes;\n    }\n\n    var valueKey = this.props.valueKey;\n    var list = [];\n    Object.keys(nodes).forEach(function (refKey) {\n      if (nodes[refKey][key]) {\n        list.push(nodes[refKey][valueKey]);\n      }\n    });\n    return list;\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this$props8 = this.props,\n        _this$props8$height = _this$props8.height,\n        height = _this$props8$height === void 0 ? defaultHeight : _this$props8$height,\n        searchable = _this$props8.searchable,\n        searchKeyword = _this$props8.searchKeyword,\n        placement = _this$props8.placement,\n        renderExtraFooter = _this$props8.renderExtraFooter,\n        locale = _this$props8.locale,\n        renderMenu = _this$props8.renderMenu,\n        menuStyle = _this$props8.menuStyle,\n        virtualized = _this$props8.virtualized,\n        menuClassName = _this$props8.menuClassName,\n        menuAutoWidth = _this$props8.menuAutoWidth;\n    var keyword = !(0, _isUndefined2.default)(searchKeyword) ? searchKeyword : this.state.searchKeyword;\n    var classes = (0, _classnames.default)(menuClassName, this.addPrefix('tree-menu'), this.addPrefix(\"placement-\" + (0, _kebabCase2.default)(placement)));\n    var styles = virtualized ? (0, _extends2.default)({\n      height: height\n    }, menuStyle) : menuStyle;\n    return React.createElement(_picker.MenuWrapper, {\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: styles,\n      ref: this.bindMenuRef,\n      getToggleInstance: this.getToggleInstance,\n      getPositionInstance: this.getPositionInstance\n    }, searchable ? React.createElement(_picker.SearchBar, {\n      placeholder: locale.searchPlaceholder,\n      key: \"searchBar\",\n      onChange: this.handleSearch,\n      value: keyword\n    }) : null, renderMenu ? renderMenu(this.renderTree()) : this.renderTree(), renderExtraFooter && renderExtraFooter());\n  };\n\n  _proto.renderNode = function renderNode(node, index, layer, classPrefix) {\n    var _this5 = this;\n\n    if (!node.visible) {\n      return null;\n    }\n\n    var _this$state3 = this.state,\n        expandAll = _this$state3.expandAll,\n        selectedValue = _this$state3.selectedValue;\n    var _this$props9 = this.props,\n        _this$props9$disabled = _this$props9.disabledItemValues,\n        disabledItemValues = _this$props9$disabled === void 0 ? [] : _this$props9$disabled,\n        valueKey = _this$props9.valueKey,\n        labelKey = _this$props9.labelKey,\n        childrenKey = _this$props9.childrenKey,\n        renderTreeNode = _this$props9.renderTreeNode,\n        renderTreeIcon = _this$props9.renderTreeIcon;\n    var refKey = node.refKey;\n    var key = (0, _isString2.default)(node[valueKey]) || (0, _isNumber2.default)(node[valueKey]) ? node[valueKey] : refKey;\n    var hasChildren = node.hasChildren;\n    var children = node[childrenKey];\n    var hasNotEmptyChildren = hasChildren !== undefined ? hasChildren : children && Array.isArray(children) && children.length > 0;\n    var props = {\n      value: node[valueKey],\n      label: node[labelKey],\n      index: index,\n      layer: layer,\n      parent: parent,\n      active: (0, _utils.shallowEqual)(node[valueKey], selectedValue),\n      visible: node.visible,\n      children: children,\n      nodeData: node,\n      disabled: disabledItemValues.filter(function (disabledItem) {\n        return (0, _utils.shallowEqual)(disabledItem, node[valueKey]);\n      }).length > 0,\n      hasChildren: !!children,\n      onSelect: this.handleSelect,\n      onTreeToggle: this.handleToggle,\n      onRenderTreeNode: renderTreeNode,\n      onRenderTreeIcon: renderTreeIcon\n    };\n\n    if (props.hasChildren) {\n      var _classNames;\n\n      layer += 1;\n      var expandControlled = 'expandAll' in this.props;\n      var expandALlState = expandControlled ? expandAll : expandAll || this.nodes[node.refKey].expand; // 是否展开树节点且子节点不为空\n\n      var openClass = classPrefix + \"-open\";\n      var childrenClass = (0, _classnames.default)(classPrefix + \"-node-children\", (_classNames = {}, _classNames[openClass] = expandALlState && hasNotEmptyChildren, _classNames));\n      var nodes = children || [];\n      return React.createElement(\"div\", {\n        className: childrenClass,\n        key: key,\n        ref: this.bindNodeRefs.bind(this, refKey)\n      }, React.createElement(_TreeNode.default, (0, _extends2.default)({\n        classPrefix: classPrefix,\n        key: key,\n        ref: this.bindNodeRefs.bind(this, refKey)\n      }, props)), React.createElement(\"div\", {\n        className: classPrefix + \"-children\"\n      }, nodes.map(function (child, i) {\n        return _this5.renderNode(child, i, layer, classPrefix);\n      })));\n    }\n\n    return React.createElement(_TreeNode.default, (0, _extends2.default)({\n      classPrefix: classPrefix,\n      key: key,\n      ref: this.bindNodeRefs.bind(this, refKey)\n    }, props));\n  };\n\n  _proto.renderVirtualNode = function renderVirtualNode(node, options) {\n    var selectedValue = this.state.selectedValue;\n    var _this$props10 = this.props,\n        _this$props10$disable = _this$props10.disabledItemValues,\n        disabledItemValues = _this$props10$disable === void 0 ? [] : _this$props10$disable,\n        valueKey = _this$props10.valueKey,\n        labelKey = _this$props10.labelKey,\n        childrenKey = _this$props10.childrenKey,\n        renderTreeNode = _this$props10.renderTreeNode,\n        renderTreeIcon = _this$props10.renderTreeIcon;\n    var key = options.key,\n        style = options.style,\n        classPrefix = options.classPrefix;\n    var layer = node.layer,\n        refKey = node.refKey,\n        expand = node.expand,\n        showNode = node.showNode;\n\n    if (!node.visible) {\n      return null;\n    }\n\n    var children = node[childrenKey];\n    var props = {\n      style: style,\n      value: node[valueKey],\n      label: node[labelKey],\n      layer: layer,\n      expand: expand,\n      active: (0, _utils.shallowEqual)(node[valueKey], selectedValue),\n      visible: node.visible,\n      nodeData: node,\n      disabled: disabledItemValues.filter(function (disabledItem) {\n        return (0, _utils.shallowEqual)(disabledItem, node[valueKey]);\n      }).length > 0,\n      children: children,\n      hasChildren: !!children,\n      onSelect: this.handleSelect,\n      onTreeToggle: this.handleToggle,\n      onRenderTreeNode: renderTreeNode,\n      onRenderTreeIcon: renderTreeIcon\n    };\n    return showNode && React.createElement(_TreeNode.default, (0, _extends2.default)({\n      classPrefix: classPrefix,\n      key: key,\n      ref: this.bindNodeRefs.bind(this, refKey)\n    }, props));\n  };\n\n  _proto.renderTree = function renderTree() {\n    var _classNames2,\n        _this6 = this;\n\n    var filterData = this.state.filterData;\n    var _this$props11 = this.props,\n        height = _this$props11.height,\n        _this$props11$classNa = _this$props11.className,\n        className = _this$props11$classNa === void 0 ? '' : _this$props11$classNa,\n        inline = _this$props11.inline,\n        style = _this$props11.style,\n        locale = _this$props11.locale,\n        virtualized = _this$props11.virtualized; // 树节点的层级\n\n    var layer = 0;\n    var treeViewClasses = this.addPrefix('tree-view');\n    var classes = (0, _classnames.default)(treeViewClasses, (_classNames2 = {}, _classNames2[className] = inline, _classNames2));\n    var nodes = [];\n\n    if (!virtualized) {\n      nodes = filterData.map(function (dataItem, index) {\n        return _this6.renderNode(dataItem, index, layer, treeViewClasses);\n      });\n\n      if (!nodes.some(function (v) {\n        return v !== null;\n      })) {\n        return React.createElement(\"div\", {\n          className: this.addPrefix('none')\n        }, locale.noResultsText);\n      }\n    } else {\n      nodes = this.getFlattenTreeData(filterData).filter(function (n) {\n        return n.showNode && n.visible;\n      });\n\n      if (!nodes.length) {\n        return React.createElement(\"div\", {\n          className: this.addPrefix('none')\n        }, locale.noResultsText);\n      }\n    } // 当未定义 height 且 设置了 virtualized 为 true，treeHeight 设置默认高度\n\n\n    var treeHeight = (0, _isUndefined2.default)(height) && virtualized ? defaultHeight : height;\n    var styles = inline ? (0, _extends2.default)({\n      height: treeHeight\n    }, style) : {};\n    var ListHeight = (0, _treeUtils.getVirtualLisHeight)(inline, treeHeight);\n    return React.createElement(\"div\", {\n      ref: this.bindTreeViewRef,\n      className: classes,\n      style: styles,\n      onKeyDown: this.handleKeyDown\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('tree-view-nodes')\n    }, virtualized ? React.createElement(_AutoSizer.default, {\n      defaultHeight: ListHeight,\n      defaultWidth: defaultWidth\n    }, function (_ref3) {\n      var height = _ref3.height,\n          width = _ref3.width;\n      return React.createElement(_List.default, {\n        ref: _this6.bindListRef,\n        width: width || defaultWidth,\n        height: height || ListHeight,\n        rowHeight: 36,\n        rowCount: nodes.length,\n        rowRenderer: _this6.measureRowRenderer(nodes)\n      });\n    }) : nodes));\n  };\n\n  _proto.render = function render() {\n    var _this$props12 = this.props,\n        inline = _this$props12.inline,\n        locale = _this$props12.locale,\n        disabled = _this$props12.disabled,\n        toggleComponentClass = _this$props12.toggleComponentClass,\n        placeholder = _this$props12.placeholder,\n        cleanable = _this$props12.cleanable,\n        renderValue = _this$props12.renderValue,\n        valueKey = _this$props12.valueKey,\n        labelKey = _this$props12.labelKey,\n        onEntered = _this$props12.onEntered,\n        onExited = _this$props12.onExited,\n        onClean = _this$props12.onClean,\n        style = _this$props12.style,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props12, [\"inline\", \"locale\", \"disabled\", \"toggleComponentClass\", \"placeholder\", \"cleanable\", \"renderValue\", \"valueKey\", \"labelKey\", \"onEntered\", \"onExited\", \"onClean\", \"style\"]);\n    var activeNode = this.state.activeNode;\n    var classes = (0, _picker.getToggleWrapperClassName)('tree', this.addPrefix, this.props, !!activeNode);\n    var selectedElement = placeholder;\n    var hasValue = !!activeNode;\n\n    if (hasValue) {\n      selectedElement = activeNode && activeNode[labelKey];\n\n      if (renderValue && activeNode) {\n        selectedElement = renderValue(activeNode[valueKey], activeNode, selectedElement);\n      }\n    }\n\n    var unhandled = (0, _utils2.getUnhandledProps)(Tree, rest);\n\n    if (inline) {\n      return this.renderTree();\n    }\n\n    return React.createElement(_rsuiteIntl.IntlProvider, {\n      locale: locale\n    }, React.createElement(_picker.PickerToggleTrigger, {\n      pickerProps: this.props,\n      innerRef: this.bindTriggerRef,\n      positionRef: this.bindPositionRef,\n      onEntered: (0, _utils2.createChainedFunction)(this.handleOnOpen, onEntered),\n      onExit: (0, _utils2.createChainedFunction)(this.handleOnClose, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      ref: this.bindContainerRef\n    }, React.createElement(_picker.PickerToggle, (0, _extends2.default)({}, unhandled, {\n      ref: this.bindToggleRef,\n      onKeyDown: this.handleToggleKeyDown,\n      onClean: (0, _utils2.createChainedFunction)(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      componentClass: toggleComponentClass,\n      hasValue: hasValue,\n      active: this.state.active\n    }), selectedElement || React.createElement(_rsuiteIntl.FormattedMessage, {\n      id: \"placeholder\"\n    })))));\n  };\n\n  return Tree;\n}(React.Component);\n\n(0, _defineProperty2.default)(Tree, \"defaultProps\", {\n  locale: {\n    placeholder: 'Select',\n    searchPlaceholder: 'Search',\n    noResultsText: 'No results found'\n  },\n  inline: false,\n  valueKey: 'value',\n  labelKey: 'label',\n  cleanable: true,\n  placement: 'bottomLeft',\n  searchable: true,\n  appearance: 'default',\n  childrenKey: 'children',\n  virtualized: false,\n  menuAutoWidth: true\n});\n(0, _defineProperty2.default)(Tree, \"handledProps\", [\"appearance\", \"block\", \"childrenKey\", \"className\", \"classPrefix\", \"cleanable\", \"container\", \"containerPadding\", \"data\", \"defaultExpandAll\", \"defaultOpen\", \"defaultValue\", \"disabled\", \"disabledItemValues\", \"expandAll\", \"height\", \"inline\", \"labelKey\", \"locale\", \"menuAutoWidth\", \"menuClassName\", \"menuStyle\", \"onChange\", \"onClean\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onExpand\", \"onHide\", \"onOpen\", \"onSearch\", \"onSelect\", \"open\", \"placeholder\", \"placement\", \"renderExtraFooter\", \"renderMenu\", \"renderTreeIcon\", \"renderTreeNode\", \"renderValue\", \"searchKeyword\", \"searchable\", \"style\", \"toggleComponentClass\", \"value\", \"valueKey\", \"virtualized\"]);\n(0, _reactLifecyclesCompat.polyfill)(Tree);\nvar enhance = (0, _utils2.defaultProps)({\n  classPrefix: 'picker'\n});\n\nvar _default = enhance(Tree);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}