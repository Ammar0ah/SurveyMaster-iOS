{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.allowedMaxDays = allowedMaxDays;\nexports.allowedDays = allowedDays;\nexports.allowedRange = allowedRange;\nexports.before = before;\nexports.after = after;\nexports.beforeToday = beforeToday;\nexports.afterToday = afterToday;\nexports.combine = combine;\n\nvar _is_same_day = _interopRequireDefault(require(\"date-fns/is_same_day\"));\n\nvar _is_before = _interopRequireDefault(require(\"date-fns/is_before\"));\n\nvar _is_after = _interopRequireDefault(require(\"date-fns/is_after\"));\n\nvar _add_days = _interopRequireDefault(require(\"date-fns/add_days\"));\n\nvar _composeFunctions = _interopRequireDefault(require(\"../utils/composeFunctions\"));\n\nfunction isAfterDay(date1, date2) {\n  return (0, _is_after.default)(new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()), new Date(date2.getFullYear(), date2.getMonth(), date2.getDate()));\n}\n\nfunction isBeforeDay(date1, date2) {\n  return (0, _is_before.default)(new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()), new Date(date2.getFullYear(), date2.getMonth(), date2.getDate()));\n}\n/**\nAllow the maximum number of days specified, other dates are disabled.\n */\n\n\nfunction allowedMaxDays(days) {\n  return function (date, selectValue, selectedDone, target) {\n    var beforeLimit = false;\n    var afterLimit = false;\n\n    if (selectValue && selectValue[0]) {\n      var startDate = selectValue[0];\n      beforeLimit = (0, _composeFunctions.default)(function (f) {\n        return (0, _add_days.default)(f, -days + 1);\n      }, function (f) {\n        return isAfterDay(f, date);\n      })(startDate);\n      afterLimit = (0, _composeFunctions.default)(function (f) {\n        return (0, _add_days.default)(f, days - 1);\n      }, function (f) {\n        return isBeforeDay(f, date);\n      })(startDate);\n    }\n\n    if (target === 'CALENDAR' && !selectedDone && (beforeLimit || afterLimit)) {\n      return true;\n    }\n\n    return false;\n  };\n}\n/**\nOnly allowed days are specified, other dates are disabled.\n */\n\n\nfunction allowedDays(days) {\n  return function (date, selectValue, selectedDone, target) {\n    var beforeLimit = false;\n    var afterLimit = false;\n\n    if (selectValue && selectValue[0]) {\n      var startDate = selectValue[0];\n      beforeLimit = (0, _composeFunctions.default)(function (f) {\n        return (0, _add_days.default)(f, -days + 1);\n      }, function (f) {\n        return !(0, _is_same_day.default)(f, date);\n      })(startDate);\n      afterLimit = (0, _composeFunctions.default)(function (f) {\n        return (0, _add_days.default)(f, days - 1);\n      }, function (f) {\n        return !(0, _is_same_day.default)(f, date);\n      })(startDate);\n    }\n\n    if (target === 'CALENDAR' && !selectedDone && beforeLimit && afterLimit) {\n      return true;\n    }\n\n    return false;\n  };\n}\n/**\n Allow specified date range, other dates are disabled.\n */\n\n\nfunction allowedRange(startDate, endDate) {\n  return function (date) {\n    if (isBeforeDay(date, new Date(startDate)) || isAfterDay(date, new Date(endDate))) {\n      return true;\n    }\n\n    return false;\n  };\n}\n/**\n Disable dates after the specified date.\n */\n\n\nfunction before(beforeDate) {\n  if (beforeDate === void 0) {\n    beforeDate = new Date();\n  }\n\n  return function (date) {\n    if (isBeforeDay(date, new Date(beforeDate))) {\n      return true;\n    }\n\n    return false;\n  };\n}\n/**\nDisable dates before the specified date.\n */\n\n\nfunction after(afterDate) {\n  if (afterDate === void 0) {\n    afterDate = new Date();\n  }\n\n  return function (date) {\n    if (isAfterDay(date, new Date(afterDate))) {\n      return true;\n    }\n\n    return false;\n  };\n}\n/**\n Disable dates after today.\n */\n\n\nfunction beforeToday() {\n  return before();\n}\n/**\n Disable dates before today.\n */\n\n\nfunction afterToday() {\n  return after();\n}\n/**\nUsed to combine multiple conditions.\n */\n\n\nfunction combine() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, disabledDateArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      disabledDateArgs[_key2] = arguments[_key2];\n    }\n\n    return args.reduce(function (a, b) {\n      return a.apply(void 0, disabledDateArgs) || b.apply(void 0, disabledDateArgs);\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"script"}