{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _on = _interopRequireDefault(require(\"./events/on\"));\n\nvar _cancelAnimationFramePolyfill = _interopRequireDefault(require(\"./animation/cancelAnimationFramePolyfill\"));\n\nvar _requestAnimationFramePolyfill = _interopRequireDefault(require(\"./animation/requestAnimationFramePolyfill\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DOMMouseMoveTracker =\n/*#__PURE__*/\nfunction () {\n  /**\n   * onMove is the callback that will be called on every mouse move.\n   * onMoveEnd is called on mouse up when movement has ended.\n   */\n  function DOMMouseMoveTracker(onMove, onMoveEnd, domNode) {\n    var _this = this;\n\n    _classCallCheck(this, DOMMouseMoveTracker);\n\n    _defineProperty(this, \"isDraggingStatus\", false);\n\n    _defineProperty(this, \"animationFrameID\", null);\n\n    _defineProperty(this, \"domNode\", void 0);\n\n    _defineProperty(this, \"onMove\", void 0);\n\n    _defineProperty(this, \"onMoveEnd\", void 0);\n\n    _defineProperty(this, \"eventMoveToken\", null);\n\n    _defineProperty(this, \"eventUpToken\", null);\n\n    _defineProperty(this, \"moveEvent\", null);\n\n    _defineProperty(this, \"deltaX\", 0);\n\n    _defineProperty(this, \"deltaY\", 0);\n\n    _defineProperty(this, \"x\", 0);\n\n    _defineProperty(this, \"y\", 0);\n\n    _defineProperty(this, \"isDragging\", function () {\n      return _this.isDraggingStatus;\n    });\n\n    _defineProperty(this, \"onMouseMove\", function (event) {\n      var x = event.clientX;\n      var y = event.clientY;\n      _this.deltaX += x - _this.x;\n      _this.deltaY += y - _this.y;\n\n      if (_this.animationFrameID === null) {\n        // The mouse may move faster then the animation frame does.\n        // Use `requestAnimationFramePolyfill` to avoid over-updating.\n        _this.animationFrameID = (0, _requestAnimationFramePolyfill.default)(_this.didMouseMove);\n      }\n\n      _this.x = x;\n      _this.y = y;\n      _this.moveEvent = event;\n      event.preventDefault();\n    });\n\n    _defineProperty(this, \"didMouseMove\", function () {\n      _this.animationFrameID = null;\n\n      _this.onMove(_this.deltaX, _this.deltaY, _this.moveEvent);\n\n      _this.deltaX = 0;\n      _this.deltaY = 0;\n    });\n\n    _defineProperty(this, \"onMouseUp\", function () {\n      if (_this.animationFrameID) {\n        _this.didMouseMove();\n      }\n\n      _this.onMoveEnd && _this.onMoveEnd();\n    });\n\n    this.domNode = domNode;\n    this.onMove = onMove;\n    this.onMoveEnd = onMoveEnd;\n  }\n  /**\n   * This is to set up the listeners for listening to mouse move\n   * and mouse up signaling the movement has ended. Please note that these\n   * listeners are added at the document.body level. It takes in an event\n   * in order to grab inital state.\n   */\n\n\n  _createClass(DOMMouseMoveTracker, [{\n    key: \"captureMouseMoves\",\n    value: function captureMouseMoves(event) {\n      if (!this.eventMoveToken && !this.eventUpToken) {\n        this.eventMoveToken = (0, _on.default)(this.domNode, 'mousemove', this.onMouseMove);\n        this.eventUpToken = (0, _on.default)(this.domNode, 'mouseup', this.onMouseUp);\n      }\n\n      if (!this.isDraggingStatus) {\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.isDraggingStatus = true;\n        this.x = event.clientX;\n        this.y = event.clientY;\n      }\n\n      event.preventDefault();\n    }\n    /**\n     * These releases all of the listeners on document.body.\n     */\n\n  }, {\n    key: \"releaseMouseMoves\",\n    value: function releaseMouseMoves() {\n      if (this.eventMoveToken) {\n        this.eventMoveToken.off();\n        this.eventMoveToken = null;\n      }\n\n      if (this.eventUpToken) {\n        this.eventUpToken.off();\n        this.eventUpToken = null;\n      }\n\n      if (this.animationFrameID !== null) {\n        (0, _cancelAnimationFramePolyfill.default)(this.animationFrameID);\n        this.animationFrameID = null;\n      }\n\n      if (this.isDraggingStatus) {\n        this.isDraggingStatus = false;\n        this.x = 0;\n        this.y = 0;\n      }\n    }\n    /**\n     * Returns whether or not if the mouse movement is being tracked.\n     */\n\n  }]);\n\n  return DOMMouseMoveTracker;\n}();\n\nvar _default = DOMMouseMoveTracker;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}