{"ast":null,"code":"var _jsxFileName = \"/Users/ammar0ah/Desktop/SurveyMaster/SurveyMaster/client/src/Containers/ShowSurveys/Survey questions List/SurveyFillList.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"../../../axios-requests\";\nimport Question from \"../../../Components/SurveyAnswersList/SurveyFill_Item/SurveyFill_item\";\nimport { previewSurvey, postAnswers } from \"../../../store/actions/answersAction\";\nimport ReactFullpage from \"@fullpage/react-fullpage\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../../../Components/UI/Loader/Loader\";\nimport styles from \"./SurveyFillList.module.css\";\nimport \"./style.css\";\nimport SubmitSection from \"../../../Components/SubmitSection/SubmitSection\";\n/**************** */\n\n/* using answersAction here  */\n\n/* whole questions for a single survey*/\n\n/************* */\n\nclass SurveyFillList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      redirect: false,\n      dataLoaded: false\n    };\n\n    this.dataLoadedHandler = newVal => {\n      this.setState({\n        dataLoaded: newVal\n      });\n    };\n\n    this.onSubmitHandler = () => {\n      console.log(JSON.stringify(this.props.answers));\n      this.props.postAnswers(this.props.answers, this.props.id);\n    };\n\n    this.submitAnswers = () => {\n      let answer = this.state.answer;\n      axios.post(\"/filling/\", answer).then(response => console.log(response));\n    };\n\n    this.getAnswerHandler = event => {\n      this.setState({\n        answer: event.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.previewSurvey(this.props.match.params.id, this.dataLoadedHandler);\n  }\n\n  render() {\n    //    console.log(\"new State in SurveyFillList.jsx\", this.props)\n    const _this$props = this.props,\n          id = _this$props.id,\n          title = _this$props.title,\n          surveyPages = _this$props.surveyPages;\n    let Content = React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n    let tooltips = [];\n\n    if (this.state.dataLoaded) {\n      let Qs = surveyPages.map(page => {\n        return page.questions.map((question, i) => {\n          tooltips.push(question.title);\n          return React.createElement(Question, {\n            key: i,\n            id: question._id,\n            surveyId: id,\n            number: i + 1,\n            title: question.title,\n            answerObjectType: question.type,\n            content: question.content,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          });\n        });\n      });\n      Qs.push(React.createElement(SubmitSection, {\n        key: Qs.length,\n        ckicked: this.onSubmitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n      tooltips.push(\"Submit\");\n      Content = React.createElement(ReactFullpage, {\n        navigation: true,\n        navigationTooltips: tooltips,\n        render: () => {\n          return React.createElement(ReactFullpage.Wrapper, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }, Qs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: styles.Newlayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.SurveyTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, title)), Content);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    surveyPages: state.fillSurvey.pages,\n    id: state.fillSurvey._id,\n    date: state.fillSurvey.date,\n    title: state.fillSurvey.title,\n    answers: state.questionAnswer,\n    error: state.fillSurvey.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  previewSurvey,\n  postAnswers\n})(SurveyFillList);","map":{"version":3,"sources":["/Users/ammar0ah/Desktop/SurveyMaster/SurveyMaster/client/src/Containers/ShowSurveys/Survey questions List/SurveyFillList.jsx"],"names":["React","Component","axios","Question","previewSurvey","postAnswers","ReactFullpage","connect","Loader","styles","SubmitSection","SurveyFillList","state","redirect","dataLoaded","dataLoadedHandler","newVal","setState","onSubmitHandler","console","log","JSON","stringify","props","answers","id","submitAnswers","answer","post","then","response","getAnswerHandler","event","target","value","componentDidMount","match","params","render","title","surveyPages","Content","tooltips","Qs","map","page","questions","question","i","push","_id","type","content","length","Newlayout","SurveyTitle","mapStateToProps","fillSurvey","pages","date","questionAnswer","error"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"../../../axios-requests\";\nimport Question from \"../../../Components/SurveyAnswersList/SurveyFill_Item/SurveyFill_item\";\nimport {\n  previewSurvey,\n  postAnswers\n} from \"../../../store/actions/answersAction\";\nimport ReactFullpage from \"@fullpage/react-fullpage\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../../../Components/UI/Loader/Loader\";\nimport styles from \"./SurveyFillList.module.css\";\nimport \"./style.css\"\nimport SubmitSection from \"../../../Components/SubmitSection/SubmitSection\";\n/**************** */\n/* using answersAction here  */\n/* whole questions for a single survey*/\n/************* */\nclass SurveyFillList extends Component {\n  state = {\n    redirect: false,\n    dataLoaded: false\n  };\n  componentDidMount() {\n    this.props.previewSurvey(\n      this.props.match.params.id,\n      this.dataLoadedHandler\n    );\n  }\n  dataLoadedHandler = newVal => {\n    this.setState({\n      dataLoaded: newVal\n    });\n  };\n  onSubmitHandler = () => {\n    console.log(JSON.stringify(this.props.answers))\n    this.props.postAnswers(this.props.answers, this.props.id); \n   \n    \n  };\n  submitAnswers = () => {\n    let answer = this.state.answer;\n    axios.post(\"/filling/\", answer).then(response => console.log(response));\n  };\n  getAnswerHandler = event => {\n    this.setState({ answer: event.target.value });\n  };\n  render() {\n    //    console.log(\"new State in SurveyFillList.jsx\", this.props)\n    const { id, title, surveyPages } = this.props;\n    let Content = <Loader />;\n    let tooltips = [];\n    if (this.state.dataLoaded) {\n      let Qs = surveyPages.map(page => {\n        return page.questions.map((question, i) => {\n          tooltips.push(question.title)\n          return (\n            <Question\n              key={i}\n              id={question._id}\n              surveyId={id}\n              number={i + 1}\n              title={question.title}\n              answerObjectType={question.type}\n              content={question.content}\n            />\n          );\n        });\n      });\n  \n      Qs.push(<SubmitSection key={Qs.length} ckicked={this.onSubmitHandler} />);\n      tooltips.push(\"Submit\")\n      Content = (\n        <ReactFullpage\n        navigation\n        navigationTooltips = {tooltips}\n          render={() => {\n            return <ReactFullpage.Wrapper>{Qs}</ReactFullpage.Wrapper>;\n          }}\n        />\n      );\n    }\n    return (\n      <div className={styles.Newlayout}>\n        <div className={styles.SurveyTitle}>\n          <h1>{title}</h1>\n        </div>\n        {Content}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n \n  return {\n    surveyPages: state.fillSurvey.pages,\n    id: state.fillSurvey._id,\n    date: state.fillSurvey.date,\n    title: state.fillSurvey.title,\n    answers: state.questionAnswer,\n    error: state.fillSurvey.error\n  };\n};\nexport default connect(\n  mapStateToProps,\n  { previewSurvey, postAnswers }\n)(SurveyFillList);\n"]},"metadata":{},"sourceType":"module"}