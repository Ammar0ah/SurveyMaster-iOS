{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestAnimationTimeout = exports.cancelAnimationTimeout = undefined;\n\nvar _requestAnimationFramePolyfill = require('dom-lib/lib/animation/requestAnimationFramePolyfill');\n\nvar _requestAnimationFramePolyfill2 = _interopRequireDefault(_requestAnimationFramePolyfill);\n\nvar _cancelAnimationFramePolyfill = require('dom-lib/lib/animation/cancelAnimationFramePolyfill');\n\nvar _cancelAnimationFramePolyfill2 = _interopRequireDefault(_cancelAnimationFramePolyfill);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar cancelAnimationTimeout = exports.cancelAnimationTimeout = function cancelAnimationTimeout(frame) {\n  return (0, _cancelAnimationFramePolyfill2.default)(frame.id);\n};\n/**\n * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.\n * When the delay time has been reached the function you're timing out will be called.\n *\n * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)\n */\n\n\nvar requestAnimationTimeout = exports.requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {\n  var start = void 0; // wait for end of processing current event handler, because event handler may be long\n\n  Promise.resolve().then(function () {\n    start = Date.now();\n  });\n\n  var timeout = function timeout() {\n    if (Date.now() - start >= delay) {\n      callback.call();\n    } else {\n      frame.id = (0, _requestAnimationFramePolyfill2.default)(timeout);\n    }\n  };\n\n  var frame = {\n    id: (0, _requestAnimationFramePolyfill2.default)(timeout)\n  };\n  return frame;\n};","map":null,"metadata":{},"sourceType":"script"}