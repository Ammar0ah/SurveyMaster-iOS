{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _Ripple = _interopRequireDefault(require(\"../Ripple\"));\n\nvar _utils = require(\"../utils\");\n\nvar PickerToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(PickerToggle, _React$Component);\n\n  function PickerToggle(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClean\", function (event) {\n      var onClean = _this.props.onClean;\n      onClean && onClean(event);\n      event.stopPropagation();\n\n      _this.handleBlur();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleFocus\", function () {\n      _this.setState({\n        active: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleBlur\", function () {\n      _this.setState({\n        active: false\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"onFocus\", function () {\n      if (_this.toggle && typeof _this.toggle.focus === 'function') {\n        _this.toggle.focus();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggle\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindToggleRef\", function (ref) {\n      _this.toggle = ref;\n    });\n    _this.state = {\n      active: false\n    };\n    return _this;\n  }\n\n  var _proto = PickerToggle.prototype;\n\n  _proto.renderToggleClean = function renderToggleClean() {\n    return React.createElement(\"span\", {\n      className: this.addPrefix('clean'),\n      role: \"button\",\n      tabIndex: \"-1\",\n      onClick: this.handleClean\n    }, \"\\u2715\");\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.componentClass,\n        children = _this$props.children,\n        className = _this$props.className,\n        hasValue = _this$props.hasValue,\n        cleanable = _this$props.cleanable,\n        classPrefix = _this$props.classPrefix,\n        caret = _this$props.caret,\n        active = _this$props.active,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"componentClass\", \"children\", \"className\", \"hasValue\", \"cleanable\", \"classPrefix\", \"caret\", \"active\"]);\n    var defaultClassName = Component === 'a' ? classPrefix : this.addPrefix('custom');\n    var classes = (0, _classnames.default)(defaultClassName, className, {\n      active: active || this.state.active\n    });\n    var unhandled = (0, _utils.getUnhandledProps)(PickerToggle, rest);\n    return React.createElement(Component, (0, _extends2.default)({}, unhandled, {\n      role: \"combobox\",\n      tabIndex: \"0\",\n      className: classes,\n      ref: this.bindToggleRef,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur\n    }), React.createElement(\"span\", {\n      className: this.addPrefix(hasValue ? 'value' : 'placeholder')\n    }, children), hasValue && cleanable && this.renderToggleClean(), caret && React.createElement(\"span\", {\n      className: this.addPrefix('caret')\n    }), React.createElement(_Ripple.default, null));\n  };\n\n  return PickerToggle;\n}(React.Component);\n\n(0, _defineProperty2.default)(PickerToggle, \"defaultProps\", {\n  componentClass: 'a',\n  caret: true\n});\n(0, _defineProperty2.default)(PickerToggle, \"handledProps\", [\"active\", \"caret\", \"children\", \"className\", \"classPrefix\", \"cleanable\", \"componentClass\", \"hasValue\", \"onClean\"]);\nvar enhance = (0, _utils.defaultProps)({\n  classPrefix: 'picker-toggle'\n});\n\nvar _default = enhance(PickerToggle);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}