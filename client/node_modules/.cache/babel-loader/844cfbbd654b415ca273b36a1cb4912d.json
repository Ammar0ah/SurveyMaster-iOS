{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _find2 = _interopRequireDefault(require(\"lodash/find\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _compose = _interopRequireDefault(require(\"recompose/compose\"));\n\nvar _rsuiteIntl = require(\"rsuite-intl\");\n\nvar _withLocale = _interopRequireDefault(require(\"./IntlProvider/withLocale\"));\n\nvar _UploadFileItem = _interopRequireDefault(require(\"./UploadFileItem\"));\n\nvar _UploadTrigger = _interopRequireDefault(require(\"./UploadTrigger\"));\n\nvar _utils = require(\"./utils\");\n\nvar guid = function guid(num) {\n  if (num === void 0) {\n    num = 8;\n  }\n\n  return (Math.random() * 1e18).toString(36).slice(0, num).toUpperCase();\n};\n\nvar getFiles = function getFiles(event) {\n  if (event.dataTransfer && typeof event.dataTransfer === 'object') {\n    return event.dataTransfer.files;\n  }\n\n  if (event.target) {\n    return (0, _get2.default)(event, 'target.files');\n  }\n\n  return [];\n};\n\nvar Uploader =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Uploader, _React$Component);\n\n  function Uploader(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleRemoveFile\", function (fileKey) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          onRemove = _this$props.onRemove;\n\n      var fileList = _this.getFileList();\n\n      var file = (0, _find2.default)(fileList, function (f) {\n        return f.fileKey === fileKey;\n      });\n      var nextFileList = fileList.filter(function (f) {\n        return f.fileKey !== fileKey;\n      });\n\n      if (_this.xhrs[file.fileKey] && _this.xhrs[file.fileKey].readyState !== 4) {\n        _this.xhrs[file.fileKey].abort();\n      }\n\n      _this.setState({\n        fileList: nextFileList\n      });\n\n      onRemove && onRemove(file);\n      onChange && onChange(nextFileList);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleUploadTriggerChange\", function (event) {\n      var _this$props2 = _this.props,\n          autoUpload = _this$props2.autoUpload,\n          shouldQueueUpdate = _this$props2.shouldQueueUpdate,\n          onChange = _this$props2.onChange;\n\n      var fileList = _this.getFileList();\n\n      var files = getFiles(event);\n      var newFileList = [];\n      Array.from(files).forEach(function (file) {\n        newFileList.push({\n          blobFile: file,\n          name: file.name,\n          status: 'inited',\n          fileKey: guid()\n        });\n      });\n      var nextFileList = [].concat(fileList, newFileList);\n\n      if (shouldQueueUpdate && shouldQueueUpdate(nextFileList, newFileList) === false) {\n        _this.cleanInputValue();\n\n        return;\n      }\n\n      onChange && onChange(nextFileList);\n\n      _this.setState({\n        fileList: nextFileList\n      }, function () {\n        autoUpload && _this.handleAjaxUpload();\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleAjaxUploadSuccess\", function (file, response, event) {\n      var onSuccess = _this.props.onSuccess;\n      var nextFile = (0, _extends2.default)({}, file, {\n        status: 'finished',\n        progress: 100\n      });\n\n      _this.updateFileList(nextFile, function () {\n        onSuccess && onSuccess(response, nextFile, event);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleAjaxUploadError\", function (file, status, event) {\n      var onError = _this.props.onError;\n      var nextFile = (0, _extends2.default)({}, file, {\n        status: 'error'\n      });\n\n      _this.updateFileList(nextFile, function () {\n        onError && onError(status, nextFile, event);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleAjaxUploadProgress\", function (file, percent, event) {\n      var onProgress = _this.props.onProgress;\n      var nextFile = (0, _extends2.default)({}, file, {\n        status: 'uploading',\n        progress: percent\n      });\n\n      _this.updateFileList(nextFile, function () {\n        onProgress && onProgress(percent, nextFile, event);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleUploadFile\", function (file) {\n      var _this$props3 = _this.props,\n          name = _this$props3.name,\n          action = _this$props3.action,\n          headers = _this$props3.headers,\n          withCredentials = _this$props3.withCredentials,\n          timeout = _this$props3.timeout,\n          data = _this$props3.data,\n          onUpload = _this$props3.onUpload;\n      var xhr = (0, _utils.ajaxUpload)({\n        name: name,\n        timeout: timeout,\n        headers: headers,\n        data: data,\n        withCredentials: withCredentials,\n        file: file.blobFile,\n        url: action,\n        onError: _this.handleAjaxUploadError.bind((0, _assertThisInitialized2.default)(_this), file),\n        onSuccess: _this.handleAjaxUploadSuccess.bind((0, _assertThisInitialized2.default)(_this), file),\n        onProgress: _this.handleAjaxUploadProgress.bind((0, _assertThisInitialized2.default)(_this), file)\n      });\n\n      _this.updateFileList((0, _extends2.default)({}, file, {\n        status: 'uploading'\n      }));\n\n      _this.xhrs[file.fileKey] = xhr;\n      onUpload && onUpload(file);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleReupload\", function (file) {\n      var onReupload = _this.props.onReupload;\n\n      _this.handleUploadFile(file);\n\n      onReupload && onReupload(file);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"createFile\", function (file) {\n      var fileKey = file.fileKey;\n      return (0, _extends2.default)({}, file, {\n        fileKey: fileKey || guid(),\n        progress: 0\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"input\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"progressTimer\", void 0);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"xhrs\", {});\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"uploadTrigger\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"inputRef\", function (ref) {\n      _this.input = ref;\n    });\n    var _props$defaultFileLis = props.defaultFileList,\n        defaultFileList = _props$defaultFileLis === void 0 ? [] : _props$defaultFileLis;\n\n    var _fileList = defaultFileList.map(_this.createFile);\n\n    _this.state = {\n      fileList: _fileList,\n      fileMap: {}\n    };\n    return _this;\n  } // public API\n\n\n  var _proto = Uploader.prototype;\n\n  _proto.start = function start() {\n    this.handleAjaxUpload();\n  };\n\n  _proto.getFileList = function getFileList() {\n    var fileList = this.props.fileList;\n    var fileMap = this.state.fileMap;\n\n    if (typeof fileList !== 'undefined') {\n      return fileList.map(function (file) {\n        return (0, _extends2.default)({}, file, fileMap[file.fileKey]);\n      });\n    }\n\n    return this.state.fileList;\n  };\n\n  _proto.cleanInputValue = function cleanInputValue() {\n    if (this.input) {\n      this.input.value = '';\n    }\n  };\n\n  _proto.handleAjaxUpload = function handleAjaxUpload() {\n    var _this2 = this;\n\n    var shouldUpload = this.props.shouldUpload;\n    var fileList = this.getFileList();\n    fileList.forEach(function (file) {\n      if (shouldUpload && shouldUpload(file) === false) {\n        return;\n      }\n\n      if (file.status === 'inited') {\n        _this2.handleUploadFile(file);\n      }\n    });\n    this.cleanInputValue();\n  };\n\n  _proto.updateFileList = function updateFileList(nextFile, callback) {\n    var fileList = this.getFileList();\n    var nextFileList = fileList.map(function (file) {\n      return file.fileKey === nextFile.fileKey ? nextFile : file;\n    });\n    var nextState = {\n      fileList: nextFileList\n    };\n\n    if (nextFile.progress) {\n      var fileMap = this.state.fileMap;\n      fileMap[nextFile.fileKey] = {\n        progress: nextFile.progress,\n        status: nextFile.status\n      };\n      nextState.fileMap = fileMap;\n    }\n\n    this.setState(nextState, callback);\n  };\n\n  _proto.renderFileItems = function renderFileItems() {\n    var _this3 = this;\n\n    var _this$props4 = this.props,\n        disabledFileItem = _this$props4.disabledFileItem,\n        listType = _this$props4.listType,\n        onPreview = _this$props4.onPreview,\n        maxPreviewFileSize = _this$props4.maxPreviewFileSize,\n        renderFileInfo = _this$props4.renderFileInfo,\n        removable = _this$props4.removable;\n    var fileList = this.getFileList();\n    return React.createElement(\"div\", {\n      key: \"items\",\n      className: this.addPrefix('file-items')\n    }, fileList.map(function (file, index) {\n      return React.createElement(_UploadFileItem.default, {\n        key: file.fileKey || index,\n        file: file,\n        maxPreviewFileSize: maxPreviewFileSize,\n        listType: listType,\n        disabled: disabledFileItem,\n        onPreview: onPreview,\n        onReupload: _this3.handleReupload,\n        onCancel: _this3.handleRemoveFile,\n        renderFileInfo: renderFileInfo,\n        removable: removable\n      });\n    }));\n  };\n\n  _proto.renderUploadTrigger = function renderUploadTrigger() {\n    var _this$props5 = this.props,\n        name = _this$props5.name,\n        multiple = _this$props5.multiple,\n        disabled = _this$props5.disabled,\n        accept = _this$props5.accept,\n        children = _this$props5.children,\n        toggleComponentClass = _this$props5.toggleComponentClass,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props5, [\"name\", \"multiple\", \"disabled\", \"accept\", \"children\", \"toggleComponentClass\"]);\n    var unhandled = (0, _utils.getUnhandledProps)(Uploader, rest);\n    return React.createElement(_UploadTrigger.default, (0, _extends2.default)({}, unhandled, {\n      name: name,\n      key: \"trigger\",\n      multiple: multiple,\n      disabled: disabled,\n      accept: accept,\n      innerRef: this.inputRef,\n      onChange: this.handleUploadTriggerChange,\n      componentClass: toggleComponentClass\n    }), children);\n  };\n\n  _proto.render = function render() {\n    var _this$props6 = this.props,\n        classPrefix = _this$props6.classPrefix,\n        className = _this$props6.className,\n        listType = _this$props6.listType,\n        locale = _this$props6.locale,\n        style = _this$props6.style;\n    var classes = (0, _classnames.default)(classPrefix, this.addPrefix(listType), className);\n    var renderList = [this.renderUploadTrigger(), this.renderFileItems()];\n\n    if (listType === 'picture') {\n      renderList.reverse();\n    }\n\n    return React.createElement(_rsuiteIntl.IntlProvider, {\n      locale: locale\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style\n    }, renderList));\n  };\n\n  return Uploader;\n}(React.Component);\n\n(0, _defineProperty2.default)(Uploader, \"defaultProps\", {\n  autoUpload: true,\n  timeout: 0,\n  name: 'file',\n  multiple: false,\n  disabled: false,\n  withCredentials: false,\n  hasPanel: true,\n  data: {},\n  listType: 'text',\n  removable: true\n});\n(0, _defineProperty2.default)(Uploader, \"handledProps\", [\"accept\", \"action\", \"autoUpload\", \"children\", \"className\", \"classPrefix\", \"data\", \"defaultFileList\", \"disabled\", \"disabledFileItem\", \"fileList\", \"hasPanel\", \"headers\", \"listType\", \"locale\", \"maxPreviewFileSize\", \"multiple\", \"name\", \"onChange\", \"onError\", \"onPreview\", \"onProgress\", \"onRemove\", \"onReupload\", \"onSuccess\", \"onUpload\", \"removable\", \"renderFileInfo\", \"shouldQueueUpdate\", \"shouldUpload\", \"style\", \"timeout\", \"toggleComponentClass\", \"withCredentials\"]);\n\nvar _default = (0, _compose.default)((0, _withLocale.default)(['Uploader']), (0, _utils.defaultProps)({\n  classPrefix: 'uploader'\n}))(Uploader);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}