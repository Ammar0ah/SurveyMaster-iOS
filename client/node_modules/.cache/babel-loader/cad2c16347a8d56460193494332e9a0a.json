{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _isFunction2 = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _debounce2 = _interopRequireDefault(require(\"lodash/debounce\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _domLib = require(\"dom-lib\");\n\nvar _utils = require(\"./utils\");\n\nvar _Tooltip = _interopRequireDefault(require(\"./Tooltip\"));\n/* eslint-disable react/no-find-dom-node */\n\n\nvar Slider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Slider, _React$Component);\n\n  function Slider(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"onWindowResizeListener\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClick\", function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          vertical = _this$props.vertical,\n          min = _this$props.min;\n      var barOffset = (0, _domLib.getOffset)(_this.bar);\n      var offset = vertical ? event.pageY - barOffset.top : event.pageX - barOffset.left;\n\n      _this.setValue(_this.calculateValue(offset) + min);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"mouseMoveTracker\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bar\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handle\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleMouseDown\", function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.mouseMoveTracker = _this.getMouseMoveTracker();\n\n      _this.mouseMoveTracker.captureMouseMoves(event);\n\n      _this.setState({\n        handleDown: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleMouseEnter\", function () {\n      _this.setTooltipPosition();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleDragEnd\", function () {\n      _this.releaseMouseMoves();\n\n      _this.setState({\n        handleDown: false\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleDragMove\", function (deltaX, deltaY, event) {\n      if (!_this.mouseMoveTracker || !_this.mouseMoveTracker.isDragging()) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          vertical = _this$props2.vertical,\n          min = _this$props2.min;\n      var barOffset = (0, _domLib.getOffset)(_this.bar);\n      var offset = vertical ? event.pageY - barOffset.top : event.pageX - barOffset.left;\n\n      _this.setValue(_this.calculateValue(offset) + min);\n\n      _this.setTooltipPosition();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"releaseMouseMoves\", function () {\n      if (_this.mouseMoveTracker) {\n        _this.mouseMoveTracker.releaseMouseMoves();\n\n        _this.mouseMoveTracker = null;\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleWindowResize\", function () {\n      _this.updateBar();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleRef\", function (ref) {\n      _this.handle = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"barRef\", function (ref) {\n      _this.bar = ref;\n    });\n    _this.state = {\n      value: _this.checkValue(props.defaultValue, props),\n      barWidth: 0,\n      barHeight: 0\n    };\n    return _this;\n  }\n\n  var _proto = Slider.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateBar();\n    this.onWindowResizeListener = (0, _domLib.on)(window, 'resize', (0, _debounce2.default)(this.handleWindowResize, 100));\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.releaseMouseMoves();\n    this.onWindowResizeListener && this.onWindowResizeListener.off();\n  };\n\n  _proto.getMouseMoveTracker = function getMouseMoveTracker() {\n    return this.mouseMoveTracker || new _domLib.DOMMouseMoveTracker(this.handleDragMove, this.handleDragEnd, document.body);\n  };\n\n  _proto.getSplitCount = function getSplitCount() {\n    var _this$props3 = this.props,\n        min = _this$props3.min,\n        step = _this$props3.step;\n    var max = this.getMax();\n    return (max - min) / step;\n  };\n\n  _proto.getMax = function getMax(props) {\n    var _ref = props || this.props,\n        max = _ref.max,\n        min = _ref.min,\n        step = _ref.step;\n\n    return Math.floor((max - min) / step) * step + min;\n  };\n\n  _proto.getValue = function getValue() {\n    var value = this.props.value;\n    return typeof value === 'undefined' ? this.state.value : this.checkValue(value);\n  };\n\n  _proto.setValue = function setValue(value) {\n    var _this$props4 = this.props,\n        onChange = _this$props4.onChange,\n        min = _this$props4.min;\n    var max = this.getMax();\n\n    if (value < min) {\n      value = min;\n    }\n\n    if (value > max) {\n      value = max;\n    }\n\n    this.setState({\n      value: value\n    });\n    onChange && onChange(value);\n  };\n\n  _proto.setTooltipPosition = function setTooltipPosition() {\n    var tooltip = this.props.tooltip;\n\n    if (tooltip) {\n      var handle = (0, _reactDom.findDOMNode)(this.handle);\n      var tip = handle.querySelector(\".\" + this.addPrefix('tooltip'));\n      var width = (0, _domLib.getWidth)(tip);\n      (0, _domLib.addStyle)(tip, 'left', \"-\" + width / 2 + \"px\");\n    }\n  };\n\n  _proto.checkValue = function checkValue(value, props) {\n    var _ref2 = props || this.props,\n        min = _ref2.min;\n\n    var max = this.getMax(props);\n\n    if (value < min) {\n      return min;\n    }\n\n    if (value > max) {\n      return max;\n    }\n\n    return value;\n  }\n  /**\n   * 通过偏移量计算值\n   * @param {number} offset 偏移量\n   */\n  ;\n\n  _proto.calculateValue = function calculateValue(offset) {\n    var _this$props5 = this.props,\n        step = _this$props5.step,\n        vertical = _this$props5.vertical;\n    var _this$state = this.state,\n        barWidth = _this$state.barWidth,\n        barHeight = _this$state.barHeight;\n    var count = this.getSplitCount();\n    var value = 0;\n\n    if (isNaN(offset)) {\n      return value;\n    }\n\n    if (vertical) {\n      value = Math.round(offset / (barHeight / count)) * step;\n    } else {\n      value = Math.round(offset / (barWidth / count)) * step;\n    }\n\n    return value;\n  };\n\n  _proto.updateBar = function updateBar() {\n    this.setState({\n      barWidth: (0, _domLib.getWidth)(this.bar),\n      barHeight: (0, _domLib.getHeight)(this.bar)\n    });\n  };\n\n  _proto.renderMark = function renderMark(mark, last) {\n    var _classNames;\n\n    var renderMark = this.props.renderMark;\n    var classes = (0, _classnames.default)(this.addPrefix('mark'), (_classNames = {}, _classNames[this.addPrefix('last-mark')] = last, _classNames));\n\n    if (renderMark) {\n      return React.createElement(\"span\", {\n        className: classes\n      }, React.createElement(\"span\", {\n        className: this.addPrefix('mark-content')\n      }, renderMark(mark)));\n    }\n\n    return null;\n  }\n  /**\n   * 渲染标尺\n   */\n  ;\n\n  _proto.renderGraduated = function renderGraduated() {\n    var _this$props6 = this.props,\n        vertical = _this$props6.vertical,\n        step = _this$props6.step,\n        min = _this$props6.min;\n    var max = this.getMax();\n    var count = this.getSplitCount();\n    var barHeight = this.state.barHeight;\n    var value = this.getValue();\n    var graduatedItems = [];\n    var pass = value / step - min / step;\n    var active = Math.ceil((value - min) / (max - min) * count);\n\n    for (var i = 0; i < count; i += 1) {\n      var _classNames2;\n\n      var style = {};\n      var classes = (0, _classnames.default)((_classNames2 = {}, _classNames2[this.addPrefix('pass')] = i <= pass, _classNames2[this.addPrefix('active')] = i === active, _classNames2));\n\n      if (barHeight && vertical) {\n        style.height = barHeight / count;\n      }\n\n      var _mark = i * step + min;\n\n      var last = i === count - 1;\n      graduatedItems.push(React.createElement(\"li\", {\n        className: classes,\n        style: style,\n        key: i\n      }, this.renderMark(_mark), last && this.renderMark(max, true)));\n    }\n\n    return React.createElement(\"div\", {\n      className: this.addPrefix('graduator')\n    }, React.createElement(\"ul\", null, graduatedItems));\n  };\n\n  _proto.renderHanlde = function renderHanlde() {\n    var _extends2, _classNames3;\n\n    var _this$props7 = this.props,\n        handleClassName = _this$props7.handleClassName,\n        handleTitle = _this$props7.handleTitle,\n        min = _this$props7.min,\n        vertical = _this$props7.vertical,\n        tooltip = _this$props7.tooltip,\n        handleStyle = _this$props7.handleStyle,\n        renderTooltip = _this$props7.renderTooltip;\n    var max = this.getMax();\n    var handleDown = this.state.handleDown;\n    var value = this.getValue();\n    var direction = vertical ? 'top' : 'left';\n    var style = (0, _extends3.default)({}, handleStyle, (_extends2 = {}, _extends2[direction] = (value - min) / (max - min) * 100 + \"%\", _extends2));\n    var handleClasses = (0, _classnames.default)(this.addPrefix('handle'), handleClassName, (_classNames3 = {}, _classNames3[this.addPrefix('showtip')] = handleDown, _classNames3));\n    return React.createElement(\"div\", {\n      className: handleClasses,\n      role: \"presentation\",\n      onMouseDown: this.handleMouseDown,\n      onMouseEnter: this.handleMouseEnter,\n      style: style,\n      ref: this.handleRef\n    }, tooltip && React.createElement(_Tooltip.default, {\n      placement: \"top\",\n      className: this.addPrefix('tooltip')\n    }, renderTooltip ? renderTooltip(value) : value), handleTitle);\n  };\n\n  _proto.renderProgress = function renderProgress() {\n    var _style;\n\n    var _this$props8 = this.props,\n        vertical = _this$props8.vertical,\n        min = _this$props8.min;\n    var max = this.getMax();\n    var value = this.getValue();\n    var key = vertical ? 'height' : 'width';\n    var style = (_style = {}, _style[key] = (value - min) / (max - min) * 100 + \"%\", _style);\n    return React.createElement(\"div\", {\n      style: style,\n      className: this.addPrefix('progress-bar')\n    });\n  };\n\n  _proto.render = function render() {\n    var _classNames4;\n\n    var _this$props9 = this.props,\n        graduated = _this$props9.graduated,\n        className = _this$props9.className,\n        barClassName = _this$props9.barClassName,\n        progress = _this$props9.progress,\n        vertical = _this$props9.vertical,\n        disabled = _this$props9.disabled,\n        classPrefix = _this$props9.classPrefix,\n        renderMark = _this$props9.renderMark,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props9, [\"graduated\", \"className\", \"barClassName\", \"progress\", \"vertical\", \"disabled\", \"classPrefix\", \"renderMark\"]);\n    var handleDown = this.state.handleDown;\n    var classes = (0, _classnames.default)(classPrefix, className, (_classNames4 = {}, _classNames4[this.addPrefix('vertical')] = vertical, _classNames4[this.addPrefix('disabled')] = disabled, _classNames4[this.addPrefix('graduated')] = graduated, _classNames4[this.addPrefix('dragging')] = handleDown, _classNames4[this.addPrefix('with-mark')] = (0, _isFunction2.default)(renderMark), _classNames4));\n    var unhandled = (0, _utils.getUnhandledProps)(Slider, rest);\n    return React.createElement(\"div\", (0, _extends3.default)({}, unhandled, {\n      className: classes,\n      onClick: this.handleClick,\n      role: \"presentation\"\n    }), React.createElement(\"div\", {\n      className: (0, _classnames.default)(this.addPrefix('bar'), barClassName),\n      ref: this.barRef\n    }, progress && this.renderProgress(), graduated && this.renderGraduated()), this.renderHanlde());\n  };\n\n  return Slider;\n}(React.Component);\n\n(0, _defineProperty2.default)(Slider, \"defaultProps\", {\n  min: 0,\n  max: 100,\n  step: 1,\n  defaultValue: 0,\n  tooltip: true\n});\n(0, _defineProperty2.default)(Slider, \"handledProps\", [\"barClassName\", \"className\", \"classPrefix\", \"defaultValue\", \"disabled\", \"graduated\", \"handleClassName\", \"handleStyle\", \"handleTitle\", \"max\", \"min\", \"onChange\", \"progress\", \"renderMark\", \"renderTooltip\", \"step\", \"tooltip\", \"value\", \"vertical\"]);\n\nvar _default = (0, _utils.defaultProps)({\n  classPrefix: 'slider'\n})(Slider);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}