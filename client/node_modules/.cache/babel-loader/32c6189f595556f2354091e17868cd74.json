{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _domLib = require('dom-lib');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction findIndexOf(arr, cb) {\n  var idx = -1;\n  arr.some(function (d, i) {\n    if (cb(d, i)) {\n      idx = i;\n      return true;\n    }\n\n    return false;\n  });\n  return idx;\n}\n\nfunction findContainer(data, modal) {\n  return findIndexOf(data, function (d) {\n    return d.modals.indexOf(modal) !== -1;\n  });\n}\n\nvar ModalManager = function () {\n  function ModalManager() {\n    var hideSiblingNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    _classCallCheck(this, ModalManager);\n\n    this.hideSiblingNodes = null;\n    this.modals = [];\n    this.containers = [];\n    this.data = [];\n    this.hideSiblingNodes = hideSiblingNodes;\n    this.modals = [];\n    this.containers = [];\n    this.data = [];\n  }\n\n  _createClass(ModalManager, [{\n    key: 'add',\n    value: function add(modal, container, className) {\n      var modalIdx = this.modals.indexOf(modal);\n      var containerIdx = this.containers.indexOf(container);\n\n      if (modalIdx !== -1) {\n        return modalIdx;\n      }\n\n      modalIdx = this.modals.length;\n      this.modals.push(modal);\n\n      if (containerIdx !== -1) {\n        this.data[containerIdx].modals.push(modal);\n        return modalIdx;\n      }\n\n      var data = {\n        modals: [modal],\n        classes: className ? className.split(/\\s+/) : [],\n        style: {\n          overflow: container.style.overflow,\n          paddingRight: container.style.paddingRight\n        },\n        overflowing: (0, _domLib.isOverflowing)(container)\n      };\n\n      if (data.overflowing) {\n        /*eslint-disable */\n        var style = {\n          paddingRight: parseInt((0, _domLib.getStyle)(container, 'paddingRight') || 0, 10) + (0, _domLib.getScrollbarSize)() + 'px'\n        };\n        (0, _domLib.addStyle)(container, style);\n      }\n\n      data.classes.forEach(_domLib.addClass.bind(null, container));\n      this.containers.push(container);\n      this.data.push(data);\n      return modalIdx;\n    }\n  }, {\n    key: 'remove',\n    value: function remove(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n\n      if (modalIdx === -1) {\n        return;\n      }\n\n      var containerIdx = findContainer(this.data, modal);\n      var data = this.data[containerIdx];\n      var container = this.containers[containerIdx];\n      data.modals.splice(data.modals.indexOf(modal), 1);\n      this.modals.splice(modalIdx, 1);\n\n      if (data.modals.length === 0) {\n        Object.keys(data.style).forEach(function (key) {\n          return container.style[key] = data.style[key];\n        });\n        data.classes.forEach(_domLib.removeClass.bind(null, container));\n        this.containers.splice(containerIdx, 1);\n        this.data.splice(containerIdx, 1);\n      }\n    }\n  }, {\n    key: 'isTopModal',\n    value: function isTopModal(modal) {\n      return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n    }\n  }]);\n\n  return ModalManager;\n}();\n\nexports.default = ModalManager;","map":null,"metadata":{},"sourceType":"script"}