{"ast":null,"code":"var _jsxFileName = \"/Users/ammar0ah/Desktop/SurveyMaster/SurveyMaster/client/src/Components/Question/Question.js\";\nimport React, { Component } from \"react\";\nimport { MDBInput } from \"mdbreact\";\nimport styleClass from \"./Question.module.css\";\nimport TextAnswer from \"./TextAnswer/TextAnswer\";\nimport MultipleChoice from \"./MultipleChoise/MultipleChoice\";\nimport Data from \"./QuestionsData\";\nimport LinearScale from \"./LinearScale/LinearScale\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/types\";\nimport * as Qtypes from \"./QuestionTypes\";\nimport { SelectPicker } from \"rsuite\";\nimport Close from \"../UI/Close/Close\";\n\nclass Question extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      deleteHover: false\n    };\n\n    this.deleteHoverHandler = newValue => {\n      this.setState({\n        deleteHover: newValue\n      });\n    };\n  }\n\n  render() {\n    const Qs = this.props.pages[0].questions;\n    let AnswerType;\n    const index = this.props.index;\n    const Q = Qs[index];\n\n    switch (Q.type) {\n      case Qtypes.TEXT:\n        AnswerType = React.createElement(TextAnswer, {\n          index: index,\n          type: \"text\",\n          label: \"Short Answer Text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        });\n        break;\n\n      case Qtypes.PARAGRAPH:\n        AnswerType = React.createElement(TextAnswer, {\n          index: index,\n          type: \"textarea\",\n          label: \"Long Answer Text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        });\n        break;\n\n      case Qtypes.RADIO_GROUP:\n        AnswerType = React.createElement(MultipleChoice, {\n          index: index,\n          type: Qtypes.RADIO_GROUP,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        });\n        break;\n\n      case Qtypes.CHECKBOX:\n        AnswerType = React.createElement(MultipleChoice, {\n          index: index,\n          type: Qtypes.CHECKBOX,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n        break;\n\n      case Qtypes.DROPDOWN:\n        AnswerType = React.createElement(MultipleChoice, {\n          index: index,\n          type: Qtypes.DROPDOWN,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        });\n        break;\n\n      case Qtypes.RATING:\n        AnswerType = React.createElement(LinearScale, {\n          index: index,\n          type: Qtypes.RATING,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        });\n        break;\n\n      case Qtypes.SLIDER:\n        AnswerType = React.createElement(LinearScale, {\n          index: index,\n          type: Qtypes.SLIDER,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n        break;\n\n      case Qtypes.RANGE:\n        AnswerType = React.createElement(LinearScale, {\n          index: index,\n          type: Qtypes.RANGE,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        });\n        break;\n\n      default:\n        AnswerType = React.createElement(TextAnswer, {\n          index: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n        break;\n    }\n\n    const data = Data;\n    let containerStyleClass = this.state.deleteHover ? styleClass.QuestionContainer + \" \" + styleClass.red : styleClass.QuestionContainer;\n    return React.createElement(\"div\", {\n      className: containerStyleClass,\n      onClick: this.props.clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Close, {\n      hoverIn: () => this.deleteHoverHandler(true),\n      hoverOut: () => this.deleteHoverHandler(false),\n      clicked: () => this.props.DeleteQuestionHandler(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: styleClass.Question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      label: \"Enter Your Question Title\",\n      value: Q.title,\n      onChange: e => this.props.ChangeLabelHandler(index, e.target.value),\n      className: styleClass.BigText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(SelectPicker, {\n      className: styleClass.SelectInput,\n      data: data,\n      appearance: \"subtle\",\n      groupBy: \"role\",\n      value: Q.type,\n      searchable: false,\n      cleanable: false,\n      onChange: newVal => this.props.ChangeTypeHandler(index, newVal),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: styleClass.Answer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, AnswerType));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pages: state.createSurvey.pages\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    ChangeLabelHandler: (index, newVal) => dispatch({\n      type: actions.CHANGE_QUESTION_TITLE,\n      index: index,\n      val: newVal\n    }),\n    ChangeTypeHandler: (index, newVal) => dispatch({\n      type: actions.CHANGE_QUESTION_TYPE,\n      index: index,\n      val: newVal\n    }),\n    DeleteQuestionHandler: index => dispatch({\n      type: actions.DELETE_QUESTION,\n      index: index\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);","map":{"version":3,"sources":["/Users/ammar0ah/Desktop/SurveyMaster/SurveyMaster/client/src/Components/Question/Question.js"],"names":["React","Component","MDBInput","styleClass","TextAnswer","MultipleChoice","Data","LinearScale","connect","actions","Qtypes","SelectPicker","Close","Question","state","deleteHover","deleteHoverHandler","newValue","setState","render","Qs","props","pages","questions","AnswerType","index","Q","type","TEXT","PARAGRAPH","RADIO_GROUP","CHECKBOX","DROPDOWN","RATING","SLIDER","RANGE","data","containerStyleClass","QuestionContainer","red","clicked","DeleteQuestionHandler","title","e","ChangeLabelHandler","target","value","BigText","SelectInput","newVal","ChangeTypeHandler","Answer","mapStateToProps","createSurvey","mapDispatchToProps","dispatch","CHANGE_QUESTION_TITLE","val","CHANGE_QUESTION_TYPE","DELETE_QUESTION"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { MDBInput } from \"mdbreact\";\nimport styleClass from \"./Question.module.css\";\nimport TextAnswer from \"./TextAnswer/TextAnswer\";\nimport MultipleChoice from \"./MultipleChoise/MultipleChoice\";\nimport Data from \"./QuestionsData\";\nimport LinearScale from \"./LinearScale/LinearScale\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/types\";\nimport * as Qtypes from \"./QuestionTypes\";\nimport { SelectPicker } from \"rsuite\";\nimport Close from \"../UI/Close/Close\";\n\nclass Question extends Component {\n  state = {\n    deleteHover: false\n  };\n  deleteHoverHandler = newValue => { \n    this.setState({\n      deleteHover: newValue\n    })\n  }\n\n  render() {\n    const Qs = this.props.pages[0].questions;\n    let AnswerType;\n    const index = this.props.index;\n    const Q = Qs[index];\n    switch (Q.type) {\n      case Qtypes.TEXT:\n        AnswerType = (\n          <TextAnswer index={index} type=\"text\" label=\"Short Answer Text\" />\n        );\n        break;\n      case Qtypes.PARAGRAPH:\n        AnswerType = (\n          <TextAnswer index={index} type=\"textarea\" label=\"Long Answer Text\" />\n        );\n        break;\n      case Qtypes.RADIO_GROUP:\n        AnswerType = <MultipleChoice index={index} type={Qtypes.RADIO_GROUP} />;\n        break;\n      case Qtypes.CHECKBOX:\n        AnswerType = <MultipleChoice index={index} type={Qtypes.CHECKBOX} />;\n        break;\n      case Qtypes.DROPDOWN:\n        AnswerType = <MultipleChoice index={index} type={Qtypes.DROPDOWN} />;\n        break;\n      case Qtypes.RATING:\n        AnswerType = <LinearScale index={index} type={Qtypes.RATING} />;\n        break;\n      case Qtypes.SLIDER:\n        AnswerType = <LinearScale index={index} type={Qtypes.SLIDER} />;\n        break;\n      case Qtypes.RANGE:\n        AnswerType = <LinearScale index={index} type={Qtypes.RANGE} />;\n        break;\n      default:\n        AnswerType = <TextAnswer index={index} />;\n        break;\n    }\n    const data = Data;\n    let containerStyleClass = this.state.deleteHover ? styleClass.QuestionContainer + \" \" + styleClass.red : styleClass.QuestionContainer;\n    return (\n      <div\n        className={containerStyleClass}\n        onClick={this.props.clicked}\n      >\n        <Close\n          hoverIn={() => this.deleteHoverHandler(true)}\n          hoverOut={() => this.deleteHoverHandler(false)}\n          clicked={() => this.props.DeleteQuestionHandler(index)}\n        />\n        <div className={styleClass.Question}>\n          <MDBInput\n            label=\"Enter Your Question Title\"\n            value={Q.title}\n            onChange={e => this.props.ChangeLabelHandler(index, e.target.value)}\n            className={styleClass.BigText}\n          />\n          <SelectPicker\n            className={styleClass.SelectInput}\n            data={data}\n            appearance=\"subtle\"\n            groupBy=\"role\"\n            value={Q.type}\n            searchable={false}\n            cleanable={false}\n            onChange={newVal => this.props.ChangeTypeHandler(index, newVal)}\n          >\n            {/* <option value={Qtypes.TEXT}>short answer</option>\n            <option value={Qtypes.MULTIPLE_CHOISE}>multiple choise</option>\n            <option value={Qtypes.RADIO_GROUP}>radio Group</option>\n            <option value={Qtypes.DROPDOWN_MENU}>Dropdown Menu</option> */}\n          </SelectPicker>\n        </div>\n        <div className={styleClass.Answer}>{AnswerType}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    pages: state.createSurvey.pages\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    ChangeLabelHandler: (index, newVal) =>\n      dispatch({\n        type: actions.CHANGE_QUESTION_TITLE,\n        index: index,\n        val: newVal\n      }),\n    ChangeTypeHandler: (index, newVal) =>\n      dispatch({\n        type: actions.CHANGE_QUESTION_TYPE,\n        index: index,\n        val: newVal\n      }),\n    DeleteQuestionHandler: (index) => dispatch({type: actions.DELETE_QUESTION,index: index})\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Question);\n"]},"metadata":{},"sourceType":"module"}