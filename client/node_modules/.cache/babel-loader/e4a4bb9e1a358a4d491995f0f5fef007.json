{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = _default;\n\nvar _remove2 = _interopRequireDefault(require(\"lodash/remove\"));\n\nvar _uniq2 = _interopRequireDefault(require(\"lodash/uniq\"));\n\nfunction _default(props) {\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey;\n  /**\n   * 获取一个节点的所有子节点的值\n   * @param {*} item\n   * @param {*} uncheckableItemValues\n   */\n\n  function getChildrenValue(item, uncheckableItemValues) {\n    var values = [];\n\n    if (!item[childrenKey]) {\n      return values;\n    }\n\n    item[childrenKey].forEach(function (n) {\n      if (uncheckableItemValues && !uncheckableItemValues.some(function (v) {\n        return v === n[valueKey];\n      })) {\n        values.push(n[valueKey]);\n      }\n\n      values = values.concat(getChildrenValue(n, uncheckableItemValues));\n    });\n    return values;\n  }\n  /**\n   * 获取一个节点的所有父辈节点\n   * @param {*} item\n   * @param {*} uncheckableItemValues\n   */\n\n\n  function getParents(item) {\n    var parents = [];\n\n    if (!item.parent) {\n      return parents;\n    }\n\n    parents.push(item.parent);\n    parents = parents.concat(getParents(item.parent));\n    return parents;\n  }\n  /**\n   * 在 value 中的值存在级联的情况下\n   * 通过 value 重新计算出一个新的 value\n   */\n\n\n  function transformValue(value, flattenData, uncheckableItemValues) {\n    var tempRemovedValue = [];\n    var nextValue = [];\n\n    var _loop = function _loop(i) {\n      // 如果当前 value 中的值已经在被删除列表中则不处理\n      if (tempRemovedValue.some(function (v) {\n        return v === value[i];\n      })) {\n        return \"continue\";\n      }\n\n      var item = flattenData.find(function (v) {\n        return v[valueKey] === value[i];\n      });\n\n      if (!item) {\n        return \"continue\";\n      }\n\n      var sv = splitValue(item, true, value, uncheckableItemValues);\n      tempRemovedValue = (0, _uniq2.default)(tempRemovedValue.concat(sv.removedValue)); // 获取到所有相关的值\n\n      nextValue = (0, _uniq2.default)(nextValue.concat(sv.value));\n    };\n\n    for (var i = 0; i < value.length; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    } // 最后遍历所有的 nextValue, 如果它的父节点也在nextValue则删除\n\n\n    return nextValue.filter(function (v) {\n      var item = flattenData.find(function (n) {\n        return n[valueKey] === v;\n      });\n\n      if (item && item.parent && nextValue.some(function (v) {\n        return v === item.parent[valueKey];\n      })) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n  /**\n   * 拆分值\n   * @param {*} item\n   * @param {*} checked\n   * @param {*} value\n   * @param {*} uncheckableItemValues\n   */\n\n\n  function splitValue(item, checked, value, uncheckableItemValues) {\n    if (uncheckableItemValues === void 0) {\n      uncheckableItemValues = [];\n    }\n\n    var itemValue = item[valueKey];\n    var childrenValue = getChildrenValue(item, uncheckableItemValues);\n    var parents = getParents(item);\n    var nextValue = [].concat(value);\n    var removedValue = [];\n\n    if (checked) {\n      nextValue.push(itemValue); // 删除当前节点下所有的值\n\n      removedValue = removedValue.concat(removeAllChildrenValue(nextValue, item));\n      /**\n       * 遍历当前节点所有祖宗节点\n       * 然后判断这些节点的子节点是否是否全部被选中，则自身也要被选中\n       */\n\n      var _loop2 = function _loop2(i) {\n        // 父节点是否可以选择\n        var isCheckableParent = !uncheckableItemValues.some(function (v) {\n          return v === parents[i][valueKey];\n        });\n\n        if (isCheckableParent) {\n          var isCheckAll = parents[i][childrenKey] // 过滤掉被标识为不可选的选项\n          .filter(function (n) {\n            return !uncheckableItemValues.some(function (v) {\n              return v === n[valueKey];\n            });\n          }) // 检查是否所有节点都被选中\n          .every(function (n) {\n            return nextValue.some(function (v) {\n              return v === n[valueKey];\n            });\n          });\n\n          if (isCheckAll) {\n            // 添加父节点值\n            nextValue.push(parents[i][valueKey]); // 删除父节点下所有的值\n\n            removedValue = removedValue.concat(removeAllChildrenValue(nextValue, parents[i]));\n          }\n        }\n      };\n\n      for (var i = 0; i < parents.length; i++) {\n        _loop2(i);\n      }\n    } else {\n      var tempValue = childrenValue.concat(parents.map(function (item) {\n        return item[valueKey];\n      }));\n      nextValue = nextValue.concat(getOtherItemValuesByUnselectChild(item, nextValue)); // 删除相关的子父节点\n\n      removedValue = (0, _remove2.default)(nextValue, function (v) {\n        // 删除自己\n        if (v === itemValue) {\n          return true;\n        }\n\n        return tempValue.some(function (n) {\n          return n === v;\n        });\n      });\n    }\n\n    var uniqValue = (0, _uniq2.default)(nextValue);\n    var uniqRemovedValue = (0, _uniq2.default)(removedValue);\n    return {\n      value: uniqValue,\n      removedValue: uniqRemovedValue\n    };\n  }\n  /**\n   * 删除一个节点下所有已选择的值\n   * @param {*} value\n   * @param {*} item\n   */\n\n\n  function removeAllChildrenValue(value, item) {\n    var removedValue = [];\n\n    if (!item[childrenKey]) {\n      return;\n    }\n\n    item[childrenKey].forEach(function (n) {\n      removedValue = removedValue.concat((0, _remove2.default)(value, function (v) {\n        return v === n[valueKey];\n      }));\n\n      if (n[childrenKey]) {\n        removeAllChildrenValue(value, n);\n      }\n    });\n    return removedValue;\n  }\n\n  function getOtherItemValuesByUnselectChild(itemNode, value) {\n    var parentValues = [];\n    var itemValues = []; // 通过 value 找到当前节点的父节点\n\n    function findParent(item) {\n      parentValues.push(item[valueKey]);\n\n      if (value.some(function (v) {\n        return v === item[valueKey];\n      })) {\n        return item;\n      }\n\n      if (item.parent) {\n        var p = findParent(item.parent);\n\n        if (p) {\n          return p;\n        }\n      }\n\n      return null;\n    } // 通过父节点获取子节点\n\n\n    function pushChildValue(item) {\n      if (!item[childrenKey]) {\n        return;\n      }\n\n      item[childrenKey].forEach(function (n) {\n        //判断是否是直属父级\n        if (parentValues.some(function (v) {\n          return v === n[valueKey];\n        }) && n[childrenKey]) {\n          pushChildValue(n);\n        } else if (n[valueKey] !== itemNode[valueKey]) {\n          itemValues.push(n[valueKey]);\n        }\n      });\n    }\n\n    var parent = findParent(itemNode);\n\n    if (!parent) {\n      return [];\n    }\n\n    pushChildValue(parent);\n    return itemValues;\n  }\n\n  function getItems(selectNode, flattenData) {\n    var items = [];\n\n    function findParent(item) {\n      if (item[childrenKey]) {\n        items.push(item[childrenKey]);\n      }\n\n      if (item.parent) {\n        findParent(item.parent);\n      }\n    }\n\n    if (selectNode) {\n      findParent(selectNode);\n    }\n\n    items.push(flattenData.filter(function (item) {\n      return item.parent === null;\n    }));\n    return items.reverse();\n  }\n\n  function isSomeChildChecked(node, value) {\n    if (value === void 0) {\n      value = [];\n    }\n\n    if (!node[childrenKey] || !value) {\n      return false;\n    }\n\n    return node[childrenKey].some(function (child) {\n      if (value.some(function (n) {\n        return n === child[valueKey];\n      })) {\n        return true;\n      }\n\n      if (child[childrenKey] && child[childrenKey].length) {\n        return isSomeChildChecked(child, value);\n      }\n\n      return false;\n    });\n  }\n\n  function isSomeParentChecked(node, value) {\n    if (value === void 0) {\n      value = [];\n    }\n\n    if (!value) {\n      return false;\n    }\n\n    if (value.some(function (n) {\n      return n === node[valueKey];\n    })) {\n      return true;\n    }\n\n    if (node.parent) {\n      return isSomeParentChecked(node.parent, value);\n    }\n\n    return false;\n  }\n\n  return {\n    removeAllChildrenValue: removeAllChildrenValue,\n    getChildrenValue: getChildrenValue,\n    splitValue: splitValue,\n    transformValue: transformValue,\n    getOtherItemValuesByUnselectChild: getOtherItemValuesByUnselectChild,\n    getItems: getItems,\n    isSomeChildChecked: isSomeChildChecked,\n    isSomeParentChecked: isSomeParentChecked\n  };\n}","map":null,"metadata":{},"sourceType":"script"}