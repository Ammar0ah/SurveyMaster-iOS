{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _maxBy = require('lodash/maxBy');\n\nvar _maxBy2 = _interopRequireDefault(_maxBy);\n\nvar _minBy = require('lodash/minBy');\n\nvar _minBy2 = _interopRequireDefault(_minBy);\n\nvar _capitalize = require('lodash/capitalize');\n\nvar _capitalize2 = _interopRequireDefault(_capitalize);\n\nvar _kebabCase = require('lodash/kebabCase');\n\nvar _kebabCase2 = _interopRequireDefault(_kebabCase);\n\nvar _domLib = require('dom-lib');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getContainerDimensions(containerNode) {\n  var width = void 0;\n  var height = void 0;\n  var scroll = void 0;\n  var scrollX = void 0;\n  var scrollY = void 0;\n\n  if (containerNode.tagName === 'BODY') {\n    width = window.innerWidth;\n    height = window.innerHeight;\n    scrollY = (0, _domLib.scrollTop)((0, _domLib.ownerDocument)(containerNode).documentElement) || (0, _domLib.scrollTop)(containerNode);\n    scrollX = (0, _domLib.scrollLeft)((0, _domLib.ownerDocument)(containerNode).documentElement) || (0, _domLib.scrollLeft)(containerNode);\n    scroll = scrollY;\n  } else {\n    var _getOffset = (0, _domLib.getOffset)(containerNode);\n\n    width = _getOffset.width;\n    height = _getOffset.height;\n    scrollY = (0, _domLib.scrollTop)(containerNode);\n    scrollX = (0, _domLib.scrollLeft)(containerNode);\n    scroll = scrollY;\n  }\n\n  return {\n    width: width,\n    height: height,\n    scroll: scroll,\n    scrollX: scrollX,\n    scrollY: scrollY\n  };\n}\n\nfunction getTopDelta(top, overlayHeight, container, padding) {\n  var containerDimensions = getContainerDimensions(container);\n  var containerScroll = containerDimensions.scroll;\n  var containerHeight = containerDimensions.height;\n  var topEdgeOffset = top - padding - containerScroll;\n  var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;\n\n  if (topEdgeOffset < 0) {\n    return -topEdgeOffset;\n  } else if (bottomEdgeOffset > containerHeight) {\n    return containerHeight - bottomEdgeOffset;\n  }\n\n  return 0;\n}\n\nfunction getLeftDelta(left, overlayWidth, container, padding) {\n  var containerDimensions = getContainerDimensions(container);\n  var containerWidth = containerDimensions.width;\n  var leftEdgeOffset = left - padding;\n  var rightEdgeOffset = left + padding + overlayWidth;\n\n  if (leftEdgeOffset < 0) {\n    return -leftEdgeOffset;\n  } else if (rightEdgeOffset > containerWidth) {\n    return containerWidth - rightEdgeOffset;\n  }\n\n  return 0;\n}\n\nvar utils = {\n  getContainerDimensions: getContainerDimensions,\n  getPosition: function getPosition(target, container) {\n    var offset = container.tagName === 'BODY' ? (0, _domLib.getOffset)(target) : (0, _domLib.getPosition)(target, container);\n    return offset;\n  },\n  calcAutoPlacement: function calcAutoPlacement(placement, targetOffset, container, overlay) {\n    var _getContainerDimensio = getContainerDimensions(container),\n        width = _getContainerDimensio.width,\n        height = _getContainerDimensio.height,\n        scrollX = _getContainerDimensio.scrollX,\n        scrollY = _getContainerDimensio.scrollY;\n\n    var left = targetOffset.left - scrollX - overlay.width;\n    var top = targetOffset.top - scrollY - overlay.height;\n    var right = width - targetOffset.left - targetOffset.width + scrollX - overlay.width;\n    var bottom = height - targetOffset.top - targetOffset.height + scrollY - overlay.height;\n    var horizontal = [{\n      key: 'left',\n      value: left\n    }, {\n      key: 'right',\n      value: right\n    }];\n    var vertical = [{\n      key: 'top',\n      value: top\n    }, {\n      key: 'bottom',\n      value: bottom\n    }];\n    var AV = 'autoVertical';\n    var AH = 'autoHorizontal';\n    var direction = void 0;\n    var align = void 0;\n\n    if (placement.indexOf(AV) !== -1) {\n      direction = (0, _maxBy2.default)(vertical, function (o) {\n        return o.value;\n      });\n      return placement === AV ? direction.key : '' + direction.key + placement.replace(AV, '');\n    } else if (placement.indexOf(AH) !== -1) {\n      direction = (0, _maxBy2.default)(horizontal, function (o) {\n        return o.value;\n      });\n      return placement === AH ? direction.key : '' + direction.key + placement.replace(AH, '');\n    }\n    /**\n     * Precedence Vertical\n     * [...vertical, ...horizontal]\n     */\n\n\n    direction = (0, _maxBy2.default)([].concat(vertical, horizontal), function (o) {\n      return o.value;\n    });\n\n    if (direction.key === 'left' || direction.key === 'right') {\n      align = (0, _minBy2.default)(vertical, function (o) {\n        return o.value;\n      });\n    } else {\n      align = (0, _minBy2.default)(horizontal, function (o) {\n        return o.value;\n      });\n    }\n\n    return '' + direction.key + (0, _capitalize2.default)(align.key);\n  },\n  calcOverlayPosition: function calcOverlayPosition(placement, overlayNode, target, container, padding) {\n    var childOffset = utils.getPosition(target, container);\n\n    var _getOffset2 = (0, _domLib.getOffset)(overlayNode),\n        overlayHeight = _getOffset2.height,\n        overlayWidth = _getOffset2.width;\n\n    if (placement && placement.indexOf('auto') >= 0) {\n      placement = this.calcAutoPlacement(placement, childOffset, container, {\n        height: overlayHeight,\n        width: overlayWidth\n      });\n    }\n\n    var positionLeft = void 0;\n    var positionTop = void 0;\n    var arrowOffsetLeft = void 0;\n    var arrowOffsetTop = void 0;\n\n    if (placement === 'left' || placement === 'right') {\n      positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;\n\n      if (placement === 'left') {\n        positionLeft = childOffset.left - overlayWidth;\n      } else {\n        positionLeft = childOffset.left + childOffset.width;\n      }\n\n      var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);\n      positionTop += topDelta;\n      arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';\n      arrowOffsetLeft = undefined;\n    } else if (placement === 'top' || placement === 'bottom') {\n      positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;\n\n      if (placement === 'top') {\n        positionTop = childOffset.top - overlayHeight;\n      } else {\n        positionTop = childOffset.top + childOffset.height;\n      }\n\n      var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);\n      positionLeft += leftDelta;\n      arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayWidth) + '%';\n      arrowOffsetTop = undefined;\n    } else if (placement === 'topLeft') {\n      positionLeft = childOffset.left;\n      positionTop = childOffset.top - overlayHeight;\n    } else if (placement === 'topRight') {\n      positionLeft = childOffset.left + (childOffset.width - overlayWidth);\n      positionTop = childOffset.top - overlayHeight;\n    } else if (placement === 'leftTop') {\n      positionLeft = childOffset.left - overlayWidth;\n      positionTop = childOffset.top;\n    } else if (placement === 'leftBottom') {\n      positionLeft = childOffset.left - overlayWidth;\n      positionTop = childOffset.top + (childOffset.height - overlayHeight);\n    } else if (placement === 'bottomLeft') {\n      positionLeft = childOffset.left;\n      positionTop = childOffset.top + childOffset.height;\n    } else if (placement === 'bottomRight') {\n      positionLeft = childOffset.left + (childOffset.width - overlayWidth);\n      positionTop = childOffset.top + childOffset.height;\n    } else if (placement === 'rightTop') {\n      positionLeft = childOffset.left + childOffset.width;\n      positionTop = childOffset.top;\n    } else if (placement === 'rightBottom') {\n      positionLeft = childOffset.left + childOffset.width;\n      positionTop = childOffset.top + (childOffset.height - overlayHeight);\n    } else {\n      throw new Error('calcOverlayPosition(): No such placement of \"' + placement + '\" found.');\n    }\n\n    return {\n      positionLeft: positionLeft,\n      positionTop: positionTop,\n      arrowOffsetLeft: arrowOffsetLeft,\n      arrowOffsetTop: arrowOffsetTop,\n      positionClassName: 'placement-' + (0, _kebabCase2.default)(placement)\n    };\n  }\n};\nexports.default = utils;","map":null,"metadata":{},"sourceType":"script"}