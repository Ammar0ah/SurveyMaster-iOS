{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _domLib = require('dom-lib');\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _Portal = require('./Portal');\n\nvar _Portal2 = _interopRequireDefault(_Portal);\n\nvar _ModalManager = require('./ModalManager');\n\nvar _ModalManager2 = _interopRequireDefault(_ModalManager);\n\nvar _RefHolder = require('./RefHolder');\n\nvar _RefHolder2 = _interopRequireDefault(_RefHolder);\n\nvar _Animation = require('../Animation');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar modalManager = new _ModalManager2.default();\n\nvar noop = function noop() {};\n\nvar Modal = function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  function Modal(props) {\n    _classCallCheck(this, Modal);\n\n    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\n    _this.onDocumentKeyupListener = null;\n    _this.onFocusinListener = null;\n\n    _this.setMountNodeRef = function (ref) {\n      _this.mountNode = ref ? ref.getMountNode() : ref;\n    };\n\n    _this.setModalNodeRef = function (ref) {\n      _this.modalNode = ref;\n    };\n\n    _this.setDialogRef = function (ref) {\n      _this.dialog = ref;\n    };\n\n    _this.handleHidden = function () {\n      _this.setState({\n        exited: true\n      });\n\n      _this.onHide();\n\n      var onExited = _this.props.onExited;\n      onExited && onExited.apply(undefined, arguments);\n    };\n\n    _this.handleBackdropClick = function (event) {\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          onBackdropClick = _this$props.onBackdropClick,\n          backdrop = _this$props.backdrop,\n          onHide = _this$props.onHide;\n      onBackdropClick && onBackdropClick(event);\n      backdrop && onHide && onHide();\n    };\n\n    _this.handleDocumentKeyUp = function (event) {\n      var _this$props2 = _this.props,\n          keyboard = _this$props2.keyboard,\n          onHide = _this$props2.onHide,\n          onEscapeKeyUp = _this$props2.onEscapeKeyUp;\n\n      if (keyboard && event.keyCode === 27 && _this.isTopModal()) {\n        onEscapeKeyUp && onEscapeKeyUp(event);\n        onHide && onHide();\n      }\n    };\n\n    _this.enforceFocus = function () {\n      var enforceFocus = _this.props.enforceFocus;\n\n      if (!enforceFocus || !_this.isTopModal()) {\n        return;\n      }\n\n      var active = (0, _domLib.activeElement)((0, _domLib.ownerDocument)(_this));\n\n      var modal = _this.getDialogElement();\n\n      if (modal && modal !== active && !(0, _domLib.contains)(modal, active)) {\n        modal.focus();\n      }\n    };\n\n    _this.mountNode = null;\n    _this.modalNode = null;\n    _this.backdrop = null;\n    _this.dialog = null;\n    _this.lastFocus = null;\n\n    _this.bindBackdropRef = function (ref) {\n      _this.backdrop = ref;\n    };\n\n    _this.state = {\n      exited: !props.show\n    };\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.show) {\n        this.onShow();\n      }\n    }\n  }, {\n    key: 'getSnapshotBeforeUpdate',\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      if (this.props.show && !prevProps.show) {\n        this.checkForFocus();\n      }\n\n      return null;\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var transition = this.props.transition;\n\n      if (prevProps.show && !this.props.show && !transition) {\n        // Otherwise handleHidden will call this.\n        this.onHide();\n      } else if (!prevProps.show && this.props.show) {\n        this.onShow();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _props = this.props,\n          show = _props.show,\n          transition = _props.transition;\n\n      if (show || transition && !this.state.exited) {\n        this.onHide();\n      }\n    }\n  }, {\n    key: 'onShow',\n    value: function onShow() {\n      var doc = (0, _domLib.ownerDocument)(this);\n      var container = (0, _domLib.getContainer)(this.props.container, doc.body);\n      var containerClassName = this.props.containerClassName;\n      modalManager.add(this, container, containerClassName);\n      this.onDocumentKeyupListener = (0, _domLib.on)(doc, 'keyup', this.handleDocumentKeyUp);\n      this.onFocusinListener = (0, _domLib.on)(doc, 'focus', this.enforceFocus);\n\n      if (this.props.onShow) {\n        this.props.onShow();\n      }\n    }\n  }, {\n    key: 'onHide',\n    value: function onHide() {\n      modalManager.remove(this);\n\n      if (this.onDocumentKeyupListener) {\n        this.onDocumentKeyupListener.off();\n      }\n\n      if (this.onFocusinListener) {\n        this.onFocusinListener.off();\n      }\n\n      this.restoreLastFocus();\n    }\n  }, {\n    key: 'getDialogElement',\n    value: function getDialogElement() {\n      return (0, _reactDom.findDOMNode)(this.dialog);\n    }\n  }, {\n    key: 'isTopModal',\n    value: function isTopModal() {\n      return modalManager.isTopModal(this);\n    }\n  }, {\n    key: 'checkForFocus',\n    value: function checkForFocus() {\n      if (_domLib.canUseDom) {\n        this.lastFocus = (0, _domLib.activeElement)();\n      }\n    }\n  }, {\n    key: 'restoreLastFocus',\n    value: function restoreLastFocus() {\n      // Support: <=IE11 doesn't support `focus()` on svg elements\n      if (this.lastFocus && this.lastFocus.focus) {\n        this.lastFocus.focus();\n        this.lastFocus = null;\n      }\n    }\n  }, {\n    key: 'renderBackdrop',\n    value: function renderBackdrop() {\n      var _props2 = this.props,\n          transition = _props2.transition,\n          backdrop = _props2.backdrop,\n          backdropTransitionTimeout = _props2.backdropTransitionTimeout,\n          backdropStyle = _props2.backdropStyle,\n          backdropClassName = _props2.backdropClassName;\n      var backdropNode = React.createElement('div', {\n        ref: this.bindBackdropRef,\n        style: backdropStyle,\n        className: backdropClassName,\n        onClick: backdrop === true ? this.handleBackdropClick : undefined,\n        role: 'button',\n        tabIndex: -1\n      });\n\n      if (transition) {\n        backdropNode = React.createElement(_Animation.Fade, {\n          transitionAppear: true,\n          'in': this.props.show,\n          timeout: backdropTransitionTimeout\n        }, backdropNode);\n      }\n\n      return backdropNode;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          children = _props3.children,\n          Transition = _props3.transition,\n          backdrop = _props3.backdrop,\n          dialogTransitionTimeout = _props3.dialogTransitionTimeout,\n          style = _props3.style,\n          className = _props3.className,\n          container = _props3.container,\n          animationProps = _props3.animationProps,\n          rest = _objectWithoutProperties(_props3, ['children', 'transition', 'backdrop', 'dialogTransitionTimeout', 'style', 'className', 'container', 'animationProps']);\n\n      var onExit = rest.onExit,\n          onExiting = rest.onExiting,\n          onEnter = rest.onEnter,\n          onEntering = rest.onEntering,\n          onEntered = rest.onEntered;\n      var show = !!rest.show;\n      var mountModal = show || Transition && !this.state.exited;\n\n      if (!mountModal) {\n        return null;\n      }\n\n      var dialog = React.Children.only(children);\n      var _dialog$props = dialog.props,\n          role = _dialog$props.role,\n          tabIndex = _dialog$props.tabIndex;\n\n      if (role === undefined || tabIndex === undefined) {\n        dialog = React.cloneElement(dialog, {\n          role: role === undefined ? 'document' : role,\n          tabIndex: tabIndex === null ? '-1' : tabIndex\n        });\n      }\n\n      if (Transition) {\n        dialog = React.createElement(Transition, _extends({}, animationProps, {\n          transitionAppear: true,\n          unmountOnExit: true,\n          'in': show,\n          timeout: dialogTransitionTimeout,\n          onExit: onExit,\n          onExiting: onExiting,\n          onExited: this.handleHidden,\n          onEnter: onEnter,\n          onEntering: onEntering,\n          onEntered: onEntered\n        }), dialog);\n      }\n\n      return React.createElement(_Portal2.default, {\n        ref: this.setMountNodeRef,\n        container: container\n      }, React.createElement('div', {\n        ref: this.setModalNodeRef,\n        role: rest.role || 'dialog',\n        style: style,\n        className: className\n      }, backdrop && this.renderBackdrop(), React.createElement(_RefHolder2.default, {\n        ref: this.setDialogRef\n      }, dialog)));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps) {\n      if (nextProps.show) {\n        return {\n          exited: false\n        };\n      } else if (!nextProps.transition) {\n        // Otherwise let handleHidden take care of marking exited.\n        return {\n          exited: true\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\n\nModal.manager = modalManager;\nModal.defaultProps = {\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true,\n  onHide: noop\n};\nModal.handledProps = ['animationProps', 'autoFocus', 'backdrop', 'backdropClassName', 'backdropStyle', 'backdropTransitionTimeout', 'children', 'className', 'container', 'containerClassName', 'dialogTransitionTimeout', 'enforceFocus', 'keyboard', 'onBackdropClick', 'onEnter', 'onEntered', 'onEntering', 'onEscapeKeyUp', 'onExit', 'onExited', 'onExiting', 'onHide', 'onRendered', 'onShow', 'role', 'show', 'style', 'transition'];\n(0, _reactLifecyclesCompat.polyfill)(Modal);\nexports.default = Modal;","map":null,"metadata":{},"sourceType":"script"}