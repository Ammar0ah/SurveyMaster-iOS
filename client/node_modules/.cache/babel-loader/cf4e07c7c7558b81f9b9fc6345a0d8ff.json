{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _kebabCase2 = _interopRequireDefault(require(\"lodash/kebabCase\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _remove2 = _interopRequireDefault(require(\"lodash/remove\"));\n\nvar _trim2 = _interopRequireDefault(require(\"lodash/trim\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar _clone2 = _interopRequireDefault(require(\"lodash/clone\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _rsuiteIntl = require(\"rsuite-intl\");\n\nvar _utils = require(\"../utils\");\n\nvar _utils2 = require(\"rsuite-utils/lib/utils\");\n\nvar _picker = require(\"../_picker\");\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getFocusableMenuItems\", function () {\n      var labelKey = _this.props.labelKey;\n      var menuItems = _this.menuContainer.menuItems;\n\n      if (!menuItems) {\n        return [];\n      }\n\n      var items = Object.values(menuItems).map(function (item) {\n        return item.props.getItemData();\n      });\n      return (0, _utils2.filterNodesOfTree)(items, function (item) {\n        return _this.shouldDisplay(item[labelKey]);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"setStickyItems\", function () {\n      var _this$props = _this.props,\n          sticky = _this$props.sticky,\n          data = _this$props.data,\n          valueKey = _this$props.valueKey;\n\n      var value = _this.getValue();\n\n      if (!sticky) {\n        return;\n      }\n\n      var stickyItems = [];\n\n      if (data && value.length) {\n        stickyItems = data.filter(function (item) {\n          return value.some(function (v) {\n            return v === item[valueKey];\n          });\n        });\n      }\n\n      _this.setState({\n        stickyItems: stickyItems\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"focusNextMenuItem\", function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index + 1];\n\n        if (!(0, _isUndefined2.default)(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"focusPrevMenuItem\", function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index - 1];\n\n        if (!(0, _isUndefined2.default)(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"selectFocusMenuItem\", function (event) {\n      var value = _this.getValue();\n\n      var _this$props2 = _this.props,\n          data = _this$props2.data,\n          valueKey = _this$props2.valueKey;\n      var focusItemValue = _this.state.focusItemValue;\n\n      if (!focusItemValue) {\n        return;\n      }\n\n      if (!value.some(function (v) {\n        return (0, _utils2.shallowEqual)(v, focusItemValue);\n      })) {\n        value.push(focusItemValue);\n      } else {\n        (0, _remove2.default)(value, function (itemVal) {\n          return (0, _utils2.shallowEqual)(itemVal, focusItemValue);\n        });\n      }\n\n      var focusItem = data.find(function (item) {\n        return (0, _utils2.shallowEqual)((0, _get2.default)(item, valueKey), focusItemValue);\n      });\n\n      _this.setState({\n        value: value\n      }, function () {\n        _this.handleSelect(value, focusItem, event);\n\n        _this.handleChangeValue(value, event);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleKeyDown\", function (event) {\n      var _this$state = _this.state,\n          focusItemValue = _this$state.focusItemValue,\n          active = _this$state.active; // enter\n\n      if ((!focusItemValue || !active) && event.keyCode === 13) {\n        _this.toggleDropdown();\n      } // delete\n\n\n      if (event.keyCode === 8 && event.target === (0, _get2.default)((0, _assertThisInitialized2.default)(_this), 'toggle.toggle')) {\n        _this.handleClean(event);\n      }\n\n      if (!_this.menuContainer) {\n        return;\n      }\n\n      (0, _picker.onMenuKeyDown)(event, {\n        down: _this.focusNextMenuItem,\n        up: _this.focusPrevMenuItem,\n        enter: _this.selectFocusMenuItem,\n        esc: _this.closeDropdown\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleItemSelect\", function (nextItemValue, item, event, checked) {\n      var value = _this.getValue();\n\n      if (checked) {\n        value.push(nextItemValue);\n      } else {\n        (0, _remove2.default)(value, function (itemVal) {\n          return (0, _utils2.shallowEqual)(itemVal, nextItemValue);\n        });\n      }\n\n      var nextState = {\n        value: value,\n        focusItemValue: nextItemValue\n      };\n\n      _this.setState(nextState, function () {\n        _this.handleSelect(value, item, event);\n\n        _this.handleChangeValue(value, event);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (nextItemValue, item, event) {\n      var onSelect = _this.props.onSelect;\n      onSelect && onSelect(nextItemValue, item, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleChangeValue\", function (value, event) {\n      var onChange = _this.props.onChange;\n      onChange && onChange(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSearch\", function (searchKeyword, event) {\n      var onSearch = _this.props.onSearch;\n\n      _this.setState({\n        searchKeyword: searchKeyword,\n        focusItemValue: undefined\n      });\n\n      onSearch && onSearch(searchKeyword, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"closeDropdown\", function () {\n      var value = _this.getValue();\n\n      if (_this.trigger) {\n        _this.trigger.hide();\n      }\n\n      _this.setState({\n        focusItemValue: value ? value[0] : undefined\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"openDropdown\", function () {\n      if (_this.trigger) {\n        _this.trigger.show();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggleDropdown\", function () {\n      var active = _this.state.active;\n\n      if (active) {\n        _this.closeDropdown();\n\n        return;\n      }\n\n      _this.openDropdown();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClean\", function (event) {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          cleanable = _this$props3.cleanable;\n\n      if (disabled || !cleanable) {\n        return;\n      }\n\n      _this.setState({\n        value: []\n      }, function () {\n        _this.handleChangeValue([], event);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleExit\", function () {\n      var onClose = _this.props.onClose;\n      onClose && onClose();\n\n      _this.setState({\n        searchKeyword: '',\n        focusItemValue: null,\n        active: false\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleOpen\", function () {\n      var onOpen = _this.props.onOpen;\n      onOpen && onOpen();\n\n      _this.setState({\n        active: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"container\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindContainerRef\", function (ref) {\n      _this.container = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"trigger\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTriggerRef\", function (ref) {\n      _this.trigger = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"menuContainer\", {\n      menuItems: null\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindMenuContainerRef\", function (ref) {\n      _this.menuContainer = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"position\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindPositionRef\", function (ref) {\n      _this.position = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggle\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindToggleRef\", function (ref) {\n      _this.toggle = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getPositionInstance\", function () {\n      return _this.position;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getToggleInstance\", function () {\n      return _this.toggle;\n    });\n    var _value = props.value,\n        defaultValue = props.defaultValue,\n        groupBy = props.groupBy,\n        _valueKey = props.valueKey,\n        _labelKey = props.labelKey;\n    var nextValue = (0, _clone2.default)(_value || defaultValue) || [];\n    _this.state = {\n      value: nextValue,\n      // Used to hover the active item  when trigger `onKeydown`\n      focusItemValue: nextValue ? nextValue[0] : undefined,\n      searchKeyword: ''\n    };\n\n    if (groupBy === _valueKey || groupBy === _labelKey) {\n      throw Error('`groupBy` can not be equal to `valueKey` and `labelKey`');\n    }\n\n    return _this;\n  }\n\n  var _proto = Dropdown.prototype;\n\n  _proto.getValue = function getValue() {\n    var value = this.props.value;\n    var nextValue = (0, _isUndefined2.default)(value) ? this.state.value : value;\n    return (0, _clone2.default)(nextValue) || [];\n  };\n  /**\n   * Index of keyword  in `label`\n   * @param {node} label\n   */\n\n\n  _proto.shouldDisplay = function shouldDisplay(label) {\n    var searchKeyword = this.state.searchKeyword;\n\n    if (!(0, _trim2.default)(searchKeyword)) {\n      return true;\n    }\n\n    var keyword = searchKeyword.toLocaleLowerCase();\n\n    if (typeof label === 'string' || typeof label === 'number') {\n      return (\"\" + label).toLocaleLowerCase().indexOf(keyword) >= 0;\n    } else if (React.isValidElement(label)) {\n      var nodes = (0, _utils2.reactToString)(label);\n      return nodes.join('').toLocaleLowerCase().indexOf(keyword) >= 0;\n    }\n\n    return false;\n  };\n\n  _proto.findNode = function findNode(focus) {\n    var items = this.getFocusableMenuItems();\n    var valueKey = this.props.valueKey;\n    var focusItemValue = this.state.focusItemValue;\n\n    for (var i = 0; i < items.length; i += 1) {\n      if ((0, _utils2.shallowEqual)(focusItemValue, items[i][valueKey])) {\n        focus(items, i);\n        return;\n      }\n    }\n\n    focus(items, -1);\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this2 = this;\n\n    var _this$props4 = this.props,\n        data = _this$props4.data,\n        labelKey = _this$props4.labelKey,\n        valueKey = _this$props4.valueKey,\n        groupBy = _this$props4.groupBy,\n        searchable = _this$props4.searchable,\n        renderExtraFooter = _this$props4.renderExtraFooter,\n        locale = _this$props4.locale,\n        placement = _this$props4.placement,\n        renderMenu = _this$props4.renderMenu,\n        menuClassName = _this$props4.menuClassName,\n        menuStyle = _this$props4.menuStyle,\n        menuAutoWidth = _this$props4.menuAutoWidth,\n        sort = _this$props4.sort;\n    var _this$state2 = this.state,\n        focusItemValue = _this$state2.focusItemValue,\n        stickyItems = _this$state2.stickyItems;\n    var classes = (0, _classnames.default)(this.addPrefix('check-menu'), this.addPrefix(\"placement-\" + (0, _kebabCase2.default)(placement)), menuClassName);\n    var filteredData = [];\n    var filteredStickyItems = [];\n\n    if (stickyItems) {\n      filteredStickyItems = (0, _utils2.filterNodesOfTree)(stickyItems, function (item) {\n        return _this2.shouldDisplay(item[labelKey]);\n      });\n      filteredData = (0, _utils2.filterNodesOfTree)(data, function (item) {\n        return _this2.shouldDisplay(item[labelKey]) && !stickyItems.some(function (v) {\n          return v[valueKey] === item[valueKey];\n        });\n      });\n    } else {\n      filteredData = (0, _utils2.filterNodesOfTree)(data, function (item) {\n        return _this2.shouldDisplay(item[labelKey]);\n      });\n    } // Create a tree structure data when set `groupBy`\n\n\n    if (groupBy) {\n      filteredData = (0, _utils.getDataGroupBy)(filteredData, groupBy, sort);\n    } else if (typeof sort === 'function') {\n      filteredData = filteredData.sort(sort(false));\n    }\n\n    var menuProps = (0, _pick2.default)(this.props, _picker.DropdownMenu.handledProps.filter(function (name) {\n      return !['className', 'style', 'classPrefix'].some(function (item) {\n        return item === name;\n      });\n    }));\n    var menu = filteredData.length ? React.createElement(_picker.DropdownMenu, (0, _extends2.default)({}, menuProps, {\n      classPrefix: this.addPrefix('check-menu'),\n      dropdownMenuItemClassPrefix: this.addPrefix('check-menu-item'),\n      dropdownMenuItemComponentClass: _picker.DropdownMenuCheckItem,\n      ref: this.bindMenuContainerRef,\n      activeItemValues: this.getValue(),\n      focusItemValue: focusItemValue,\n      data: [].concat(filteredStickyItems, filteredData),\n      group: !(0, _isUndefined2.default)(groupBy),\n      onSelect: this.handleItemSelect\n    })) : React.createElement(\"div\", {\n      className: this.addPrefix('none')\n    }, locale.noResultsText);\n    return React.createElement(_picker.MenuWrapper, {\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: menuStyle,\n      onKeyDown: this.handleKeyDown,\n      getToggleInstance: this.getToggleInstance,\n      getPositionInstance: this.getPositionInstance\n    }, searchable && React.createElement(_picker.SearchBar, {\n      placeholder: locale.searchPlaceholder,\n      onChange: this.handleSearch,\n      value: this.state.searchKeyword\n    }), renderMenu ? renderMenu(menu) : menu, renderExtraFooter && renderExtraFooter());\n  };\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        data = _this$props5.data,\n        valueKey = _this$props5.valueKey,\n        labelKey = _this$props5.labelKey,\n        placeholder = _this$props5.placeholder,\n        renderValue = _this$props5.renderValue,\n        disabled = _this$props5.disabled,\n        cleanable = _this$props5.cleanable,\n        locale = _this$props5.locale,\n        toggleComponentClass = _this$props5.toggleComponentClass,\n        style = _this$props5.style,\n        onEnter = _this$props5.onEnter,\n        onEntered = _this$props5.onEntered,\n        onExited = _this$props5.onExited,\n        onClean = _this$props5.onClean,\n        countable = _this$props5.countable,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props5, [\"data\", \"valueKey\", \"labelKey\", \"placeholder\", \"renderValue\", \"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEnter\", \"onEntered\", \"onExited\", \"onClean\", \"countable\"]);\n    var unhandled = (0, _utils.getUnhandledProps)(Dropdown, rest);\n    var value = this.getValue();\n    var selectedItems = data.filter(function (item) {\n      return value.some(function (val) {\n        return (0, _utils2.shallowEqual)(item[valueKey], val);\n      });\n    }) || [];\n    var count = selectedItems.length;\n    var hasValue = !!count;\n    var selectedElement = placeholder;\n\n    if (count > 0) {\n      selectedElement = React.createElement(_picker.SelectedElement, {\n        selectedItems: selectedItems,\n        countable: countable,\n        valueKey: valueKey,\n        labelKey: labelKey,\n        prefix: this.addPrefix\n      });\n\n      if (renderValue) {\n        selectedElement = renderValue(value, selectedItems, selectedElement);\n      }\n    }\n\n    var classes = (0, _picker.getToggleWrapperClassName)('check', this.addPrefix, this.props, hasValue);\n    return React.createElement(_rsuiteIntl.IntlProvider, {\n      locale: locale\n    }, React.createElement(_picker.PickerToggleTrigger, {\n      pickerProps: this.props,\n      innerRef: this.bindTriggerRef,\n      positionRef: this.bindPositionRef,\n      onEnter: (0, _utils.createChainedFunction)(this.setStickyItems, onEnter),\n      onEntered: (0, _utils.createChainedFunction)(this.handleOpen, onEntered),\n      onExit: (0, _utils.createChainedFunction)(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      ref: this.bindContainerRef\n    }, React.createElement(_picker.PickerToggle, (0, _extends2.default)({}, unhandled, {\n      ref: this.bindToggleRef,\n      onClean: (0, _utils.createChainedFunction)(this.handleClean, onClean),\n      onKeyDown: this.handleKeyDown,\n      componentClass: toggleComponentClass,\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active\n    }), selectedElement || React.createElement(_rsuiteIntl.FormattedMessage, {\n      id: \"placeholder\"\n    })))));\n  };\n\n  return Dropdown;\n}(React.Component);\n\n(0, _defineProperty2.default)(Dropdown, \"defaultProps\", {\n  appearance: 'default',\n  data: [],\n  disabledItemValues: [],\n  maxHeight: 320,\n  valueKey: 'value',\n  labelKey: 'label',\n  locale: {\n    placeholder: 'Select',\n    searchPlaceholder: 'Search',\n    noResultsText: 'No results found'\n  },\n  searchable: true,\n  cleanable: true,\n  countable: true,\n  menuAutoWidth: true,\n  placement: 'bottomLeft'\n});\n(0, _defineProperty2.default)(Dropdown, \"handledProps\", [\"appearance\", \"block\", \"className\", \"classPrefix\", \"cleanable\", \"container\", \"containerPadding\", \"countable\", \"data\", \"defaultOpen\", \"defaultValue\", \"disabled\", \"disabledItemValues\", \"groupBy\", \"labelKey\", \"locale\", \"maxHeight\", \"menuAutoWidth\", \"menuClassName\", \"menuStyle\", \"onChange\", \"onClean\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onGroupTitleClick\", \"onHide\", \"onOpen\", \"onSearch\", \"onSelect\", \"open\", \"placeholder\", \"placement\", \"renderExtraFooter\", \"renderMenu\", \"renderMenuGroup\", \"renderMenuItem\", \"renderValue\", \"searchable\", \"sort\", \"sticky\", \"style\", \"toggleComponentClass\", \"value\", \"valueKey\"]);\nvar enhance = (0, _utils.defaultProps)({\n  classPrefix: 'picker'\n});\n\nvar _default = enhance(Dropdown);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}