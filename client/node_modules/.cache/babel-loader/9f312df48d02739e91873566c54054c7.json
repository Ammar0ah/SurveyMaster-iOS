{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.isEveryChildChecked = isEveryChildChecked;\nexports.isSomeChildChecked = isSomeChildChecked;\nexports.isSomeNodeHasChildren = isSomeNodeHasChildren;\nexports.getTopParentNodeCheckState = getTopParentNodeCheckState;\nexports.getSiblingNodeUncheckable = getSiblingNodeUncheckable;\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nfunction isEveryChildChecked(node, nodes, props) {\n  var childrenKey = props.childrenKey;\n  var children = null;\n\n  if (node[childrenKey]) {\n    children = node[childrenKey].filter(function (child) {\n      return nodes[child.refKey] && !nodes[child.refKey].uncheckable;\n    });\n\n    if (!children.length) {\n      return nodes[node.refKey].check;\n    }\n\n    return children.every(function (child) {\n      if (child[childrenKey] && child[childrenKey].length) {\n        return isEveryChildChecked(child, nodes, props);\n      }\n\n      return nodes[child.refKey].check;\n    });\n  }\n\n  return nodes[node.refKey].check;\n}\n\nfunction isSomeChildChecked(node, nodes, props) {\n  var childrenKey = props.childrenKey;\n\n  if (!node[childrenKey]) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    if (nodes[child.refKey] && nodes[child.refKey].check) {\n      return true;\n    }\n\n    return isSomeChildChecked(child, nodes, props);\n  });\n}\n/**\n * 判断第一层节点是否存在有children的节点\n * @param {*} data\n */\n\n\nfunction isSomeNodeHasChildren(data, childrenKey) {\n  return data.some(function (node) {\n    return node[childrenKey];\n  });\n}\n/**\n * 获取每个节点的最顶层父节点的check值\n * @param {*} nodes\n * @param {*} node\n */\n\n\nfunction getTopParentNodeCheckState(nodes, node) {\n  if (node.parentNode) {\n    return getTopParentNodeCheckState(nodes, node.parentNode);\n  }\n\n  return nodes[node.refKey].check;\n}\n/**\n * 获取该节点的兄弟节点是否都为 uncheckable\n * @param {*} node\n */\n\n\nfunction getSiblingNodeUncheckable(node, nodes) {\n  var list = [];\n  var parentNodeRefkey = node.parentNode ? node.parentNode.refKey : '';\n  Object.keys(nodes).forEach(function (refKey) {\n    var curNode = nodes[refKey];\n\n    if ((0, _isUndefined2.default)(node.parentNode) && (0, _isUndefined2.default)(curNode.parentNode)) {\n      list.push(curNode);\n    } else if (curNode.parentNode && curNode.parentNode.refKey === parentNodeRefkey) {\n      list.push(curNode);\n    }\n  });\n  return list.every(function (node) {\n    return node.uncheckable;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}