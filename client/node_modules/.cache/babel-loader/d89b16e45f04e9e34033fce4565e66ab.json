{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _merge2 = require('lodash/merge');\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nvar _pick2 = require('lodash/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nvar _isUndefined2 = require('lodash/isUndefined');\n\nvar _isUndefined3 = _interopRequireDefault(_isUndefined2);\n\nvar _isEqual2 = require('lodash/isEqual');\n\nvar _isEqual3 = _interopRequireDefault(_isEqual2);\n\nvar _eq2 = require('lodash/eq');\n\nvar _eq3 = _interopRequireDefault(_eq2);\n\nvar _debounce2 = require('lodash/debounce');\n\nvar _debounce3 = _interopRequireDefault(_debounce2);\n\nvar _flatten2 = require('lodash/flatten');\n\nvar _flatten3 = _interopRequireDefault(_flatten2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _intersection2 = require('lodash/intersection');\n\nvar _intersection3 = _interopRequireDefault(_intersection2);\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _elementResizeEvent = require('element-resize-event');\n\nvar _elementResizeEvent2 = _interopRequireDefault(_elementResizeEvent);\n\nvar _domLib = require('dom-lib');\n\nvar _Row = require('./Row');\n\nvar _Row2 = _interopRequireDefault(_Row);\n\nvar _CellGroup = require('./CellGroup');\n\nvar _CellGroup2 = _interopRequireDefault(_CellGroup);\n\nvar _Scrollbar = require('./Scrollbar');\n\nvar _Scrollbar2 = _interopRequireDefault(_Scrollbar);\n\nvar _utils = require('./utils');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar ReactChildren = React.Children;\nvar CELL_PADDING_HEIGHT = 26;\nvar columnHandledProps = ['align', 'verticalAlign', 'width', 'fixed', 'resizable', 'flexGrow', 'minWidth', 'colSpan'];\nvar SORT_TYPE = {\n  DESC: 'desc',\n  ASC: 'asc'\n};\nvar SCROLLBAR_WIDHT = 10;\n\nfunction findRowKeys(rows, rowKey, expanded) {\n  var keys = [];\n\n  for (var i = 0; i < rows.length; i++) {\n    var item = rows[i];\n\n    if (item.children) {\n      keys.push(item[rowKey]);\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(findRowKeys(item.children, rowKey)));\n    } else if (expanded) {\n      keys.push(item[rowKey]);\n    }\n  }\n\n  return keys;\n}\n\nfunction findAllParents(rowData, rowKey) {\n  var parents = [];\n\n  if (!rowData) {\n    return parents;\n  }\n\n  function findParent(data) {\n    if (data) {\n      parents.push(data[rowKey]);\n\n      if (data._parent) {\n        findParent(data._parent);\n      }\n    }\n  }\n\n  findParent(rowData._parent);\n  return parents;\n}\n\nfunction shouldShowRowByExpanded() {\n  var expandedRowKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var parentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var intersectionKeys = (0, _intersection3.default)(expandedRowKeys, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction resetLeftForCells(cells) {\n  var left = 0;\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i++) {\n    var cell = cells[i];\n    var nextCell = React.cloneElement(cell, {\n      left: left\n    });\n    left += cell.props.width;\n    nextCells.push(nextCell);\n  }\n\n  return nextCells;\n}\n\nfunction getRandomKey(index) {\n  return '_' + (Math.random() * 1e18).toString(36).slice(0, 5).toUpperCase() + '_' + index;\n}\n\nvar Table = function (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  _createClass(Table, null, [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.data !== state.cacheData) {\n        return {\n          cacheData: props.data,\n          data: props.isTree ? (0, _utils.flattenData)(props.data) : props.data\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  function Table(props) {\n    _classCallCheck(this, Table);\n\n    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var width = props.width,\n        data = props.data,\n        rowKey = props.rowKey,\n        defaultExpandAllRows = props.defaultExpandAllRows,\n        renderRowExpanded = props.renderRowExpanded,\n        defaultExpandedRowKeys = props.defaultExpandedRowKeys,\n        _props$children = props.children,\n        children = _props$children === undefined ? [] : _props$children,\n        isTree = props.isTree,\n        defaultSortType = props.defaultSortType;\n    var expandedRowKeys = defaultExpandAllRows ? findRowKeys(data, rowKey, (0, _isFunction3.default)(renderRowExpanded)) : defaultExpandedRowKeys || [];\n    var shouldFixedColumn = Array.from(children).some(function (child) {\n      return child && child.props && child.props.fixed;\n    });\n\n    if (isTree && !rowKey) {\n      throw new Error('The `rowKey` is required when set isTree');\n    }\n\n    _this.state = {\n      expandedRowKeys: expandedRowKeys,\n      shouldFixedColumn: shouldFixedColumn,\n      cacheData: data,\n      data: isTree ? (0, _utils.flattenData)(data) : data,\n      width: width || 0,\n      columnWidth: 0,\n      dataKey: 0,\n      contentHeight: 0,\n      contentWidth: 0,\n      tableRowsMaxHeight: [],\n      sortType: defaultSortType,\n      scrollY: 0,\n      isScrolling: false\n    };\n    _this.scrollY = 0;\n    _this.scrollX = 0;\n    _this.wheelHandler = new _domLib.WheelHandler(_this._listenWheel, _this.shouldHandleWheelX, _this.shouldHandleWheelY, false);\n    _this._cacheChildrenSize = (0, _flatten3.default)(children).length;\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.calculateTableWidth();\n      this.calculateTableContextHeight();\n      this.calculateRowMaxHeight();\n      (0, _elementResizeEvent2.default)(this.table, (0, _debounce3.default)(this.calculateTableWidth, 400));\n      var options = {\n        passive: false\n      };\n      this.wheelListener = (0, _domLib.on)(this.tableBody, 'wheel', this.wheelHandler.onWheel, options);\n      this.touchStartListener = (0, _domLib.on)(this.tableBody, 'touchstart', this.handleTouchStart, options);\n      this.touchMoveListener = (0, _domLib.on)(this.tableBody, 'touchmove', this.handleTouchMove, options);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var _cacheChildrenSize = (0, _flatten3.default)(nextProps.children || []).length;\n\n      if (_cacheChildrenSize !== this._cacheChildrenSize) {\n        this._cacheChildrenSize = _cacheChildrenSize;\n        this._cacheCells = null;\n      }\n\n      if (this.props.children !== nextProps.children) {\n        this._cacheCells = null;\n      }\n\n      return !(0, _eq3.default)(this.props, nextProps) || !(0, _isEqual3.default)(this.state, nextState);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      this.calculateTableContextHeight();\n      this.calculateTableContentWidth(prevProps);\n      this.calculateRowMaxHeight();\n      this.updatePosition();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.wheelHandler = null;\n\n      if (this.table) {\n        (0, _elementResizeEvent.unbind)(this.table);\n      }\n\n      if (this.wheelListener) {\n        this.wheelListener.off();\n      }\n\n      if (this.touchStartListener) {\n        this.touchStartListener.off();\n      }\n\n      if (this.touchMoveListener) {\n        this.touchMoveListener.off();\n      }\n    }\n  }, {\n    key: 'getExpandedRowKeys',\n    value: function getExpandedRowKeys() {\n      var expandedRowKeys = this.props.expandedRowKeys;\n      return (0, _isUndefined3.default)(expandedRowKeys) ? this.state.expandedRowKeys : expandedRowKeys;\n    }\n  }, {\n    key: 'getSortType',\n    value: function getSortType() {\n      var sortType = this.props.sortType;\n      return (0, _isUndefined3.default)(sortType) ? this.state.sortType : sortType;\n    }\n  }, {\n    key: 'getScrollCellGroups',\n    value: function getScrollCellGroups() {\n      return this.table.querySelectorAll('.' + this.addPrefix('cell-group-scroll'));\n    }\n  }, {\n    key: 'getFixedLeftCellGroups',\n    value: function getFixedLeftCellGroups() {\n      return this.table.querySelectorAll('.' + this.addPrefix('cell-group-fixed-left'));\n    }\n  }, {\n    key: 'getFixedRightCellGroups',\n    value: function getFixedRightCellGroups() {\n      return this.table.querySelectorAll('.' + this.addPrefix('cell-group-fixed-right'));\n    }\n    /**\n     * 获取表头高度\n     */\n\n  }, {\n    key: 'getTableHeaderHeight',\n    value: function getTableHeaderHeight() {\n      var _props = this.props,\n          headerHeight = _props.headerHeight,\n          showHeader = _props.showHeader;\n      return showHeader ? headerHeight : 0;\n    }\n    /**\n     * 获取 Table 需要渲染的高度\n     */\n\n  }, {\n    key: 'getTableHeight',\n    value: function getTableHeight() {\n      var contentHeight = this.state.contentHeight;\n      var _props2 = this.props,\n          minHeight = _props2.minHeight,\n          height = _props2.height,\n          autoHeight = _props2.autoHeight,\n          data = _props2.data;\n      var headerHeight = this.getTableHeaderHeight();\n\n      if (data.length === 0 && autoHeight) {\n        return height;\n      }\n\n      return autoHeight ? Math.max(headerHeight + contentHeight, minHeight) : height;\n    }\n  }, {\n    key: 'getCells',\n    value: function getCells() {\n      var _this2 = this;\n\n      if (this._cacheCells) {\n        return this._cacheCells;\n      }\n\n      var left = 0; // Cell left margin\n\n      var headerCells = []; // Table header cell\n\n      var bodyCells = []; // Table body cell\n\n      var columns = this.props.children;\n\n      if (!columns) {\n        this._cacheCells = {\n          headerCells: headerCells,\n          bodyCells: bodyCells,\n          allColumnsWidth: left\n        };\n        return this._cacheCells;\n      }\n\n      var tableWidth = this.state.width;\n      var _props3 = this.props,\n          sortColumn = _props3.sortColumn,\n          rowHeight = _props3.rowHeight,\n          showHeader = _props3.showHeader;\n      var headerHeight = this.getTableHeaderHeight();\n\n      var _getTotalByColumns = (0, _utils.getTotalByColumns)(columns),\n          totalFlexGrow = _getTotalByColumns.totalFlexGrow,\n          totalWidth = _getTotalByColumns.totalWidth;\n\n      ReactChildren.forEach(columns, function (column, index) {\n        if (React.isValidElement(column)) {\n          var columnChildren = column.props.children;\n          var _column$props = column.props,\n              _width = _column$props.width,\n              resizable = _column$props.resizable,\n              flexGrow = _column$props.flexGrow,\n              minWidth = _column$props.minWidth,\n              onResize = _column$props.onResize;\n\n          if (resizable && flexGrow) {\n            console.warn('Cannot set \\'resizable\\' and \\'flexGrow\\' together in <Column>, column index: ' + index);\n          }\n\n          if (columnChildren.length !== 2) {\n            throw new Error('Component <HeaderCell> and <Cell> is required, column index: ' + index + ' ');\n          }\n\n          var nextWidth = _this2.state[columnChildren[1].props.dataKey + '_' + index + '_width'] || _width || 0;\n\n          if (tableWidth && flexGrow && totalFlexGrow) {\n            nextWidth = Math.max((tableWidth - totalWidth) / totalFlexGrow * flexGrow, minWidth || 60);\n          }\n\n          var cellProps = _extends({}, (0, _pick3.default)(column.props, columnHandledProps), {\n            left: left,\n            index: index,\n            headerHeight: headerHeight,\n            key: index,\n            width: nextWidth,\n            height: rowHeight,\n            firstColumn: index === 0,\n            lastColumn: index === columns.length - 1\n          });\n\n          if (showHeader && headerHeight) {\n            var headerCellProps = {\n              dataKey: columnChildren[1].props.dataKey,\n              isHeaderCell: true,\n              sortable: column.props.sortable,\n              onSortColumn: _this2.handleSortColumn,\n              sortType: _this2.getSortType(),\n              sortColumn: sortColumn,\n              flexGrow: flexGrow\n            };\n\n            if (resizable) {\n              (0, _merge3.default)(headerCellProps, {\n                onResize: onResize,\n                onColumnResizeEnd: _this2.handleColumnResizeEnd,\n                onColumnResizeStart: _this2.handleColumnResizeStart,\n                onColumnResizeMove: _this2.handleColumnResizeMove\n              });\n            }\n\n            headerCells.push(React.cloneElement(columnChildren[0], _extends({}, cellProps, headerCellProps)));\n          }\n\n          bodyCells.push(React.cloneElement(columnChildren[1], cellProps));\n          left += nextWidth;\n        }\n      });\n      this._cacheCells = {\n        headerCells: headerCells,\n        bodyCells: bodyCells,\n        allColumnsWidth: left\n      };\n      return this._cacheCells;\n    } // 处理移动端 Touch 事件,  Start 的时候初始化 x,y\n    // 处理移动端 Touch 事件, Move 的时候初始化，更新 scroll\n\n    /**\n     * 当用户在 Table 内使用 tab 键，触发了 onScroll 事件，这个时候应该更新滚动条位置\n     * Fix: https://github.com/rsuite/rsuite/issues/234\n     */\n\n  }, {\n    key: 'updatePosition',\n    value: function updatePosition() {\n      /**\n       * 当存在锁定列情况处理\n       */\n      if (this.state.shouldFixedColumn) {\n        this.updatePositionByFixedCell();\n      } else {\n        var wheelStyle = {};\n        var headerStyle = {};\n        (0, _domLib.translateDOMPositionXY)(wheelStyle, this.scrollX, this.scrollY);\n        (0, _domLib.translateDOMPositionXY)(headerStyle, this.scrollX, 0);\n        this.wheelWrapper && (0, _domLib.addStyle)(this.wheelWrapper, wheelStyle);\n        this.headerWrapper && (0, _domLib.addStyle)(this.headerWrapper, headerStyle);\n      }\n\n      if (this.tableHeader) {\n        (0, _utils.toggleClass)(this.tableHeader, this.addPrefix('cell-group-shadow'), this.scrollY < 0);\n      }\n    }\n  }, {\n    key: 'updatePositionByFixedCell',\n    value: function updatePositionByFixedCell() {\n      var wheelGroupStyle = {};\n      var wheelStyle = {};\n      var scrollGroups = this.getScrollCellGroups();\n      var fixedLeftGroups = this.getFixedLeftCellGroups();\n      var fixedRightGroups = this.getFixedRightCellGroups();\n      var _state = this.state,\n          contentWidth = _state.contentWidth,\n          width = _state.width;\n      (0, _domLib.translateDOMPositionXY)(wheelGroupStyle, this.scrollX, 0);\n      (0, _domLib.translateDOMPositionXY)(wheelStyle, 0, this.scrollY);\n      var scrollArrayGroups = Array.from(scrollGroups);\n\n      for (var i = 0; i < scrollArrayGroups.length; i++) {\n        var group = scrollArrayGroups[i];\n        (0, _domLib.addStyle)(group, wheelGroupStyle);\n      }\n\n      if (this.wheelWrapper) {\n        (0, _domLib.addStyle)(this.wheelWrapper, wheelStyle);\n      }\n\n      var leftShadowClassName = this.addPrefix('cell-group-left-shadow');\n      var rightShadowClassName = this.addPrefix('cell-group-right-shadow');\n      var showLeftShadow = this.scrollX < 0;\n      var showRightShadow = width - contentWidth - SCROLLBAR_WIDHT !== this.scrollX;\n      (0, _utils.toggleClass)(fixedLeftGroups, leftShadowClassName, showLeftShadow);\n      (0, _utils.toggleClass)(fixedRightGroups, rightShadowClassName, showRightShadow);\n    }\n  }, {\n    key: 'shouldRenderExpandedRow',\n    value: function shouldRenderExpandedRow(rowData) {\n      var _props4 = this.props,\n          rowKey = _props4.rowKey,\n          renderRowExpanded = _props4.renderRowExpanded,\n          isTree = _props4.isTree;\n      var expandedRowKeys = this.getExpandedRowKeys() || [];\n      return (0, _isFunction3.default)(renderRowExpanded) && !isTree && expandedRowKeys.some(function (key) {\n        return key === rowData[rowKey];\n      });\n    }\n  }, {\n    key: 'calculateRowMaxHeight',\n    value: function calculateRowMaxHeight() {\n      var wordWrap = this.props.wordWrap;\n\n      if (wordWrap) {\n        var _tableRowsMaxHeight = [];\n        var tableRows = Object.entries(this.tableRows);\n\n        for (var i = 0; i < tableRows.length; i++) {\n          var _tableRows$i = _slicedToArray(tableRows[i], 2),\n              row = _tableRows$i[1];\n\n          if (row) {\n            var cells = row.querySelectorAll('.' + this.addPrefix('cell-wrap')) || [];\n            var maxHeight = 0;\n            var cellArray = Array.from(cells);\n\n            for (var j = 0; j < cellArray.length; j++) {\n              var cell = cellArray[j];\n              var h = (0, _domLib.getHeight)(cell);\n              maxHeight = Math.max(maxHeight, h);\n            }\n\n            _tableRowsMaxHeight.push(maxHeight);\n          }\n        }\n\n        this.setState({\n          tableRowsMaxHeight: _tableRowsMaxHeight\n        });\n      }\n    }\n  }, {\n    key: 'calculateTableContentWidth',\n    value: function calculateTableContentWidth(prevProps) {\n      var table = this.table;\n      var row = table.querySelector('.' + this.addPrefix('row') + ':not(.virtualized)');\n      var contentWidth = row ? (0, _domLib.getWidth)(row) : 0;\n      this.setState({\n        contentWidth: contentWidth\n      }); // 这里 -10 是为了让滚动条不挡住内容部分\n\n      this.minScrollX = -(contentWidth - this.state.width) - SCROLLBAR_WIDHT;\n      /**\n       * 1.判断 Table 列数是否发生变化\n       * 2.判断 Table 内容区域是否宽度有变化\n       *\n       *\n       * 满足 1 和 2 则更新横向滚动条位置\n       */\n\n      if ((0, _flatten3.default)(this.props.children).length !== (0, _flatten3.default)(prevProps.children).length && this.state.contentWidth !== contentWidth) {\n        this.scrollLeft(0);\n      }\n    }\n  }, {\n    key: 'calculateTableContextHeight',\n    value: function calculateTableContextHeight() {\n      var table = this.table;\n      var rows = table.querySelectorAll('.' + this.addPrefix('row')) || [];\n      var _props5 = this.props,\n          height = _props5.height,\n          autoHeight = _props5.autoHeight,\n          rowHeight = _props5.rowHeight;\n      var headerHeight = this.getTableHeaderHeight();\n      var contentHeight = rows.length ? Array.from(rows).map(function (row) {\n        return (0, _domLib.getHeight)(row) || rowHeight;\n      }).reduce(function (x, y) {\n        return x + y;\n      }) : 0;\n      var nextContentHeight = contentHeight - headerHeight;\n      this.setState({\n        contentHeight: nextContentHeight\n      });\n\n      if (!autoHeight) {\n        // 这里 -10 是为了让滚动条不挡住内容部分\n        this.minScrollY = -(contentHeight - height) - 10;\n      } // 如果内容区域的高度小于表格的高度，则重置 Y 坐标滚动条\n\n\n      if (contentHeight < height) {\n        this.scrollTop(0);\n      } // 如果 scrollTop 的值大于可以滚动的范围 ，则重置 Y 坐标滚动条\n      // 当 Table 为 virtualized 时， wheel 事件触发每次都会进入该逻辑， 避免在滚动到底部后滚动条重置, +10\n\n\n      if (Math.abs(this.scrollY) > contentHeight - height + 10) {\n        this.scrollTop(0);\n      }\n    } // public method\n    // public method\n\n  }, {\n    key: 'renderRowData',\n    value: function renderRowData(bodyCells, rowData, props, shouldRenderExpandedRow) {\n      var _props6 = this.props,\n          renderTreeToggle = _props6.renderTreeToggle,\n          rowKey = _props6.rowKey,\n          wordWrap = _props6.wordWrap,\n          isTree = _props6.isTree;\n      var hasChildren = isTree && rowData.children && Array.isArray(rowData.children);\n      var nextRowKey = rowData[rowKey] || getRandomKey(props.index);\n      var rowProps = {\n        rowRef: this.bindTableRowsRef(props.index),\n        onClick: this.bindRowClick(rowData),\n        key: props.index,\n        width: props.rowWidth,\n        height: props.rowHeight,\n        top: props.top\n      };\n      var expandedRowKeys = this.getExpandedRowKeys() || [];\n      var expanded = expandedRowKeys.some(function (key) {\n        return key === rowData[rowKey];\n      });\n      var cells = [];\n\n      for (var i = 0; i < bodyCells.length; i++) {\n        var cell = bodyCells[i];\n        cells.push(React.cloneElement(cell, {\n          hasChildren: hasChildren,\n          rowData: rowData,\n          wordWrap: wordWrap,\n          renderTreeToggle: renderTreeToggle,\n          height: props.rowHeight,\n          rowIndex: props.index,\n          depth: props.depth,\n          onTreeToggle: this.handleTreeToggle,\n          rowKey: nextRowKey,\n          className: (0, _classnames2.default)(_defineProperty({}, this.addPrefix('cell-expanded'), expanded))\n        }));\n      }\n\n      return this.renderRow(rowProps, cells, shouldRenderExpandedRow, rowData);\n    }\n  }, {\n    key: 'renderRow',\n    value: function renderRow(props, cells, shouldRenderExpandedRow, rowData) {\n      var rowClassName = this.props.rowClassName;\n      var _state2 = this.state,\n          shouldFixedColumn = _state2.shouldFixedColumn,\n          width = _state2.width,\n          contentWidth = _state2.contentWidth;\n\n      if (typeof rowClassName === 'function') {\n        props.className = rowClassName(rowData);\n      } else {\n        props.className = rowClassName;\n      } // IF there are fixed columns, add a fixed group\n\n\n      if (shouldFixedColumn && contentWidth > width) {\n        var fixedLeftCells = [];\n        var fixedRightCells = [];\n        var scrollCells = [];\n        var fixedLeftCellGroupWidth = 0;\n        var fixedRightCellGroupWidth = 0;\n\n        for (var i = 0; i < cells.length; i++) {\n          var cell = cells[i];\n          var _cell$props = cell.props,\n              fixed = _cell$props.fixed,\n              _width2 = _cell$props.width;\n\n          if (fixed === true || fixed === 'left') {\n            fixedLeftCells.push(cell);\n            fixedLeftCellGroupWidth += _width2;\n          } else if (fixed === 'right') {\n            fixedRightCells.push(cell);\n            fixedRightCellGroupWidth += _width2;\n          } else {\n            scrollCells.push(cell);\n          }\n        }\n\n        return React.createElement(_Row2.default, props, fixedLeftCellGroupWidth ? React.createElement(_CellGroup2.default, {\n          fixed: 'left',\n          height: props.isHeaderRow ? props.headerHeight : props.height,\n          width: fixedLeftCellGroupWidth\n        }, (0, _utils.colSpanCells)(fixedLeftCells)) : null, React.createElement(_CellGroup2.default, null, (0, _utils.colSpanCells)(scrollCells)), fixedRightCellGroupWidth ? React.createElement(_CellGroup2.default, {\n          fixed: 'right',\n          style: {\n            left: width - fixedRightCellGroupWidth - SCROLLBAR_WIDHT\n          },\n          height: props.isHeaderRow ? props.headerHeight : props.height,\n          width: fixedRightCellGroupWidth\n        }, (0, _utils.colSpanCells)(resetLeftForCells(fixedRightCells))) : null, shouldRenderExpandedRow && this.renderRowExpanded(rowData));\n      }\n\n      return React.createElement(_Row2.default, props, React.createElement(_CellGroup2.default, null, (0, _utils.colSpanCells)(cells)), shouldRenderExpandedRow && this.renderRowExpanded(rowData));\n    }\n  }, {\n    key: 'renderRowExpanded',\n    value: function renderRowExpanded(rowData) {\n      var _props7 = this.props,\n          renderRowExpanded = _props7.renderRowExpanded,\n          rowExpandedHeight = _props7.rowExpandedHeight;\n      var styles = {\n        height: rowExpandedHeight\n      };\n\n      if (typeof renderRowExpanded === 'function') {\n        return React.createElement('div', {\n          className: this.addPrefix('row-expanded'),\n          style: styles\n        }, renderRowExpanded(rowData));\n      }\n\n      return null;\n    }\n  }, {\n    key: 'renderMouseArea',\n    value: function renderMouseArea() {\n      var headerHeight = this.getTableHeaderHeight();\n      var styles = {\n        height: this.getTableHeight()\n      };\n      var spanStyles = {\n        height: headerHeight - 1\n      };\n      return React.createElement('div', {\n        ref: this.bindMouseAreaRef,\n        className: this.addPrefix('mouse-area'),\n        style: styles\n      }, React.createElement('span', {\n        style: spanStyles\n      }));\n    }\n  }, {\n    key: 'renderTableHeader',\n    value: function renderTableHeader(headerCells, rowWidth) {\n      var rowHeight = this.props.rowHeight;\n      var headerHeight = this.getTableHeaderHeight();\n      var rowProps = {\n        rowRef: this.bindTableHeaderRef,\n        width: rowWidth,\n        height: rowHeight,\n        headerHeight: headerHeight,\n        isHeaderRow: true,\n        top: 0\n      };\n      return React.createElement('div', {\n        className: this.addPrefix('header-row-wrapper'),\n        ref: this.bindHeaderWrapperRef\n      }, this.renderRow(rowProps, headerCells));\n    }\n  }, {\n    key: 'renderTableBody',\n    value: function renderTableBody(bodyCells, rowWidth) {\n      var _props8 = this.props,\n          rowHeight = _props8.rowHeight,\n          rowExpandedHeight = _props8.rowExpandedHeight,\n          isTree = _props8.isTree,\n          setRowHeight = _props8.setRowHeight,\n          rowKey = _props8.rowKey,\n          wordWrap = _props8.wordWrap,\n          virtualized = _props8.virtualized;\n      var headerHeight = this.getTableHeaderHeight();\n      var _state3 = this.state,\n          tableRowsMaxHeight = _state3.tableRowsMaxHeight,\n          isScrolling = _state3.isScrolling,\n          data = _state3.data;\n      var height = this.getTableHeight();\n      var bodyStyles = {\n        top: headerHeight,\n        height: height - headerHeight\n      };\n      var top = 0; // Row position\n\n      var bodyHeight = 0;\n      var topHideHeight = 0;\n      var bottomHideHeight = 0;\n      this._rows = [];\n\n      if (data) {\n        var minTop = Math.abs(this.state.scrollY);\n        var maxTop = minTop + height + rowExpandedHeight;\n\n        for (var index = 0; index < data.length; index++) {\n          var _rowData = data[index];\n          var maxHeight = tableRowsMaxHeight[index];\n          var nextRowHeight = maxHeight ? maxHeight + CELL_PADDING_HEIGHT : rowHeight;\n          var shouldRenderExpandedRow = this.shouldRenderExpandedRow(_rowData);\n          var depth = 0;\n\n          if (shouldRenderExpandedRow) {\n            nextRowHeight += rowExpandedHeight;\n          }\n\n          if (isTree) {\n            var parents = findAllParents(_rowData, rowKey);\n\n            var _expandedRowKeys = this.getExpandedRowKeys();\n\n            depth = parents.length; // 树节点如果被关闭，则不渲染\n\n            if (!shouldShowRowByExpanded(_expandedRowKeys, parents)) {\n              continue;\n            }\n          }\n          /**\n           * 自定义行高\n           */\n\n\n          if (setRowHeight) {\n            nextRowHeight = setRowHeight(_rowData) || rowHeight;\n          }\n\n          bodyHeight += nextRowHeight;\n          var rowProps = {\n            index: index,\n            top: top,\n            rowWidth: rowWidth,\n            depth: depth,\n            rowHeight: nextRowHeight\n          };\n          top += nextRowHeight;\n\n          if (virtualized && !wordWrap) {\n            if (top + nextRowHeight < minTop) {\n              topHideHeight += nextRowHeight;\n              continue;\n            } else if (top > maxTop) {\n              bottomHideHeight += nextRowHeight;\n              continue;\n            }\n          }\n\n          this._rows.push(this.renderRowData(bodyCells, _rowData, rowProps, shouldRenderExpandedRow));\n        }\n      }\n\n      var wheelStyles = {\n        position: 'absolute',\n        height: bodyHeight,\n        minHeight: height,\n        pointerEvents: isScrolling ? 'none' : ''\n      };\n      var topRowStyles = {\n        height: topHideHeight\n      };\n      var bottomRowStyles = {\n        height: bottomHideHeight\n      };\n      return React.createElement('div', {\n        ref: this.bindBodyRef,\n        className: this.addPrefix('body-row-wrapper'),\n        style: bodyStyles,\n        onScroll: this.handleBodyScroll\n      }, React.createElement('div', {\n        style: wheelStyles,\n        className: this.addPrefix('body-wheel-area'),\n        ref: this.bindWheelWrapperRef\n      }, topHideHeight ? React.createElement(_Row2.default, {\n        style: topRowStyles,\n        className: 'virtualized'\n      }) : null, this._rows, bottomHideHeight ? React.createElement(_Row2.default, {\n        style: bottomRowStyles,\n        className: 'virtualized'\n      }) : null), this.renderInfo(), this.renderScrollbar(), this.renderLoading());\n    }\n  }, {\n    key: 'renderInfo',\n    value: function renderInfo() {\n      if (this._rows.length) {\n        return null;\n      }\n\n      var _props9 = this.props,\n          locale = _props9.locale,\n          renderEmpty = _props9.renderEmpty;\n      var emptyMessage = React.createElement('div', {\n        className: this.addPrefix('body-info')\n      }, locale.emptyMessage);\n      return renderEmpty ? renderEmpty(emptyMessage) : emptyMessage;\n    }\n  }, {\n    key: 'renderScrollbar',\n    value: function renderScrollbar() {\n      var disabledScroll = this.props.disabledScroll;\n      var _state4 = this.state,\n          contentWidth = _state4.contentWidth,\n          contentHeight = _state4.contentHeight;\n      var headerHeight = this.getTableHeaderHeight();\n      var height = this.getTableHeight();\n\n      if (disabledScroll) {\n        return null;\n      }\n\n      return React.createElement('div', null, React.createElement(_Scrollbar2.default, {\n        length: this.state.width,\n        onScroll: this.handleScrollX,\n        scrollLength: contentWidth,\n        ref: this.bindScrollbarXRef\n      }), React.createElement(_Scrollbar2.default, {\n        vertical: true,\n        length: height - headerHeight,\n        scrollLength: contentHeight,\n        onScroll: this.handleScrollY,\n        ref: this.bindScrollbarYRef\n      }));\n    }\n    /**\n     *  show loading\n     */\n\n  }, {\n    key: 'renderLoading',\n    value: function renderLoading() {\n      var _props10 = this.props,\n          locale = _props10.locale,\n          loading = _props10.loading,\n          loadAnimation = _props10.loadAnimation,\n          renderLoading = _props10.renderLoading;\n\n      if (!loadAnimation && !loading) {\n        return null;\n      }\n\n      var loadingElement = React.createElement('div', {\n        className: this.addPrefix('loader-wrapper')\n      }, React.createElement('div', {\n        className: this.addPrefix('loader')\n      }, React.createElement('i', {\n        className: this.addPrefix('loader-icon')\n      }), React.createElement('span', {\n        className: this.addPrefix('loader-text')\n      }, locale.loading)));\n      return renderLoading ? renderLoading(loadingElement) : loadingElement;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames2;\n\n      var _props11 = this.props,\n          children = _props11.children,\n          className = _props11.className,\n          _props11$width = _props11.width,\n          width = _props11$width === undefined ? 0 : _props11$width,\n          style = _props11.style,\n          isTree = _props11.isTree,\n          hover = _props11.hover,\n          bordered = _props11.bordered,\n          cellBordered = _props11.cellBordered,\n          wordWrap = _props11.wordWrap,\n          classPrefix = _props11.classPrefix,\n          loading = _props11.loading,\n          showHeader = _props11.showHeader,\n          rest = _objectWithoutProperties(_props11, ['children', 'className', 'width', 'style', 'isTree', 'hover', 'bordered', 'cellBordered', 'wordWrap', 'classPrefix', 'loading', 'showHeader']);\n\n      var isColumnResizing = this.state.isColumnResizing;\n\n      var _getCells = this.getCells(),\n          headerCells = _getCells.headerCells,\n          bodyCells = _getCells.bodyCells,\n          allColumnsWidth = _getCells.allColumnsWidth;\n\n      var rowWidth = allColumnsWidth > width ? allColumnsWidth : width;\n      var clesses = (0, _classnames2.default)(classPrefix, className, (_classNames2 = {}, _defineProperty(_classNames2, this.addPrefix('word-wrap'), wordWrap), _defineProperty(_classNames2, this.addPrefix('treetable'), isTree), _defineProperty(_classNames2, this.addPrefix('bordered'), bordered), _defineProperty(_classNames2, this.addPrefix('cell-bordered'), cellBordered), _defineProperty(_classNames2, this.addPrefix('column-resizing'), isColumnResizing), _defineProperty(_classNames2, this.addPrefix('hover'), hover), _defineProperty(_classNames2, this.addPrefix('loading'), loading), _classNames2));\n\n      var styles = _extends({\n        width: width || 'auto',\n        height: this.getTableHeight()\n      }, style);\n\n      var unhandled = (0, _utils.getUnhandledProps)(Table, rest);\n      return React.createElement('div', _extends({}, unhandled, {\n        className: clesses,\n        style: styles,\n        ref: this.bindTableRef\n      }), showHeader && this.renderTableHeader(headerCells, rowWidth), children && this.renderTableBody(bodyCells, rowWidth), showHeader && this.renderMouseArea());\n    }\n  }]);\n\n  return Table;\n}(React.Component);\n\nTable.defaultProps = {\n  classPrefix: (0, _utils.defaultClassPrefix)('table'),\n  data: [],\n  defaultSortType: SORT_TYPE.DESC,\n  height: 200,\n  rowHeight: 46,\n  headerHeight: 40,\n  minHeight: 0,\n  rowExpandedHeight: 100,\n  hover: true,\n  showHeader: true,\n  virtualized: false,\n  rowKey: 'key',\n  locale: {\n    emptyMessage: 'No data found',\n    loading: 'Loading...'\n  }\n};\nTable.handledProps = ['autoHeight', 'bodyRef', 'bordered', 'cellBordered', 'children', 'className', 'classPrefix', 'data', 'defaultExpandAllRows', 'defaultExpandedRowKeys', 'defaultSortType', 'disabledScroll', 'expandedRowKeys', 'headerHeight', 'height', 'hover', 'isTree', 'loadAnimation', 'loading', 'locale', 'minHeight', 'onExpandChange', 'onRowClick', 'onScroll', 'onSortColumn', 'onTouchMove', 'onTouchStart', 'renderEmpty', 'renderLoading', 'renderRowExpanded', 'renderTreeToggle', 'rowClassName', 'rowExpandedHeight', 'rowHeight', 'rowKey', 'setRowHeight', 'showHeader', 'sortColumn', 'sortType', 'style', 'virtualized', 'width', 'wordWrap'];\nTable.propTypes = {\n  width: _propTypes2.default.number,\n  data: _propTypes2.default.arrayOf(_propTypes2.default.object).isRequired,\n  height: _propTypes2.default.number.isRequired,\n  autoHeight: _propTypes2.default.bool,\n  minHeight: _propTypes2.default.number.isRequired,\n  rowHeight: _propTypes2.default.number.isRequired,\n  headerHeight: _propTypes2.default.number.isRequired,\n  setRowHeight: _propTypes2.default.func,\n  rowKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,\n  isTree: _propTypes2.default.bool,\n  defaultExpandAllRows: _propTypes2.default.bool,\n  defaultExpandedRowKeys: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),\n  expandedRowKeys: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),\n  renderTreeToggle: _propTypes2.default.func,\n  renderRowExpanded: _propTypes2.default.func,\n  rowExpandedHeight: _propTypes2.default.number,\n  locale: _propTypes2.default.object.isRequired,\n  style: _propTypes2.default.object,\n  sortColumn: _propTypes2.default.string,\n  sortType: _propTypes2.default.oneOf(['desc', 'asc']),\n  defaultSortType: _propTypes2.default.oneOf(['desc', 'asc']),\n  disabledScroll: _propTypes2.default.bool,\n  hover: _propTypes2.default.bool.isRequired,\n  loading: _propTypes2.default.bool,\n  className: _propTypes2.default.string,\n  classPrefix: _propTypes2.default.string,\n  children: function children() {\n    return (typeof (React.ChildrenArray == null ? {} : React.ChildrenArray) === 'function' ? _propTypes2.default.instanceOf(React.ChildrenArray == null ? {} : React.ChildrenArray).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);\n  },\n  bordered: _propTypes2.default.bool,\n  cellBordered: _propTypes2.default.bool,\n  wordWrap: _propTypes2.default.bool,\n  onRowClick: _propTypes2.default.func,\n  onScroll: _propTypes2.default.func,\n  onSortColumn: _propTypes2.default.func,\n  onExpandChange: _propTypes2.default.func,\n  onTouchStart: _propTypes2.default.func,\n  // for tests\n  onTouchMove: _propTypes2.default.func,\n  // for tests\n  bodyRef: function bodyRef() {\n    return (typeof (React.ElementRef == null ? {} : React.ElementRef) === 'function' ? _propTypes2.default.instanceOf(React.ElementRef == null ? {} : React.ElementRef) : _propTypes2.default.any).apply(this, arguments);\n  },\n  loadAnimation: _propTypes2.default.bool,\n  showHeader: _propTypes2.default.bool,\n  rowClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),\n  virtualized: _propTypes2.default.bool,\n  renderEmpty: _propTypes2.default.func,\n  renderLoading: _propTypes2.default.func\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this._listenWheel = function (deltaX, deltaY) {\n    _this3.handleWheel(deltaX, deltaY);\n\n    if (_this3.scrollbarX) {\n      _this3.scrollbarX.onWheelScroll(deltaX);\n    }\n\n    if (_this3.scrollbarY) {\n      _this3.scrollbarY.onWheelScroll(deltaY);\n    }\n  };\n\n  this.handleSortColumn = function (dataKey) {\n    var _props12 = _this3.props,\n        onSortColumn = _props12.onSortColumn,\n        sortColumn = _props12.sortColumn;\n\n    var sortType = _this3.getSortType();\n\n    if (sortColumn === dataKey) {\n      sortType = sortType === SORT_TYPE.ASC ? SORT_TYPE.DESC : SORT_TYPE.ASC;\n\n      _this3.setState({\n        sortType: sortType\n      });\n    }\n\n    onSortColumn && onSortColumn(dataKey, sortType);\n  };\n\n  this._cacheCells = null;\n  this._cacheChildrenSize = 0;\n\n  this.handleColumnResizeEnd = function (columnWidth, cursorDelta, dataKey, index) {\n    _this3._cacheCells = null;\n\n    _this3.setState(_defineProperty({\n      isColumnResizing: false\n    }, dataKey + '_' + index + '_width', columnWidth));\n\n    (0, _domLib.addStyle)(_this3.mouseArea, {\n      display: 'none'\n    });\n  };\n\n  this.handleColumnResizeStart = function (width, left, fixed) {\n    _this3.setState({\n      isColumnResizing: true\n    });\n\n    var mouseAreaLeft = width + left;\n    var x = fixed ? mouseAreaLeft : mouseAreaLeft + (_this3.scrollX || 0);\n    var styles = {\n      display: 'block'\n    };\n    (0, _domLib.translateDOMPositionXY)(styles, x, 0);\n    (0, _domLib.addStyle)(_this3.mouseArea, styles);\n  };\n\n  this.handleColumnResizeMove = function (width, left, fixed) {\n    var mouseAreaLeft = width + left;\n    var x = fixed ? mouseAreaLeft : mouseAreaLeft + (_this3.scrollX || 0);\n    var styles = {};\n    (0, _domLib.translateDOMPositionXY)(styles, x, 0);\n    (0, _domLib.addStyle)(_this3.mouseArea, styles);\n  };\n\n  this.handleTreeToggle = function (rowKey, rowIndex, rowData) {\n    var onExpandChange = _this3.props.onExpandChange;\n    var expandedRowKeys = _this3.state.expandedRowKeys;\n    var open = false;\n    var nextExpandedRowKeys = [];\n\n    for (var i = 0; i < expandedRowKeys.length; i++) {\n      var key = expandedRowKeys[i];\n\n      if (key === rowKey) {\n        open = true;\n      } else {\n        nextExpandedRowKeys.push(key);\n      }\n    }\n\n    if (!open) {\n      nextExpandedRowKeys.push(rowKey);\n    }\n\n    _this3.setState({\n      expandedRowKeys: nextExpandedRowKeys\n    });\n\n    onExpandChange && onExpandChange(!open, rowData);\n  };\n\n  this.handleScrollX = function (delta) {\n    _this3.handleWheel(delta, 0);\n  };\n\n  this.handleScrollY = function (delta) {\n    _this3.handleWheel(0, delta);\n  };\n\n  this.disableEventsTimeoutId = null;\n\n  this.handleWheel = function (deltaX, deltaY) {\n    var _props13 = _this3.props,\n        onScroll = _props13.onScroll,\n        virtualized = _props13.virtualized;\n\n    if (!_this3.table) {\n      return;\n    }\n\n    var nextScrollX = _this3.scrollX - deltaX;\n    var nextScrollY = _this3.scrollY - deltaY;\n    _this3.scrollY = Math.min(0, nextScrollY < _this3.minScrollY ? _this3.minScrollY : nextScrollY);\n    _this3.scrollX = Math.min(0, nextScrollX < _this3.minScrollX ? _this3.minScrollX : nextScrollX);\n\n    _this3.updatePosition();\n\n    onScroll && onScroll(_this3.scrollX, _this3.scrollY);\n\n    if (virtualized) {\n      _this3.setState({\n        isScrolling: true,\n        scrollY: _this3.scrollY\n      });\n\n      if (_this3.disableEventsTimeoutId) {\n        (0, _utils.cancelAnimationTimeout)(_this3.disableEventsTimeoutId);\n      }\n\n      _this3.disableEventsTimeoutId = (0, _utils.requestAnimationTimeout)(_this3.debounceScrollEndedCallback, 150);\n    }\n  };\n\n  this.debounceScrollEndedCallback = function () {\n    _this3.disableEventsTimeoutId = null;\n\n    _this3.setState({\n      isScrolling: false\n    });\n  };\n\n  this.handleTouchStart = function (event) {\n    var onTouchStart = _this3.props.onTouchStart;\n\n    var _ref = event.touches ? event.touches[0] : {},\n        pageX = _ref.pageX,\n        pageY = _ref.pageY;\n\n    _this3.touchX = pageX;\n    _this3.touchY = pageY;\n    onTouchStart && onTouchStart(event);\n  };\n\n  this.handleTouchMove = function (event) {\n    event.stopPropagation();\n    event.preventDefault();\n    var onTouchMove = _this3.props.onTouchMove;\n\n    var _ref2 = event.touches ? event.touches[0] : {},\n        nextPageX = _ref2.pageX,\n        nextPageY = _ref2.pageY;\n\n    var deltaX = _this3.touchX - nextPageX;\n    var deltaY = _this3.touchY - nextPageY;\n\n    _this3.handleWheel(deltaX, deltaY);\n\n    _this3.scrollbarX.onWheelScroll(deltaX);\n\n    _this3.scrollbarY.onWheelScroll(deltaY);\n\n    _this3.touchX = nextPageX;\n    _this3.touchY = nextPageY;\n    onTouchMove && onTouchMove(event);\n  };\n\n  this.handleBodyScroll = function (event) {\n    if (event.target !== _this3.tableBody) {\n      return;\n    }\n\n    var left = (0, _domLib.scrollLeft)(event.target);\n    var top = (0, _domLib.scrollTop)(event.target);\n\n    if (top === 0 && left === 0) {\n      return;\n    }\n\n    _this3._listenWheel(left, top);\n\n    (0, _domLib.scrollLeft)(event.target, 0);\n    (0, _domLib.scrollTop)(event.target, 0);\n  };\n\n  this.shouldHandleWheelX = function (delta) {\n    var _props14 = _this3.props,\n        disabledScroll = _props14.disabledScroll,\n        loading = _props14.loading;\n    var _state5 = _this3.state,\n        contentWidth = _state5.contentWidth,\n        width = _state5.width;\n\n    if (delta === 0 || disabledScroll || loading) {\n      return false;\n    }\n\n    if (width && contentWidth <= width) {\n      return false;\n    }\n\n    return delta >= 0 && _this3.scrollX > _this3.minScrollX || delta < 0 && _this3.scrollX < 0;\n  };\n\n  this.shouldHandleWheelY = function (delta) {\n    var _props15 = _this3.props,\n        disabledScroll = _props15.disabledScroll,\n        loading = _props15.loading;\n\n    if (delta === 0 || disabledScroll || loading) {\n      return false;\n    }\n\n    return delta >= 0 && _this3.scrollY > _this3.minScrollY || delta < 0 && _this3.scrollY < 0;\n  };\n\n  this.tableRows = {};\n  this.mounted = false;\n  this.scrollY = 0;\n  this.scrollX = 0;\n\n  this.addPrefix = function (name) {\n    return (0, _utils.prefix)(_this3.props.classPrefix)(name);\n  };\n\n  this.calculateTableWidth = function () {\n    var table = _this3.table;\n\n    if (table) {\n      _this3.scrollX = 0;\n      _this3.scrollbarX && _this3.scrollbarX.resetScrollBarPosition();\n      _this3._cacheCells = null;\n\n      _this3.setState({\n        width: (0, _domLib.getWidth)(table)\n      });\n    }\n  };\n\n  this.scrollTop = function () {\n    var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    _this3.scrollY = -top;\n    _this3.scrollbarY && _this3.scrollbarY.resetScrollBarPosition(top);\n\n    _this3.setState({\n      scrollY: -top\n    });\n  };\n\n  this.scrollLeft = function () {\n    var left = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    _this3.scrollX = -left;\n    _this3.scrollbarX && _this3.scrollbarX.resetScrollBarPosition(left);\n\n    _this3.updatePosition();\n  };\n\n  this.bindTableRowsRef = function (index) {\n    return function (ref) {\n      if (ref) {\n        _this3.tableRows[index] = ref;\n      }\n    };\n  };\n\n  this.bindMouseAreaRef = function (ref) {\n    _this3.mouseArea = ref;\n  };\n\n  this.bindTableHeaderRef = function (ref) {\n    _this3.tableHeader = ref;\n  };\n\n  this.bindHeaderWrapperRef = function (ref) {\n    _this3.headerWrapper = ref;\n  };\n\n  this.bindTableRef = function (ref) {\n    _this3.table = ref;\n  };\n\n  this.bindWheelWrapperRef = function (ref) {\n    var bodyRef = _this3.props.bodyRef;\n    _this3.wheelWrapper = ref;\n    bodyRef && bodyRef(ref);\n  };\n\n  this.bindBodyRef = function (ref) {\n    _this3.tableBody = ref;\n  };\n\n  this.bindScrollbarXRef = function (ref) {\n    _this3.scrollbarX = ref;\n  };\n\n  this.bindScrollbarYRef = function (ref) {\n    _this3.scrollbarY = ref;\n  };\n\n  this.bindRowClick = function (rowData) {\n    var onRowClick = _this3.props.onRowClick;\n    return function () {\n      onRowClick && onRowClick(rowData);\n    };\n  };\n\n  this._rows = [];\n};\n\nexports.default = Table;","map":null,"metadata":{},"sourceType":"script"}