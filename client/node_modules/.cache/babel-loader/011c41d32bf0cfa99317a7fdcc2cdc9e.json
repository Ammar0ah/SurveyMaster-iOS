{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _kebabCase2 = _interopRequireDefault(require(\"lodash/kebabCase\"));\n\nvar _remove2 = _interopRequireDefault(require(\"lodash/remove\"));\n\nvar _trim2 = _interopRequireDefault(require(\"lodash/trim\"));\n\nvar _clone2 = _interopRequireDefault(require(\"lodash/clone\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _InputAutosize = _interopRequireDefault(require(\"./InputAutosize\"));\n\nvar _domLib = require(\"dom-lib\");\n\nvar _utils = require(\"rsuite-utils/lib/utils\");\n\nvar _utils2 = require(\"../utils\");\n\nvar _picker = require(\"../_picker\");\n\nvar _InputSearch = _interopRequireDefault(require(\"./InputSearch\"));\n\nvar _Tag = _interopRequireDefault(require(\"../Tag\"));\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Dropdown, _React$Component);\n\n  Dropdown.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.data && !(0, _utils.shallowEqual)(nextProps.data, prevState.data)) {\n      return {\n        data: nextProps.data,\n        focusItemValue: (0, _get2.default)(nextProps, \"data.0.\" + nextProps.valueKey)\n      };\n    }\n\n    return null;\n  };\n\n  function Dropdown(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getFocusableMenuItems\", function () {\n      var labelKey = _this.props.labelKey;\n      var menuItems = _this.menuContainer.menuItems;\n\n      if (!menuItems) {\n        return [];\n      }\n\n      var items = Object.values(menuItems).map(function (item) {\n        return item.props.getItemData();\n      });\n      return (0, _utils.filterNodesOfTree)(items, function (item) {\n        return _this.shouldDisplay(item[labelKey]);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"menuContainer\", {\n      menuItems: null\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindMenuContainerRef\", function (ref) {\n      _this.menuContainer = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"input\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindInputRef\", function (ref) {\n      _this.input = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"trigger\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTriggerRef\", function (ref) {\n      _this.trigger = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggleWrapper\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindToggleWrapperRef\", function (ref) {\n      _this.toggleWrapper = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggle\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindToggleRef\", function (ref) {\n      _this.toggle = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getToggleInstance\", function () {\n      return _this.toggle;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"position\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindPositionRef\", function (ref) {\n      _this.position = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"focusNextMenuItem\", function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index + 1];\n\n        if (!(0, _isUndefined2.default)(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"focusPrevMenuItem\", function () {\n      var valueKey = _this.props.valueKey;\n\n      _this.findNode(function (items, index) {\n        var focusItem = items[index - 1];\n\n        if (!(0, _isUndefined2.default)(focusItem)) {\n          _this.setState({\n            focusItemValue: focusItem[valueKey]\n          });\n        }\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleKeyDown\", function (event) {\n      if (!_this.menuContainer) {\n        return;\n      }\n\n      var multi = _this.props.multi;\n      (0, _picker.onMenuKeyDown)(event, {\n        down: _this.focusNextMenuItem,\n        up: _this.focusPrevMenuItem,\n        enter: multi ? _this.selectFocusMenuCheckItem : _this.selectFocusMenuItem,\n        esc: _this.closeDropdown,\n        del: multi ? _this.removeLastItem : _this.handleClean\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClick\", function () {\n      _this.focusInput();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"selectFocusMenuItem\", function (event) {\n      var _this$state = _this.state,\n          focusItemValue = _this$state.focusItemValue,\n          searchKeyword = _this$state.searchKeyword;\n      var _this$props = _this.props,\n          valueKey = _this$props.valueKey,\n          data = _this$props.data,\n          disabledItemValues = _this$props.disabledItemValues;\n\n      if (!focusItemValue || !data) {\n        return;\n      } // If the value is disabled in this option, it is returned.\n\n\n      if (disabledItemValues && disabledItemValues.some(function (item) {\n        return item === focusItemValue;\n      })) {\n        return;\n      } // Find active `MenuItem` by `value`\n\n\n      var focusItem = (0, _utils.findNodeOfTree)(_this.getAllData(), function (item) {\n        return (0, _utils.shallowEqual)(item[valueKey], focusItemValue);\n      });\n\n      if (!focusItem && focusItemValue === searchKeyword) {\n        focusItem = _this.createOption(searchKeyword);\n      }\n\n      _this.setState({\n        value: focusItemValue,\n        searchKeyword: ''\n      });\n\n      _this.handleSelect(focusItemValue, focusItem, event);\n\n      _this.handleChange(focusItemValue, event);\n\n      _this.closeDropdown();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"selectFocusMenuCheckItem\", function (event) {\n      var _this$props2 = _this.props,\n          valueKey = _this$props2.valueKey,\n          disabledItemValues = _this$props2.disabledItemValues;\n      var focusItemValue = _this.state.focusItemValue;\n\n      var value = _this.getValue();\n\n      var data = _this.getAllData();\n\n      if (!focusItemValue || !data) {\n        return;\n      } // If the value is disabled in this option, it is returned.\n\n\n      if (disabledItemValues && disabledItemValues.some(function (item) {\n        return item === focusItemValue;\n      })) {\n        return;\n      }\n\n      if (!value.some(function (v) {\n        return (0, _utils.shallowEqual)(v, focusItemValue);\n      })) {\n        value.push(focusItemValue);\n      } else {\n        (0, _remove2.default)(value, function (itemVal) {\n          return (0, _utils.shallowEqual)(itemVal, focusItemValue);\n        });\n      }\n\n      var focusItem = data.find(function (item) {\n        return (0, _utils.shallowEqual)((0, _get2.default)(item, valueKey), focusItemValue);\n      });\n\n      if (!focusItem) {\n        focusItem = _this.createOption(focusItemValue);\n      }\n\n      _this.setState({\n        value: value,\n        searchKeyword: ''\n      }, _this.updatePosition);\n\n      _this.handleSelect(value, focusItem, event);\n\n      _this.handleChange(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleItemSelect\", function (value, item, event) {\n      var nextState = {\n        value: value,\n        focusItemValue: value,\n        searchKeyword: ''\n      };\n\n      _this.setState(nextState);\n\n      _this.handleSelect(value, item, event);\n\n      _this.handleChange(value, event);\n\n      _this.closeDropdown();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleCheckItemSelect\", function (nextItemValue, item, event, checked) {\n      var value = _this.getValue();\n\n      if (checked) {\n        value.push(nextItemValue);\n      } else {\n        (0, _remove2.default)(value, function (itemVal) {\n          return (0, _utils.shallowEqual)(itemVal, nextItemValue);\n        });\n      }\n\n      var nextState = {\n        value: value,\n        searchKeyword: '',\n        focusItemValue: nextItemValue\n      };\n\n      _this.setState(nextState, _this.updatePosition);\n\n      _this.handleSelect(value, item, event);\n\n      _this.handleChange(value, event);\n\n      _this.focusInput();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (value, item, event) {\n      var _this$props3 = _this.props,\n          onSelect = _this$props3.onSelect,\n          creatable = _this$props3.creatable;\n      var newData = _this.state.newData;\n      onSelect && onSelect(value, item, event);\n\n      if (creatable && item.create) {\n        delete item.create;\n\n        _this.setState({\n          newData: newData.concat(item)\n        });\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSearch\", function (searchKeyword, event) {\n      var _this$props4 = _this.props,\n          onSearch = _this$props4.onSearch,\n          labelKey = _this$props4.labelKey,\n          valueKey = _this$props4.valueKey;\n      var filteredData = (0, _utils.filterNodesOfTree)(_this.getAllData(), function (item) {\n        return _this.shouldDisplay(item[labelKey], searchKeyword);\n      });\n      var nextState = {\n        searchKeyword: searchKeyword,\n        focusItemValue: filteredData.length ? filteredData[0][valueKey] : searchKeyword\n      };\n\n      _this.setState(nextState, _this.updatePosition);\n\n      onSearch && onSearch(searchKeyword, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"closeDropdown\", function () {\n      if (_this.trigger) {\n        _this.trigger.hide();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleChange\", function (value, event) {\n      var onChange = _this.props.onChange;\n      onChange && onChange(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClean\", function (event) {\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        return;\n      }\n\n      var nextState = {\n        value: null,\n        focusItemValue: null,\n        searchKeyword: ''\n      };\n\n      _this.setState(nextState, function () {\n        _this.handleChange(null, event);\n\n        _this.updatePosition();\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleEntered\", function () {\n      var onOpen = _this.props.onOpen;\n      onOpen && onOpen();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleExited\", function () {\n      var _this$props5 = _this.props,\n          onClose = _this$props5.onClose,\n          multi = _this$props5.multi;\n\n      var value = _this.getValue();\n\n      var nextState = {\n        focusItemValue: multi ? (0, _get2.default)(value, 0) : value\n      };\n\n      if (multi) {\n        /**\n         在多选的情况下, 当 searchKeyword 过长，在 focus 的时候会导致内容换行。\n         把 searchKeyword 清空是为了，Menu 在展开时候位置正确。\n         */\n        nextState.searchKeyword = '';\n      }\n\n      onClose && onClose();\n\n      _this.setState(nextState);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleEnter\", function () {\n      _this.focusInput();\n\n      _this.setState({\n        open: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleExit\", function () {\n      _this.blurInput();\n\n      _this.setState({\n        open: false\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleRemoveItemByTag\", function (tag, event) {\n      event.stopPropagation();\n\n      var value = _this.getValue();\n\n      (0, _remove2.default)(value, function (itemVal) {\n        return (0, _utils.shallowEqual)(itemVal, tag);\n      });\n\n      _this.setState({\n        value: value\n      }, _this.updatePosition);\n\n      _this.handleChange(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"removeLastItem\", function (event) {\n      var tagName = (0, _get2.default)(event, 'target.tagName');\n\n      if (tagName !== 'INPUT') {\n        _this.focusInput();\n\n        return;\n      }\n\n      if (tagName === 'INPUT' && event.target.value) {\n        return;\n      }\n\n      var value = _this.getValue();\n\n      value.pop();\n\n      _this.setState({\n        value: value\n      }, _this.updatePosition);\n\n      _this.handleChange(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils2.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"renderMenuItem\", function (label, item) {\n      var _this$props6 = _this.props,\n          locale = _this$props6.locale,\n          renderMenuItem = _this$props6.renderMenuItem;\n      var newLabel = item.create ? React.createElement(\"span\", null, (0, _utils2.tplTransform)(locale.createOption, label)) : label;\n      return renderMenuItem ? renderMenuItem(newLabel, item) : newLabel;\n    });\n    var defaultValue = props.defaultValue,\n        groupBy = props.groupBy,\n        _valueKey = props.valueKey,\n        _labelKey = props.labelKey,\n        defaultOpen = props.defaultOpen,\n        _multi = props.multi,\n        _data = props.data;\n\n    var _value = _multi ? defaultValue || [] : defaultValue;\n\n    var _focusItemValue = _multi ? (0, _get2.default)(_value, 0) : defaultValue;\n\n    _this.state = {\n      data: _data,\n      value: _value,\n      focusItemValue: _focusItemValue,\n      searchKeyword: '',\n      newData: [],\n      open: defaultOpen,\n      maxWidth: 100\n    };\n\n    if (groupBy === _valueKey || groupBy === _labelKey) {\n      throw Error('`groupBy` can not be equal to `valueKey` and `labelKey`');\n    }\n\n    return _this;\n  }\n\n  var _proto = Dropdown.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.toggleWrapper) {\n      var maxWidth = (0, _domLib.getWidth)(this.toggleWrapper);\n      this.setState({\n        maxWidth: maxWidth\n      });\n    }\n  };\n\n  _proto.getValue = function getValue() {\n    var _this$props7 = this.props,\n        value = _this$props7.value,\n        multi = _this$props7.multi;\n    var nextValue = (0, _isUndefined2.default)(value) ? this.state.value : value;\n\n    if (multi) {\n      return (0, _clone2.default)(nextValue) || [];\n    }\n\n    return nextValue;\n  };\n\n  _proto.getAllData = function getAllData() {\n    var data = this.props.data;\n    var newData = this.state.newData;\n    return [].concat(data, newData);\n  };\n\n  _proto.getAllDataAndCache = function getAllDataAndCache() {\n    var cacheData = this.props.cacheData;\n    var data = this.getAllData();\n    return [].concat(data, cacheData);\n  };\n\n  _proto.getLabelByValue = function getLabelByValue(value) {\n    var _this$props8 = this.props,\n        renderValue = _this$props8.renderValue,\n        placeholder = _this$props8.placeholder,\n        valueKey = _this$props8.valueKey,\n        labelKey = _this$props8.labelKey; // Find active `MenuItem` by `value`\n\n    var activeItem = (0, _utils.findNodeOfTree)(this.getAllDataAndCache(), function (item) {\n      return (0, _utils.shallowEqual)(item[valueKey], value);\n    });\n    var displayElement = placeholder;\n\n    if ((0, _get2.default)(activeItem, labelKey)) {\n      displayElement = (0, _get2.default)(activeItem, labelKey);\n\n      if (renderValue) {\n        displayElement = renderValue(value, activeItem, displayElement);\n      }\n    }\n\n    return {\n      isValid: !!activeItem,\n      displayElement: displayElement\n    };\n  };\n\n  _proto.createOption = function createOption(value) {\n    var _ref2;\n\n    var _this$props9 = this.props,\n        valueKey = _this$props9.valueKey,\n        labelKey = _this$props9.labelKey,\n        groupBy = _this$props9.groupBy,\n        locale = _this$props9.locale;\n\n    if (groupBy) {\n      var _ref;\n\n      return _ref = {\n        create: true\n      }, _ref[groupBy] = locale.newItem, _ref[valueKey] = value, _ref[labelKey] = value, _ref;\n    }\n\n    return _ref2 = {\n      create: true\n    }, _ref2[valueKey] = value, _ref2[labelKey] = value, _ref2;\n  };\n\n  _proto.focusInput = function focusInput() {\n    if (!this.input) return;\n    this.input.focus();\n  };\n\n  _proto.blurInput = function blurInput() {\n    if (!this.input) return;\n    this.input.blur();\n  };\n  /**\n   * Index of keyword  in `label`\n   * @param {node} label\n   */\n\n\n  _proto.shouldDisplay = function shouldDisplay(label, searchKeyword) {\n    var word = typeof searchKeyword === 'undefined' ? this.state.searchKeyword : searchKeyword;\n\n    if (!(0, _trim2.default)(word)) {\n      return true;\n    }\n\n    var keyword = word.toLocaleLowerCase();\n\n    if (typeof label === 'string' || typeof label === 'number') {\n      return (\"\" + label).toLocaleLowerCase().indexOf(keyword) >= 0;\n    } else if (React.isValidElement(label)) {\n      var nodes = (0, _utils.reactToString)(label);\n      return nodes.join('').toLocaleLowerCase().indexOf(keyword) >= 0;\n    }\n\n    return false;\n  };\n\n  _proto.findNode = function findNode(focus) {\n    var items = this.getFocusableMenuItems();\n    var valueKey = this.props.valueKey;\n    var focusItemValue = this.state.focusItemValue;\n\n    for (var i = 0; i < items.length; i += 1) {\n      if ((0, _utils.shallowEqual)(focusItemValue, items[i][valueKey])) {\n        focus(items, i);\n        return;\n      }\n    }\n\n    focus(items, -1);\n  };\n\n  _proto.updatePosition = function updatePosition() {\n    if (this.position) {\n      this.position.updatePosition(true);\n    }\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this2 = this;\n\n    var _this$props10 = this.props,\n        labelKey = _this$props10.labelKey,\n        groupBy = _this$props10.groupBy,\n        placement = _this$props10.placement,\n        locale = _this$props10.locale,\n        renderMenu = _this$props10.renderMenu,\n        renderExtraFooter = _this$props10.renderExtraFooter,\n        menuClassName = _this$props10.menuClassName,\n        menuStyle = _this$props10.menuStyle,\n        menuAutoWidth = _this$props10.menuAutoWidth,\n        creatable = _this$props10.creatable,\n        valueKey = _this$props10.valueKey,\n        multi = _this$props10.multi,\n        sort = _this$props10.sort;\n    var _this$state2 = this.state,\n        focusItemValue = _this$state2.focusItemValue,\n        searchKeyword = _this$state2.searchKeyword;\n    var menuClassPrefix = this.addPrefix(multi ? 'check-menu' : 'select-menu');\n    var classes = (0, _classnames.default)(menuClassPrefix, menuClassName, this.addPrefix(\"placement-\" + (0, _kebabCase2.default)(placement)));\n    var allData = this.getAllData();\n    var filteredData = (0, _utils.filterNodesOfTree)(allData, function (item) {\n      return _this2.shouldDisplay(item[labelKey]);\n    });\n\n    if (creatable && searchKeyword && !(0, _utils.findNodeOfTree)(allData, function (item) {\n      return item[valueKey] === searchKeyword;\n    })) {\n      filteredData = [].concat(filteredData, [this.createOption(searchKeyword)]);\n    } // Create a tree structure data when set `groupBy`\n\n\n    if (groupBy) {\n      filteredData = (0, _utils2.getDataGroupBy)(filteredData, groupBy, sort);\n    } else if (typeof sort === 'function') {\n      filteredData = filteredData.sort(sort(false));\n    }\n\n    var menuProps = (0, _pick2.default)(this.props, _picker.DropdownMenu.handledProps.filter(function (name) {\n      return !['className', 'style', 'classPrefix'].some(function (item) {\n        return item === name;\n      });\n    }));\n    var value = this.getValue();\n    var menu = filteredData.length ? React.createElement(_picker.DropdownMenu, (0, _extends2.default)({}, menuProps, {\n      classPrefix: menuClassPrefix,\n      dropdownMenuItemClassPrefix: menuClassPrefix + \"-item\",\n      dropdownMenuItemComponentClass: multi ? _picker.DropdownMenuCheckItem : _picker.DropdownMenuItem,\n      ref: this.bindMenuContainerRef,\n      activeItemValues: multi ? value : [value],\n      focusItemValue: focusItemValue,\n      data: filteredData,\n      group: !(0, _isUndefined2.default)(groupBy),\n      onSelect: multi ? this.handleCheckItemSelect : this.handleItemSelect,\n      renderMenuItem: this.renderMenuItem\n    })) : React.createElement(\"div\", {\n      className: this.addPrefix('none')\n    }, locale.noResultsText);\n    return React.createElement(_picker.MenuWrapper, {\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: menuStyle,\n      getToggleInstance: this.getToggleInstance,\n      onKeyDown: this.handleKeyDown\n    }, renderMenu ? renderMenu(menu) : menu, renderExtraFooter && renderExtraFooter());\n  };\n\n  _proto.renderSingleValue = function renderSingleValue() {\n    var value = this.getValue();\n    return this.getLabelByValue(value);\n  };\n\n  _proto.renderMultiValue = function renderMultiValue() {\n    var _this3 = this;\n\n    var _this$props11 = this.props,\n        multi = _this$props11.multi,\n        disabled = _this$props11.disabled;\n\n    if (!multi) {\n      return null;\n    }\n\n    var tags = this.getValue() || [];\n    return tags.map(function (tag) {\n      var _this3$getLabelByValu = _this3.getLabelByValue(tag),\n          isValid = _this3$getLabelByValu.isValid,\n          displayElement = _this3$getLabelByValu.displayElement;\n\n      if (!isValid) {\n        return null;\n      }\n\n      return React.createElement(_Tag.default, {\n        key: tag,\n        closable: !disabled,\n        title: typeof displayElement === 'string' ? displayElement : undefined,\n        onClose: _this3.handleRemoveItemByTag.bind(_this3, tag)\n      }, displayElement);\n    }).filter(function (item) {\n      return item !== null;\n    });\n  };\n\n  _proto.renderInputSearch = function renderInputSearch() {\n    var multi = this.props.multi;\n    var props = {\n      componentClass: 'input'\n    };\n\n    if (multi) {\n      props.componentClass = _InputAutosize.default; // 52 = 55 (right padding)  - 2 (border) - 6 (left padding)\n\n      props.inputStyle = {\n        maxWidth: this.state.maxWidth - 63\n      };\n    }\n\n    return React.createElement(_InputSearch.default, (0, _extends2.default)({}, props, {\n      inputRef: this.bindInputRef,\n      onChange: this.handleSearch,\n      value: this.state.open ? this.state.searchKeyword : ''\n    }));\n  };\n\n  _proto.render = function render() {\n    var _getToggleWrapperClas;\n\n    var _this$props12 = this.props,\n        disabled = _this$props12.disabled,\n        cleanable = _this$props12.cleanable,\n        locale = _this$props12.locale,\n        toggleComponentClass = _this$props12.toggleComponentClass,\n        style = _this$props12.style,\n        onEnter = _this$props12.onEnter,\n        onEntered = _this$props12.onEntered,\n        onExit = _this$props12.onExit,\n        onExited = _this$props12.onExited,\n        onClean = _this$props12.onClean,\n        searchable = _this$props12.searchable,\n        multi = _this$props12.multi,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props12, [\"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEnter\", \"onEntered\", \"onExit\", \"onExited\", \"onClean\", \"searchable\", \"multi\"]);\n    var unhandled = (0, _utils2.getUnhandledProps)(Dropdown, rest);\n\n    var _this$renderSingleVal = this.renderSingleValue(),\n        isValid = _this$renderSingleVal.isValid,\n        displayElement = _this$renderSingleVal.displayElement;\n\n    var tagElements = this.renderMultiValue();\n    var hasValue = multi ? !!(0, _get2.default)(tagElements, 'length') : isValid;\n    var classes = (0, _picker.getToggleWrapperClassName)('input', this.addPrefix, this.props, hasValue, (_getToggleWrapperClas = {}, _getToggleWrapperClas[this.addPrefix('tag')] = multi, _getToggleWrapperClas[this.addPrefix('focused')] = this.state.open, _getToggleWrapperClas));\n    var searching = !!this.state.searchKeyword && this.state.open;\n    var displaySearchInput = searchable && !disabled;\n    return React.createElement(_picker.PickerToggleTrigger, {\n      pickerProps: this.props,\n      innerRef: this.bindTriggerRef,\n      positionRef: this.bindPositionRef,\n      trigger: \"active\",\n      onEnter: (0, _utils2.createChainedFunction)(this.handleEnter, onEnter),\n      onEntered: (0, _utils2.createChainedFunction)(this.handleEntered, onEntered),\n      onExit: (0, _utils2.createChainedFunction)(this.handleExit, onExit),\n      onExited: (0, _utils2.createChainedFunction)(this.handleExited, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      onKeyDown: this.handleKeyDown,\n      onClick: this.handleClick,\n      ref: this.bindToggleWrapperRef\n    }, React.createElement(_picker.PickerToggle, (0, _extends2.default)({}, unhandled, {\n      ref: this.bindToggleRef,\n      componentClass: toggleComponentClass,\n      onClean: (0, _utils2.createChainedFunction)(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue\n    }), searching || multi && hasValue ? null : displayElement || locale.placeholder), React.createElement(\"div\", {\n      className: this.addPrefix('tag-wrapper')\n    }, tagElements, displaySearchInput && this.renderInputSearch())));\n  };\n\n  return Dropdown;\n}(React.Component);\n\n(0, _defineProperty2.default)(Dropdown, \"defaultProps\", {\n  data: [],\n  cacheData: [],\n  disabledItemValues: [],\n  maxHeight: 320,\n  valueKey: 'value',\n  labelKey: 'label',\n  locale: {\n    placeholder: 'Select',\n    noResultsText: 'No results found',\n    newItem: 'New item',\n    createOption: 'Create option \"{0}\"'\n  },\n  searchable: true,\n  cleanable: true,\n  menuAutoWidth: true,\n  placement: 'bottomLeft'\n});\n(0, _defineProperty2.default)(Dropdown, \"handledProps\", [\"block\", \"cacheData\", \"className\", \"classPrefix\", \"cleanable\", \"container\", \"containerPadding\", \"creatable\", \"data\", \"defaultOpen\", \"defaultValue\", \"disabled\", \"disabledItemValues\", \"groupBy\", \"labelKey\", \"locale\", \"maxHeight\", \"menuAutoWidth\", \"menuClassName\", \"menuStyle\", \"multi\", \"onChange\", \"onClean\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onGroupTitleClick\", \"onHide\", \"onOpen\", \"onSearch\", \"onSelect\", \"open\", \"placeholder\", \"placement\", \"renderExtraFooter\", \"renderMenu\", \"renderMenuGroup\", \"renderMenuItem\", \"renderValue\", \"searchable\", \"sort\", \"style\", \"toggleComponentClass\", \"value\", \"valueKey\"]);\nvar enhance = (0, _utils2.defaultProps)({\n  classPrefix: 'picker'\n});\n\nvar _default = enhance(Dropdown);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}