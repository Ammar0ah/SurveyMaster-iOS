{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = undefined;\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _domLib = require('dom-lib');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _getAnimationEnd = require('../utils/getAnimationEnd');\n\nvar _getAnimationEnd2 = _interopRequireDefault(_getAnimationEnd);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar UNMOUNTED = exports.UNMOUNTED = 0;\nvar EXITED = exports.EXITED = 1;\nvar ENTERING = exports.ENTERING = 2;\nvar ENTERED = exports.ENTERED = 3;\nvar EXITING = exports.EXITING = 4;\n\nfunction noop() {}\n\nvar Transition = function (_React$Component) {\n  _inherits(Transition, _React$Component);\n\n  function Transition(props) {\n    _classCallCheck(this, Transition);\n\n    var _this = _possibleConstructorReturn(this, (Transition.__proto__ || Object.getPrototypeOf(Transition)).call(this, props));\n\n    _this.animationEventListener = null;\n    _this.instanceElement = null;\n    _this.nextCallback = null;\n    _this.needsUpdate = null;\n    var initialStatus = void 0;\n\n    if (props.in) {\n      initialStatus = props.transitionAppear ? EXITED : ENTERED;\n    } else {\n      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n  /**\n   * Note that `handledProps` are generated automatically during\n   * build with `babel-plugin-transform-react-flow-handled-props`\n   */\n\n\n  _createClass(Transition, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.transitionAppear && this.props.in) {\n        this.performEnter(this.props);\n      }\n    }\n  }, {\n    key: 'getSnapshotBeforeUpdate',\n    value: function getSnapshotBeforeUpdate() {\n      if (!this.props.in || !this.props.unmountOnExit) {\n        this.needsUpdate = true;\n      }\n\n      return null;\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var status = this.state.status;\n      var unmountOnExit = this.props.unmountOnExit;\n\n      if (unmountOnExit && status === EXITED) {\n        if (this.props.in) {\n          this.performEnter(this.props);\n        } else {\n          /*eslint-disable*/\n          if (this.instanceElement) {\n            this.setState({\n              status: UNMOUNTED\n            });\n          }\n        }\n\n        return;\n      }\n\n      if (this.needsUpdate) {\n        this.needsUpdate = false;\n\n        if (this.props.in) {\n          if (status === EXITING || status === EXITED) {\n            this.performEnter(this.props);\n          }\n        } else if (status === ENTERING || status === ENTERED) {\n          this.performExit(this.props);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.cancelNextCallback();\n      this.instanceElement = null;\n    }\n  }, {\n    key: 'onTransitionEnd',\n    value: function onTransitionEnd(node, handler) {\n      this.setNextCallback(handler);\n\n      if (this.animationEventListener) {\n        this.animationEventListener.off();\n      }\n\n      if (node) {\n        var _props = this.props,\n            _timeout = _props.timeout,\n            _animation = _props.animation;\n        this.animationEventListener = (0, _domLib.on)(node, _animation ? (0, _getAnimationEnd2.default)() : _domLib.transition.end, this.nextCallback);\n\n        if (_timeout !== null) {\n          setTimeout(this.nextCallback, _timeout);\n        }\n      } else {\n        setTimeout(this.nextCallback, 0);\n      }\n    }\n  }, {\n    key: 'setNextCallback',\n    value: function setNextCallback(callback) {\n      var _this2 = this;\n\n      var active = true;\n\n      this.nextCallback = function (event) {\n        if (!active) {\n          return;\n        }\n\n        if (event) {\n          if (_this2.instanceElement === event.target) {\n            callback(event);\n            active = false;\n            _this2.nextCallback = null;\n          }\n\n          return;\n        }\n\n        callback(event);\n        active = false;\n        _this2.nextCallback = null;\n      };\n\n      this.nextCallback.cancel = function () {\n        active = false;\n      };\n\n      return this.nextCallback;\n    }\n  }, {\n    key: 'performEnter',\n    value: function performEnter(props) {\n      var _this3 = this;\n\n      var _ref = props || this.props,\n          onEnter = _ref.onEnter,\n          onEntering = _ref.onEntering,\n          onEntered = _ref.onEntered;\n\n      this.cancelNextCallback();\n      var node = (0, _reactDom.findDOMNode)(this);\n      this.instanceElement = node;\n      onEnter(node);\n      this.safeSetState({\n        status: ENTERING\n      }, function () {\n        onEntering(node);\n\n        _this3.onTransitionEnd(node, function () {\n          _this3.safeSetState({\n            status: ENTERED\n          }, function () {\n            onEntered(node);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'performExit',\n    value: function performExit(props) {\n      var _this4 = this;\n\n      var _ref2 = props || this.props,\n          onExit = _ref2.onExit,\n          onExiting = _ref2.onExiting,\n          onExited = _ref2.onExited;\n\n      this.cancelNextCallback();\n      var node = (0, _reactDom.findDOMNode)(this);\n      this.instanceElement = node;\n      onExit(node);\n      this.safeSetState({\n        status: EXITING\n      }, function () {\n        onExiting(node);\n\n        _this4.onTransitionEnd(node, function () {\n          _this4.safeSetState({\n            status: EXITED\n          }, function () {\n            onExited(node);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'cancelNextCallback',\n    value: function cancelNextCallback() {\n      if (this.nextCallback !== null) {\n        this.nextCallback.cancel();\n        this.nextCallback = null;\n      }\n    }\n  }, {\n    key: 'safeSetState',\n    value: function safeSetState(nextState, callback) {\n      if (this.instanceElement) {\n        this.setState(nextState, this.setNextCallback(callback));\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var status = this.state.status;\n\n      if (status === UNMOUNTED) {\n        return null;\n      }\n\n      var _props2 = this.props,\n          children = _props2.children,\n          className = _props2.className,\n          exitedClassName = _props2.exitedClassName,\n          enteringClassName = _props2.enteringClassName,\n          enteredClassName = _props2.enteredClassName,\n          exitingClassName = _props2.exitingClassName,\n          rest = _objectWithoutProperties(_props2, ['children', 'className', 'exitedClassName', 'enteringClassName', 'enteredClassName', 'exitingClassName']);\n\n      var childProps = (0, _omit3.default)(rest, Transition.handledProps);\n      var transitionClassName = void 0;\n\n      if (status === EXITED) {\n        transitionClassName = exitedClassName;\n      } else if (status === ENTERING) {\n        transitionClassName = enteringClassName;\n      } else if (status === ENTERED) {\n        transitionClassName = enteredClassName;\n      } else if (status === EXITING) {\n        transitionClassName = exitingClassName;\n      }\n\n      var child = React.Children.only(children);\n      return React.cloneElement(child, _extends({}, childProps, {\n        className: (0, _classnames2.default)(child.props.className, className, transitionClassName)\n      }));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.in && nextProps.unmountOnExit) {\n        if (prevState.status === UNMOUNTED) {\n          // Start enter transition in componentDidUpdate.\n          return {\n            status: EXITED\n          };\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return Transition;\n}(React.Component);\n\nTransition.displayName = 'Transition';\nTransition.defaultProps = {\n  timeout: 1000,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.handledProps = ['animation', 'children', 'className', 'enteredClassName', 'enteringClassName', 'exitedClassName', 'exitingClassName', 'in', 'onEnter', 'onEntered', 'onEntering', 'onExit', 'onExited', 'onExiting', 'timeout', 'transitionAppear', 'unmountOnExit'];\n(0, _reactLifecyclesCompat.polyfill)(Transition);\nexports.default = Transition;","map":null,"metadata":{},"sourceType":"script"}