{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction isEmpty(value) {\n  return typeof value === 'undefined' || value === null || value === '';\n}\n\nfunction checkRequired(value, trim) {\n  // String trim\n  if (trim && typeof value === 'string') {\n    value = value.replace(/(^\\s*)|(\\s*$)/g, '');\n  } // Array\n\n\n  if (Array.isArray(value)) {\n    return !!value.length;\n  }\n\n  return !isEmpty(value);\n}\n\nfunction getCheck(data) {\n  return function (value, rules) {\n    for (var i = 0; i < rules.length; i += 1) {\n      var _rules$i = rules[i],\n          onValid = _rules$i.onValid,\n          errorMessage = _rules$i.errorMessage;\n      var checkResult = onValid(value, data);\n\n      if (typeof checkResult === 'boolean' && !checkResult) {\n        return {\n          hasError: true,\n          errorMessage: errorMessage\n        };\n      } else if ((typeof checkResult === 'undefined' ? 'undefined' : _typeof(checkResult)) === 'object') {\n        return checkResult;\n      }\n    }\n\n    return null;\n  };\n}\n\nvar Type = function () {\n  function Type(name) {\n    _classCallCheck(this, Type);\n\n    this.name = name;\n    this.required = false;\n    this.requiredMessage = '';\n    this.trim = false;\n    this.rules = [];\n  }\n\n  Type.prototype.check = function check(value, data) {\n    if (this.required && !checkRequired(value, this.trim)) {\n      return {\n        hasError: true,\n        errorMessage: this.requiredMessage\n      };\n    }\n\n    var checkValue = getCheck(data);\n    var rules = [];\n    var customRules = [];\n    var checkStatus = null;\n    this.rules.forEach(function (item) {\n      if (item.customRule) {\n        customRules.push(item);\n      } else {\n        rules.push(item);\n      }\n    });\n    checkStatus = checkValue(value, customRules);\n\n    if (checkStatus !== null) {\n      return checkStatus;\n    }\n\n    if (!this.required && isEmpty(value)) {\n      return {\n        hasError: false\n      };\n    }\n\n    checkStatus = checkValue(value, rules);\n\n    if (checkStatus !== null) {\n      return checkStatus;\n    }\n\n    return {\n      hasError: false\n    };\n  };\n\n  Type.prototype.pushCheck = function pushCheck(onValid, errorMessage, customRule) {\n    errorMessage = errorMessage || this.rules[0].errorMessage;\n    this.rules.push({\n      onValid: onValid,\n      errorMessage: errorMessage,\n      customRule: customRule\n    });\n  };\n\n  Type.prototype.addRule = function addRule(onValid, errorMessage) {\n    this.pushCheck(onValid, errorMessage, true);\n    return this;\n  };\n\n  Type.prototype.isRequired = function isRequired(errorMessage) {\n    var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.required = true;\n    this.trim = trim;\n    this.requiredMessage = errorMessage;\n    return this;\n  };\n\n  return Type;\n}();\n\nexports.default = Type;","map":null,"metadata":{},"sourceType":"script"}