{"ast":null,"code":"var _jsxFileName = \"/Users/ammar0ah/Desktop/SurveyMaster/SurveyMaster/client/src/Containers/ShowSurveys/Survey questions List/SurveyFillList.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"../../../axios-requests\";\nimport Question from \"../../../Components/SurveyAnswersList/SurveyFill_Item/SurveyFill_item\";\nimport { previewSurvey, postAnswers } from \"../../../store/actions/answersAction\";\nimport ReactFullpage from \"@fullpage/react-fullpage\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../../../Components/UI/Loader/Loader\";\nimport styles from \"./SurveyFillList.module.css\";\nimport \"./style.css\";\nimport SubmitSection from \"../../../Components/SubmitSection/SubmitSection\";\n/**************** */\n\n/* using answersAction here  */\n\n/* whole questions for a single survey*/\n\n/************* */\n\nclass SurveyFillList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      redirect: false,\n      dataLoaded: false\n    };\n\n    this.dataLoadedHandler = newVal => {\n      this.setState({\n        dataLoaded: newVal\n      });\n    };\n\n    this.onSubmitHandler = () => {\n      console.log(JSON.stringify(this.props.answers));\n      this.props.postAnswers(this.props.answers, this.props.id);\n      if (this.props.error == null) window.setTimeout(() => this.props.history.push('/surveys'), 2000);\n    };\n\n    this.submitAnswers = () => {\n      let answer = this.state.answer;\n      axios.post(\"/filling/\", answer).then(response => console.log(response));\n    };\n\n    this.getAnswerHandler = event => {\n      this.setState({\n        answer: event.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.previewSurvey(this.props.match.params.id, this.dataLoadedHandler);\n  }\n\n  render() {\n    //    console.log(\"new State in SurveyFillList.jsx\", this.props)\n    const _this$props = this.props,\n          id = _this$props.id,\n          title = _this$props.title,\n          surveyPages = _this$props.surveyPages;\n    let Content = React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n    let tooltips = [];\n\n    if (this.state.dataLoaded) {\n      let Qs = surveyPages.map(page => {\n        return page.questions.map((question, i) => {\n          tooltips.push(question.title);\n          return React.createElement(Question, {\n            key: i,\n            id: question._id,\n            surveyId: id,\n            number: i + 1,\n            title: question.title,\n            answerObjectType: question.type,\n            content: question.content,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          });\n        });\n      });\n      Qs.push(React.createElement(SubmitSection, {\n        key: Qs.length,\n        ckicked: this.onSubmitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n      tooltips.push(\"Submit\");\n      Content = React.createElement(ReactFullpage, {\n        navigation: true,\n        navigationTooltips: tooltips,\n        render: () => {\n          return React.createElement(ReactFullpage.Wrapper, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }, Qs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: styles.Newlayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.SurveyTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, title)), Content);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    surveyPages: state.fillSurvey.pages,\n    id: state.fillSurvey._id,\n    date: state.fillSurvey.date,\n    title: state.fillSurvey.title,\n    answers: state.questionAnswer,\n    error: state.fillSurvey.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  previewSurvey,\n  postAnswers\n})(SurveyFillList);","map":{"version":3,"sources":["/Users/ammar0ah/Desktop/SurveyMaster/SurveyMaster/client/src/Containers/ShowSurveys/Survey questions List/SurveyFillList.jsx"],"names":["React","Component","axios","Question","previewSurvey","postAnswers","ReactFullpage","connect","Loader","styles","SubmitSection","SurveyFillList","state","redirect","dataLoaded","dataLoadedHandler","newVal","setState","onSubmitHandler","console","log","JSON","stringify","props","answers","id","error","window","setTimeout","history","push","submitAnswers","answer","post","then","response","getAnswerHandler","event","target","value","componentDidMount","match","params","render","title","surveyPages","Content","tooltips","Qs","map","page","questions","question","i","_id","type","content","length","Newlayout","SurveyTitle","mapStateToProps","fillSurvey","pages","date","questionAnswer"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"../../../axios-requests\";\nimport Question from \"../../../Components/SurveyAnswersList/SurveyFill_Item/SurveyFill_item\";\nimport {\n  previewSurvey,\n  postAnswers\n} from \"../../../store/actions/answersAction\";\nimport ReactFullpage from \"@fullpage/react-fullpage\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../../../Components/UI/Loader/Loader\";\nimport styles from \"./SurveyFillList.module.css\";\nimport \"./style.css\"\nimport SubmitSection from \"../../../Components/SubmitSection/SubmitSection\";\n/**************** */\n/* using answersAction here  */\n/* whole questions for a single survey*/\n/************* */\nclass SurveyFillList extends Component {\n  state = {\n    redirect: false,\n    dataLoaded: false\n  };\n  componentDidMount() {\n    this.props.previewSurvey(\n      this.props.match.params.id,\n      this.dataLoadedHandler\n    );\n  }\n  dataLoadedHandler = newVal => {\n    this.setState({\n      dataLoaded: newVal\n    });\n  };\n  onSubmitHandler = () => {\n    console.log(JSON.stringify(this.props.answers))\n    this.props.postAnswers(this.props.answers, this.props.id);\n    if(this.props.error == null)\n    window.setTimeout(() => this.props.history.push('/surveys'), 2000);\n  };\n  submitAnswers = () => {\n    let answer = this.state.answer;\n    axios.post(\"/filling/\", answer).then(response => console.log(response));\n  };\n  getAnswerHandler = event => {\n    this.setState({ answer: event.target.value });\n  };\n  render() {\n    //    console.log(\"new State in SurveyFillList.jsx\", this.props)\n    const { id, title, surveyPages } = this.props;\n    let Content = <Loader />;\n    let tooltips = [];\n    if (this.state.dataLoaded) {\n      let Qs = surveyPages.map(page => {\n        return page.questions.map((question, i) => {\n          tooltips.push(question.title)\n          return (\n            <Question\n              key={i}\n              id={question._id}\n              surveyId={id}\n              number={i + 1}\n              title={question.title}\n              answerObjectType={question.type}\n              content={question.content}\n            />\n          );\n        });\n      });\n  \n      Qs.push(<SubmitSection key={Qs.length} ckicked={this.onSubmitHandler} />);\n      tooltips.push(\"Submit\")\n      Content = (\n        <ReactFullpage\n        navigation\n        navigationTooltips = {tooltips}\n          render={() => {\n            return <ReactFullpage.Wrapper>{Qs}</ReactFullpage.Wrapper>;\n          }}\n        />\n      );\n    }\n    return (\n      <div className={styles.Newlayout}>\n        <div className={styles.SurveyTitle}>\n          <h1>{title}</h1>\n        </div>\n        {Content}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    surveyPages: state.fillSurvey.pages,\n    id: state.fillSurvey._id,\n    date: state.fillSurvey.date,\n    title: state.fillSurvey.title,\n    answers: state.questionAnswer,\n    error:state.fillSurvey.error\n  };\n};\nexport default connect(\n  mapStateToProps,\n  { previewSurvey, postAnswers }\n)(SurveyFillList);\n"]},"metadata":{},"sourceType":"module"}