{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _utils = require(\"rsuite-utils/lib/utils\");\n\nvar _domLib = require(\"dom-lib\");\n\nvar INITIAL_PADDING = 12;\nvar PADDING = 16;\n\nvar TreeNode =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(TreeNode, _React$Component);\n\n  function TreeNode() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleTreeToggle\", function (event) {\n      var _this$props = _this.props,\n          onTreeToggle = _this$props.onTreeToggle,\n          layer = _this$props.layer,\n          nodeData = _this$props.nodeData; // 异步加载数据自定义loading图标时，阻止原生冒泡，不触发 document.click\n\n      if (event.nativeEvent && event.nativeEvent.stopImmediatePropagation) {\n        event.nativeEvent.stopImmediatePropagation && event.nativeEvent.stopImmediatePropagation();\n      }\n\n      onTreeToggle && onTreeToggle(nodeData, layer, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (event) {\n      var _this$props2 = _this.props,\n          classPrefix = _this$props2.classPrefix,\n          onSelect = _this$props2.onSelect,\n          layer = _this$props2.layer,\n          disabled = _this$props2.disabled,\n          nodeData = _this$props2.nodeData;\n\n      if (disabled) {\n        return;\n      }\n\n      if (event.target instanceof HTMLElement) {\n        if ((0, _domLib.hasClass)(event.target.parentNode, classPrefix + \"-node-expand-icon-wrapper\")) {\n          return;\n        }\n      }\n\n      onSelect && onSelect(nodeData, layer, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"renderIcon\", function () {\n      var _classNames;\n\n      var _this$props3 = _this.props,\n          classPrefix = _this$props3.classPrefix,\n          expand = _this$props3.expand,\n          onRenderTreeIcon = _this$props3.onRenderTreeIcon,\n          hasChildren = _this$props3.hasChildren,\n          nodeData = _this$props3.nodeData;\n      var expandIconClasses = (0, _classnames.default)(classPrefix + \"-node-expand-icon icon\", (_classNames = {}, _classNames[classPrefix + \"-node-expanded\"] = !!expand, _classNames));\n      var expandIcon = React.createElement(\"i\", {\n        className: expandIconClasses\n      });\n\n      if (nodeData !== undefined && typeof onRenderTreeIcon === 'function') {\n        var customIcon = onRenderTreeIcon(nodeData);\n        expandIcon = customIcon !== null ? React.createElement(\"div\", {\n          className: classPrefix + \"-custom-icon\"\n        }, customIcon) : expandIcon;\n      }\n\n      return hasChildren ? React.createElement(\"div\", {\n        role: \"button\",\n        tabIndex: \"-1\",\n        \"data-ref\": nodeData.refKey,\n        className: classPrefix + \"-node-expand-icon-wrapper\",\n        onClick: _this.handleTreeToggle\n      }, expandIcon) : null;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"renderLabel\", function () {\n      var _this$props4 = _this.props,\n          nodeData = _this$props4.nodeData,\n          onRenderTreeNode = _this$props4.onRenderTreeNode,\n          label = _this$props4.label,\n          classPrefix = _this$props4.classPrefix,\n          layer = _this$props4.layer;\n      var newLabel = label;\n      newLabel = typeof onRenderTreeNode === 'function' ? onRenderTreeNode(nodeData) : label;\n      var key = nodeData ? nodeData.refKey : '';\n      return React.createElement(\"span\", {\n        className: classPrefix + \"-node-label\",\n        title: _this.getTitle(),\n        \"data-layer\": layer,\n        \"data-key\": key,\n        role: \"button\",\n        tabIndex: \"-1\",\n        onClick: _this.handleSelect\n      }, newLabel);\n    });\n    return _this;\n  }\n\n  var _proto = TreeNode.prototype;\n\n  _proto.getTitle = function getTitle() {\n    var label = this.props.label;\n\n    if (typeof label === 'string') {\n      return label;\n    } else if (React.isValidElement(label)) {\n      var nodes = (0, _utils.reactToString)(label);\n      return nodes.join('');\n    }\n  }\n  /**\n   * 展开收缩节点\n   */\n  ;\n\n  _proto.render = function render() {\n    var _classNames2;\n\n    var _this$props5 = this.props,\n        style = _this$props5.style,\n        classPrefix = _this$props5.classPrefix,\n        active = _this$props5.active,\n        layer = _this$props5.layer,\n        disabled = _this$props5.disabled,\n        visible = _this$props5.visible;\n    var disabledClass = classPrefix + \"-node-disabled\";\n    var activeClass = classPrefix + \"-node-active\";\n    var classes = (0, _classnames.default)(classPrefix + \"-node\", (_classNames2 = {\n      'text-muted': disabled\n    }, _classNames2[disabledClass] = disabled, _classNames2[activeClass] = active, _classNames2));\n    var styles = {\n      paddingLeft: layer * PADDING + INITIAL_PADDING\n    };\n    return visible ? React.createElement(\"div\", {\n      style: (0, _extends2.default)({}, style, styles),\n      className: classes\n    }, this.renderIcon(), this.renderLabel()) : null;\n  };\n\n  return TreeNode;\n}(React.Component);\n\n(0, _defineProperty2.default)(TreeNode, \"defaultProps\", {\n  visible: true\n});\n(0, _defineProperty2.default)(TreeNode, \"handledProps\", [\"active\", \"classPrefix\", \"disabled\", \"expand\", \"hasChildren\", \"label\", \"layer\", \"nodeData\", \"onRenderTreeIcon\", \"onRenderTreeNode\", \"onSelect\", \"onTreeToggle\", \"style\", \"value\", \"visible\"]);\nvar _default = TreeNode;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}