{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _BrowserDetection = require(\"../utils/BrowserDetection\");\n\nvar _utils = require(\"../utils\");\n\nvar sizerStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  visibility: 'hidden',\n  height: 0,\n  overflow: 'scroll',\n  whiteSpace: 'pre'\n};\n\nvar copyStyles = function copyStyles(styles, node) {\n  node.style.fontSize = styles.fontSize;\n  node.style.fontFamily = styles.fontFamily;\n  node.style.fontWeight = styles.fontWeight;\n  node.style.fontStyle = styles.fontStyle;\n  node.style.letterSpacing = styles.letterSpacing;\n  node.style.textTransform = styles.textTransform;\n};\n\nvar InputAutosize =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(InputAutosize, _React$Component);\n\n  function InputAutosize(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"mounted\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"input\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"placeHolderSizer\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"sizer\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindInputRef\", function (ref) {\n      _this.input = ref;\n      var inputRef = _this.props.inputRef;\n      inputRef && inputRef(ref);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindPlaceHolderSizerRef\", function (ref) {\n      _this.placeHolderSizer = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindSizerRef\", function (ref) {\n      _this.sizer = ref;\n    });\n    _this.state = {\n      inputWidth: props.minWidth\n    };\n    return _this;\n  }\n\n  var _proto = InputAutosize.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.copyInputStyles();\n    this.updateInputWidth();\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var inputWidth = this.state.inputWidth;\n    var onAutosize = this.props.onAutosize;\n\n    if (prevState.inputWidth !== inputWidth) {\n      onAutosize && onAutosize(inputWidth);\n    }\n\n    this.updateInputWidth();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  _proto.focus = function focus() {\n    if (this.input) {\n      this.input.focus();\n    }\n  };\n\n  _proto.blur = function blur() {\n    if (this.input) {\n      this.input.blur();\n    }\n  };\n\n  _proto.copyInputStyles = function copyInputStyles() {\n    if (!this.mounted || !window.getComputedStyle) {\n      return;\n    }\n\n    var inputStyles = this.input && window.getComputedStyle(this.input);\n\n    if (!inputStyles) {\n      return;\n    }\n\n    if (this.sizer) {\n      copyStyles(inputStyles, this.sizer);\n    }\n\n    if (this.placeHolderSizer) {\n      copyStyles(inputStyles, this.placeHolderSizer);\n    }\n  };\n\n  _proto.updateInputWidth = function updateInputWidth() {\n    if (!this.mounted || !this.sizer || typeof this.sizer.scrollWidth === 'undefined') {\n      return;\n    }\n\n    var _this$props = this.props,\n        minWidth = _this$props.minWidth,\n        placeholder = _this$props.placeholder,\n        value = _this$props.value;\n    var newInputWidth;\n\n    if (placeholder && !value && this.placeHolderSizer) {\n      newInputWidth = Math.max(this.sizer.scrollWidth, this.placeHolderSizer.scrollWidth) + 2;\n    } else {\n      newInputWidth = this.sizer.scrollWidth + 2;\n    }\n\n    if (newInputWidth < minWidth) {\n      newInputWidth = minWidth;\n    }\n\n    if (newInputWidth !== this.state.inputWidth) {\n      this.setState({\n        inputWidth: newInputWidth\n      });\n    }\n  };\n\n  _proto.renderStyles = function renderStyles() {\n    var inputId = this.props.inputId;\n    return (0, _BrowserDetection.isIE)() ? React.createElement(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: \"input#\" + inputId + \"::-ms-clear {display: none;}\"\n      }\n    }) : null;\n  };\n\n  _proto.render = function render() {\n    var inputWidth = this.state.inputWidth;\n    var _this$props2 = this.props,\n        defaultValue = _this$props2.defaultValue,\n        value = _this$props2.value,\n        style = _this$props2.style,\n        className = _this$props2.className,\n        placeholder = _this$props2.placeholder,\n        inputClassName = _this$props2.inputClassName,\n        inputStyle = _this$props2.inputStyle,\n        inputId = _this$props2.inputId;\n    var sizerValue = [defaultValue, value, ''].reduce(function (previousValue, currentValue) {\n      if (previousValue !== null && previousValue !== undefined) {\n        return previousValue;\n      }\n\n      return currentValue;\n    });\n    var wrapperStyle = (0, _extends2.default)({}, style);\n\n    if (!wrapperStyle.display) {\n      wrapperStyle.display = 'inline-block';\n    }\n\n    var nextInputStyle = (0, _extends2.default)({\n      boxSizing: 'content-box',\n      width: inputWidth + \"px\"\n    }, inputStyle);\n\n    var _partitionHTMLProps = (0, _utils.partitionHTMLProps)(this.props),\n        htmlInputProps = _partitionHTMLProps[0];\n\n    htmlInputProps.className = inputClassName;\n    htmlInputProps.id = inputId;\n    htmlInputProps.style = nextInputStyle;\n    return React.createElement(\"div\", {\n      className: className,\n      style: wrapperStyle\n    }, this.renderStyles(), React.createElement(\"input\", (0, _extends2.default)({}, htmlInputProps, {\n      ref: this.bindInputRef,\n      type: \"text\"\n    })), React.createElement(\"div\", {\n      ref: this.bindSizerRef,\n      style: sizerStyle\n    }, sizerValue), placeholder ? React.createElement(\"div\", {\n      ref: this.bindPlaceHolderSizerRef,\n      style: sizerStyle\n    }, placeholder) : null);\n  };\n\n  return InputAutosize;\n}(React.Component);\n\n(0, _defineProperty2.default)(InputAutosize, \"defaultProps\", {\n  minWidth: 1,\n  inputId: '_' + Math.random().toString(36).substr(2, 12)\n});\n(0, _defineProperty2.default)(InputAutosize, \"handledProps\", [\"className\", \"defaultValue\", \"inputClassName\", \"inputId\", \"inputRef\", \"inputStyle\", \"minWidth\", \"onAutosize\", \"onChange\", \"placeholder\", \"style\", \"value\"]);\nvar _default = InputAutosize;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}