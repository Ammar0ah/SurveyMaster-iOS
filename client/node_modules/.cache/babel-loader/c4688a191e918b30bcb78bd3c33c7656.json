{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _kebabCase2 = _interopRequireDefault(require(\"lodash/kebabCase\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _utils = require(\"rsuite-utils/lib/utils\");\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _DropdownMenu = _interopRequireDefault(require(\"./DropdownMenu\"));\n\nvar _Checkbox = _interopRequireDefault(require(\"../Checkbox\"));\n\nvar _utils2 = _interopRequireDefault(require(\"./utils\"));\n\nvar _utils3 = require(\"../utils\");\n\nvar _treeUtils = require(\"../utils/treeUtils\");\n\nvar _picker = require(\"../_picker\");\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"isControlled\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleCheck\", function (item, event, checked) {\n      var _this$props = _this.props,\n          valueKey = _this$props.valueKey,\n          onChange = _this$props.onChange,\n          cascade = _this$props.cascade,\n          uncheckableItemValues = _this$props.uncheckableItemValues;\n      var itemValue = item[valueKey];\n      var value = [];\n\n      if (cascade) {\n        value = Dropdown.utils.splitValue(item, checked, _this.getValue(), uncheckableItemValues).value;\n      } else {\n        value = _this.getValue();\n\n        if (checked) {\n          value.push(itemValue);\n        } else {\n          value = value.filter(function (n) {\n            return n !== itemValue;\n          });\n        }\n      }\n\n      _this.setState({\n        value: value\n      });\n\n      onChange && onChange(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleChangeForSearchItem\", function (value, checked, event) {\n      _this.handleCheck(value, event, checked);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (node, cascadeItems, activePaths, event) {\n      var _this$props2 = _this.props,\n          onSelect = _this$props2.onSelect,\n          valueKey = _this$props2.valueKey;\n\n      _this.setState({\n        selectNode: node,\n        items: cascadeItems,\n        activePaths: activePaths\n      });\n\n      onSelect && onSelect(node, activePaths, (0, _picker.createConcatChildrenFunction)(node, node[valueKey]), event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSearch\", function (searchKeyword, event) {\n      var onSearch = _this.props.onSearch;\n\n      _this.setState({\n        searchKeyword: searchKeyword\n      });\n\n      onSearch && onSearch(searchKeyword, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"trigger\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTriggerRef\", function (ref) {\n      _this.trigger = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"menuContainer\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindMenuContainerRef\", function (ref) {\n      _this.menuContainer = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"container\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindContainerRef\", function (ref) {\n      _this.container = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"closeDropdown\", function () {\n      if (_this.trigger) {\n        _this.trigger.hide();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClean\", function (event) {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          onChange = _this$props3.onChange,\n          data = _this$props3.data;\n\n      if (disabled) {\n        return;\n      }\n\n      var nextState = {\n        items: [data],\n        value: [],\n        selectNode: null,\n        activePaths: []\n      };\n\n      _this.setState(nextState, function () {\n        onChange && onChange([], event);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleEntered\", function () {\n      var onOpen = _this.props.onOpen;\n      onOpen && onOpen();\n\n      _this.setState({\n        active: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleExit\", function () {\n      var onClose = _this.props.onClose;\n      onClose && onClose();\n\n      _this.setState({\n        searchKeyword: '',\n        active: false\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils3.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"renderSearchRow\", function (item, key) {\n      var _extends2, _classNames;\n\n      var _this$props4 = _this.props,\n          labelKey = _this$props4.labelKey,\n          valueKey = _this$props4.valueKey,\n          cascade = _this$props4.cascade,\n          _this$props4$disabled = _this$props4.disabledItemValues,\n          disabledItemValues = _this$props4$disabled === void 0 ? [] : _this$props4$disabled;\n      var searchKeyword = _this.state.searchKeyword;\n\n      var values = _this.getValue();\n\n      var nodes = (0, _treeUtils.getNodeParents)(item);\n      var regx = new RegExp(searchKeyword, 'ig');\n      var labelElements = [];\n      var a = item[labelKey].split(regx);\n      var b = item[labelKey].match(regx);\n\n      for (var i = 0; i < a.length; i++) {\n        labelElements.push(a[i]);\n\n        if (b[i]) {\n          labelElements.push(React.createElement(\"strong\", {\n            key: i\n          }, b[i]));\n        }\n      }\n\n      nodes.push((0, _extends3.default)({}, item, (_extends2 = {}, _extends2[labelKey] = labelElements, _extends2)));\n      var active = values.some(function (value) {\n        return nodes.some(function (node) {\n          return node[valueKey] === value;\n        });\n      });\n      var disabled = disabledItemValues.some(function (value) {\n        return nodes.some(function (node) {\n          return node[valueKey] === value;\n        });\n      });\n      var itemClasses = (0, _classnames.default)(_this.addPrefix('cascader-row'), (_classNames = {}, _classNames[_this.addPrefix('cascader-row-disabled')] = disabled, _classNames));\n      return React.createElement(\"div\", {\n        key: key,\n        className: itemClasses\n      }, React.createElement(_Checkbox.default, {\n        disabled: disabled,\n        checked: active,\n        value: item,\n        indeterminate: cascade && !active && Dropdown.utils.isSomeChildChecked(item, values),\n        onChange: _this.handleChangeForSearchItem\n      }, React.createElement(\"span\", {\n        className: _this.addPrefix('cascader-cols')\n      }, nodes.map(function (node, index) {\n        return React.createElement(\"span\", {\n          key: \"col-\" + index,\n          className: _this.addPrefix('cascader-col')\n        }, node[labelKey]);\n      }))));\n    });\n    var _data = props.data,\n        _value = props.value,\n        defaultValue = props.defaultValue;\n    var initState = {\n      data: _data,\n      searchKeyword: '',\n      prevValue: _value,\n      value: defaultValue,\n      selectNode: null,\n\n      /**\n       * 选中值的路径\n       */\n      activePaths: []\n    };\n    Dropdown.utils = (0, _utils2.default)(props);\n    var flattenData = (0, _treeUtils.flattenTree)(_data, props.childrenKey);\n    _this.isControlled = !(0, _isUndefined2.default)(_value);\n    _this.state = (0, _extends3.default)({}, initState, {\n      flattenData: flattenData,\n\n      /**\n       * 用于展示面板的数据列表，是一个二维的数组\n       * 是通过 data 树结构转换成的二维的数组，其中只包含页面上展示的数据\n       */\n      items: [flattenData.filter(function (item) {\n        return !item.parent;\n      })]\n    }, Dropdown.getCascadeState(props, flattenData));\n    return _this;\n  }\n\n  Dropdown.getCascadeState = function getCascadeState(nextProps, flattenData, nextValue) {\n    var data = nextProps.data,\n        cascade = nextProps.cascade,\n        value = nextProps.value,\n        defaultValue = nextProps.defaultValue,\n        uncheckableItemValues = nextProps.uncheckableItemValues;\n    var cascadeValue = nextValue || value || defaultValue || [];\n\n    if (cascade && data) {\n      cascadeValue = Dropdown.utils.transformValue(cascadeValue, flattenData, uncheckableItemValues);\n    }\n\n    return {\n      value: cascadeValue\n    };\n  };\n\n  Dropdown.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var data = nextProps.data,\n        valueKey = nextProps.valueKey,\n        childrenKey = nextProps.childrenKey;\n    var value = nextProps.value || prevState.value || [];\n    var prevValue = prevState.prevValue,\n        flattenData = prevState.flattenData,\n        _prevState$selectNode = prevState.selectNode,\n        selectNode = _prevState$selectNode === void 0 ? {} : _prevState$selectNode,\n        items = prevState.items;\n    var isChangedData = data !== prevState.data;\n    var isChangedValue = !(0, _utils.shallowEqualArray)(prevValue, nextProps.value);\n\n    if (isChangedData || isChangedValue) {\n      if (isChangedData) {\n        flattenData = (0, _treeUtils.flattenTree)(data, nextProps.childrenKey);\n      }\n      /**\n       * 如果更新了 data,\n       * 首先获取到被点击节点的值 `selectNode`， 然后再拿到新增后的 `newChildren`,\n       */\n\n\n      var nextSelectNode = flattenData.find(function (n) {\n        return selectNode && n[valueKey] === selectNode[valueKey];\n      });\n      var newChildren = ((0, _get2.default)(nextSelectNode, childrenKey) || []).map(function (item) {\n        item.parent = nextSelectNode;\n        return item;\n      });\n\n      if (newChildren.length && items) {\n        items[items.length - 1] = newChildren;\n      }\n\n      var nextState = (0, _extends3.default)({\n        selectNode: nextSelectNode,\n        flattenData: flattenData,\n        data: data,\n        items: Dropdown.utils.getItems(nextSelectNode, flattenData)\n      }, Dropdown.getCascadeState(nextProps, flattenData, value));\n\n      if (isChangedValue) {\n        nextState.prevValue = nextProps.value;\n      }\n\n      return nextState;\n    }\n\n    return null;\n  };\n\n  var _proto = Dropdown.prototype;\n\n  _proto.getValue = function getValue() {\n    var value = this.state.value;\n    return value || [];\n  };\n\n  _proto.getSearchResult = function getSearchResult() {\n    var _this$props5 = this.props,\n        labelKey = _this$props5.labelKey,\n        valueKey = _this$props5.valueKey,\n        _this$props5$unchecka = _this$props5.uncheckableItemValues,\n        uncheckableItemValues = _this$props5$unchecka === void 0 ? [] : _this$props5$unchecka;\n    var _this$state = this.state,\n        searchKeyword = _this$state.searchKeyword,\n        flattenData = _this$state.flattenData;\n    var items = [];\n    var result = flattenData.filter(function (item) {\n      if (uncheckableItemValues.some(function (value) {\n        return item[valueKey] === value;\n      })) {\n        return false;\n      }\n\n      if (item[labelKey].match(new RegExp(searchKeyword, 'i'))) {\n        return true;\n      }\n\n      return false;\n    });\n\n    for (var i = 0; i < result.length; i++) {\n      items.push(result[i]);\n\n      if (i === 99) {\n        return items;\n      }\n    }\n\n    return items;\n  };\n\n  _proto.renderSearchResultPanel = function renderSearchResultPanel() {\n    var locale = this.props.locale;\n    var searchKeyword = this.state.searchKeyword;\n\n    if (searchKeyword === '') {\n      return null;\n    }\n\n    var items = this.getSearchResult();\n    return React.createElement(\"div\", {\n      className: this.addPrefix('cascader-search-panel')\n    }, items.length ? items.map(this.renderSearchRow) : React.createElement(\"div\", {\n      className: this.addPrefix('none')\n    }, locale.noResultsText));\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this$state2 = this.state,\n        items = _this$state2.items,\n        activePaths = _this$state2.activePaths,\n        searchKeyword = _this$state2.searchKeyword;\n    var _this$props6 = this.props,\n        renderMenu = _this$props6.renderMenu,\n        placement = _this$props6.placement,\n        renderExtraFooter = _this$props6.renderExtraFooter,\n        menuClassName = _this$props6.menuClassName,\n        menuStyle = _this$props6.menuStyle,\n        classPrefix = _this$props6.classPrefix,\n        searchable = _this$props6.searchable,\n        locale = _this$props6.locale;\n    var classes = (0, _classnames.default)(this.addPrefix('cascader-menu'), this.addPrefix('multi-cascader-menu'), this.addPrefix(\"placement-\" + (0, _kebabCase2.default)(placement)), menuClassName);\n    var menuProps = (0, _pick2.default)(this.props, _DropdownMenu.default.handledProps);\n    return React.createElement(_picker.MenuWrapper, {\n      className: classes,\n      style: menuStyle\n    }, searchable && React.createElement(_picker.SearchBar, {\n      placeholder: locale.searchPlaceholder,\n      onChange: this.handleSearch,\n      value: searchKeyword\n    }), this.renderSearchResultPanel(), searchKeyword === '' && React.createElement(_DropdownMenu.default, (0, _extends3.default)({}, menuProps, {\n      classPrefix: classPrefix,\n      ref: this.bindMenuContainerRef,\n      cascadeItems: items,\n      cascadePathItems: activePaths,\n      value: this.getValue(),\n      onSelect: this.handleSelect,\n      onCheck: this.handleCheck,\n      renderMenu: renderMenu\n    })), renderExtraFooter && renderExtraFooter());\n  };\n\n  _proto.render = function render() {\n    var _this$props7 = this.props,\n        valueKey = _this$props7.valueKey,\n        labelKey = _this$props7.labelKey,\n        childrenKey = _this$props7.childrenKey,\n        placeholder = _this$props7.placeholder,\n        renderValue = _this$props7.renderValue,\n        disabled = _this$props7.disabled,\n        cleanable = _this$props7.cleanable,\n        locale = _this$props7.locale,\n        toggleComponentClass = _this$props7.toggleComponentClass,\n        style = _this$props7.style,\n        onEnter = _this$props7.onEnter,\n        onExited = _this$props7.onExited,\n        onClean = _this$props7.onClean,\n        countable = _this$props7.countable,\n        cascade = _this$props7.cascade,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props7, [\"valueKey\", \"labelKey\", \"childrenKey\", \"placeholder\", \"renderValue\", \"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEnter\", \"onExited\", \"onClean\", \"countable\", \"cascade\"]);\n    var flattenData = this.state.flattenData;\n    var unhandled = (0, _utils3.getUnhandledProps)(Dropdown, rest);\n    var value = this.getValue();\n    var selectedItems = flattenData.filter(function (item) {\n      return value.some(function (v) {\n        return v === item[valueKey];\n      });\n    }) || [];\n    var count = selectedItems.length;\n    var hasValue = !!count;\n    var selectedElement = placeholder;\n\n    if (count > 0) {\n      selectedElement = React.createElement(_picker.SelectedElement, {\n        selectedItems: selectedItems,\n        countable: countable,\n        valueKey: valueKey,\n        labelKey: labelKey,\n        childrenKey: childrenKey,\n        prefix: this.addPrefix,\n        cascade: cascade,\n        locale: locale\n      });\n\n      if (renderValue) {\n        selectedElement = renderValue(value, selectedItems, selectedElement);\n      }\n    }\n\n    var classes = (0, _picker.getToggleWrapperClassName)('cascader', this.addPrefix, this.props, hasValue);\n    return React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      tabIndex: -1,\n      role: \"menu\",\n      ref: this.bindContainerRef\n    }, React.createElement(_picker.PickerToggleTrigger, {\n      pickerProps: this.props,\n      innerRef: this.bindTriggerRef,\n      onEnter: (0, _utils3.createChainedFunction)(this.handleEntered, onEnter),\n      onExit: (0, _utils3.createChainedFunction)(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(_picker.PickerToggle, (0, _extends3.default)({}, unhandled, {\n      componentClass: toggleComponentClass,\n      onClean: (0, _utils3.createChainedFunction)(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active\n    }), selectedElement || locale.placeholder)));\n  };\n\n  return Dropdown;\n}(React.Component);\n\n(0, _defineProperty2.default)(Dropdown, \"defaultProps\", {\n  cascade: true,\n  appearance: 'default',\n  data: [],\n  disabledItemValues: [],\n  uncheckableItemValues: [],\n  childrenKey: 'children',\n  valueKey: 'value',\n  labelKey: 'label',\n  locale: {\n    placeholder: 'Select',\n    checkAll: 'All',\n    searchPlaceholder: 'Search',\n    noResultsText: 'No results found'\n  },\n  cleanable: true,\n  searchable: true,\n  countable: true,\n  placement: 'bottomLeft'\n});\n(0, _defineProperty2.default)(Dropdown, \"utils\", {});\n(0, _defineProperty2.default)(Dropdown, \"handledProps\", [\"appearance\", \"block\", \"cascade\", \"childrenKey\", \"className\", \"classPrefix\", \"cleanable\", \"container\", \"containerPadding\", \"countable\", \"data\", \"defaultOpen\", \"defaultValue\", \"disabled\", \"disabledItemValues\", \"labelKey\", \"locale\", \"menuClassName\", \"menuHeight\", \"menuStyle\", \"menuWidth\", \"onChange\", \"onClean\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onHide\", \"onOpen\", \"onSearch\", \"onSelect\", \"open\", \"placeholder\", \"placement\", \"renderExtraFooter\", \"renderMenu\", \"renderMenuItem\", \"renderValue\", \"searchable\", \"style\", \"toggleComponentClass\", \"uncheckableItemValues\", \"value\", \"valueKey\"]);\n(0, _reactLifecyclesCompat.polyfill)(Dropdown);\nvar enhance = (0, _utils3.defaultProps)({\n  classPrefix: 'picker'\n});\n\nvar _default = enhance(Dropdown);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}