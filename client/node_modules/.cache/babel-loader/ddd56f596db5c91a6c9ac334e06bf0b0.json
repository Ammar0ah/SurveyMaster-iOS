{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _kebabCase2 = _interopRequireDefault(require(\"lodash/kebabCase\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _rsuiteIntl = require(\"rsuite-intl\");\n\nvar _utils = require(\"../utils\");\n\nvar _Toolbar = _interopRequireDefault(require(\"./Toolbar\"));\n\nvar _DatePicker = _interopRequireDefault(require(\"./DatePicker\"));\n\nvar _setTimingMargin = _interopRequireDefault(require(\"./setTimingMargin\"));\n\nvar _Type = _interopRequireDefault(require(\"./Type\"));\n\nvar _picker = require(\"../_picker\");\n\nvar _compare_asc = _interopRequireDefault(require(\"date-fns/compare_asc\"));\n\nvar _end_of_month = _interopRequireDefault(require(\"date-fns/end_of_month\"));\n\nvar _start_of_month = _interopRequireDefault(require(\"date-fns/start_of_month\"));\n\nvar _end_of_week = _interopRequireDefault(require(\"date-fns/end_of_week\"));\n\nvar _start_of_week = _interopRequireDefault(require(\"date-fns/start_of_week\"));\n\nvar _end_of_iso_week = _interopRequireDefault(require(\"date-fns/end_of_iso_week\"));\n\nvar _start_of_iso_week = _interopRequireDefault(require(\"date-fns/start_of_iso_week\"));\n\nvar _add_months = _interopRequireDefault(require(\"date-fns/add_months\"));\n\nvar _is_same_month = _interopRequireDefault(require(\"date-fns/is_same_month\"));\n\nvar _is_same_day = _interopRequireDefault(require(\"date-fns/is_same_day\"));\n\nvar _is_after = _interopRequireDefault(require(\"date-fns/is_after\"));\n\nvar _is_before = _interopRequireDefault(require(\"date-fns/is_before\"));\n\nvar _add_days = _interopRequireDefault(require(\"date-fns/add_days\"));\n\nvar _format = _interopRequireDefault(require(\"date-fns/format\"));\n\nfunction getCalendarDate(value) {\n  if (value === void 0) {\n    value = [];\n  }\n\n  var calendarDate = [new Date(), (0, _add_months.default)(new Date(), 1)]; // Update calendarDate if the value is not null\n\n  if (value[0] && value[1]) {\n    var sameMonth = (0, _is_same_month.default)(value[0], value[1]);\n    calendarDate = [value[0], sameMonth ? (0, _add_months.default)(value[1], 1) : value[1]];\n  }\n\n  return calendarDate;\n}\n\nvar DateRangePicker =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(DateRangePicker, _React$Component);\n\n  DateRangePicker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var value = nextProps.value;\n\n    if (typeof value === 'undefined') {\n      return null;\n    }\n\n    if (value[0] && !(0, _is_same_day.default)(value[0], prevState.value[0]) || value[1] && !(0, _is_same_day.default)(value[1], prevState.value[1])) {\n      return {\n        value: value,\n        selectValue: value,\n        calendarDate: getCalendarDate(value)\n      };\n    }\n\n    return null;\n  };\n\n  function DateRangePicker(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getValue\", function () {\n      var value = _this.props.value;\n\n      if (typeof value !== 'undefined') {\n        return value;\n      }\n\n      return _this.state.value || [];\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getWeekHoverRange\", function (date) {\n      var isoWeek = _this.props.isoWeek;\n\n      if (isoWeek) {\n        // set to the first day of this week according to ISO 8601, 12:00 am\n        return [(0, _start_of_iso_week.default)(date), (0, _end_of_iso_week.default)(date)];\n      }\n\n      return [(0, _start_of_week.default)(date), (0, _end_of_week.default)(date)];\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getMonthHoverRange\", function (date) {\n      return [(0, _start_of_month.default)(date), (0, _end_of_month.default)(date)];\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleChangeCalendarDate\", function (index, date) {\n      var calendarDate = _this.state.calendarDate;\n      calendarDate[index] = date;\n\n      _this.setState({\n        calendarDate: calendarDate\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleShortcutPageDate\", function (value, closeOverlay) {\n      _this.updateValue(value, closeOverlay);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleOK\", function (event) {\n      var onOk = _this.props.onOk;\n\n      _this.updateValue();\n\n      onOk && onOk(_this.state.selectValue, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleChangeSelectValue\", function (date) {\n      var _this$state = _this.state,\n          selectValue = _this$state.selectValue,\n          doneSelected = _this$state.doneSelected;\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          oneTap = _this$props.oneTap;\n      var nextValue = [];\n\n      var nextHoverValue = _this.getHoverRange(date);\n\n      if (doneSelected) {\n        if (nextHoverValue.length) {\n          nextValue = [nextHoverValue[0], nextHoverValue[1], date];\n          nextHoverValue = [nextHoverValue[0], nextHoverValue[1], date];\n        } else {\n          nextValue = [date, undefined, date];\n        }\n      } else {\n        if (nextHoverValue.length) {\n          nextValue = [selectValue[0], selectValue[1]];\n        } else {\n          nextValue = [selectValue[0], date];\n        }\n\n        if ((0, _is_after.default)(nextValue[0], nextValue[1])) {\n          nextValue.reverse();\n        }\n\n        nextValue[0] = (0, _setTimingMargin.default)(nextValue[0]);\n        nextValue[1] = (0, _setTimingMargin.default)(nextValue[1]);\n\n        _this.setState({\n          calendarDate: getCalendarDate(nextValue)\n        });\n      }\n\n      var nextState = {\n        doneSelected: !doneSelected,\n        selectValue: nextValue,\n        hoverValue: nextHoverValue\n      };\n\n      _this.setState(nextState, function () {\n        // 如果是单击模式，并且是第一次点选，再触发一次点击\n        if (oneTap && !_this.state.doneSelected) {\n          _this.handleChangeSelectValue(date);\n        } // 如果是单击模式，并且是第二次点选，更新值，并关闭面板\n\n\n        if (oneTap && _this.state.doneSelected) {\n          _this.updateValue();\n        }\n\n        onSelect && onSelect(date);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleMouseMoveSelectValue\", function (date) {\n      var _this$state2 = _this.state,\n          doneSelected = _this$state2.doneSelected,\n          selectValue = _this$state2.selectValue,\n          hoverValue = _this$state2.hoverValue,\n          currentHoverDate = _this$state2.currentHoverDate;\n      var hoverRange = _this.props.hoverRange;\n\n      if (currentHoverDate && (0, _is_same_day.default)(date, currentHoverDate)) {\n        return;\n      }\n\n      var nextHoverValue = _this.getHoverRange(date);\n\n      if (doneSelected && !(0, _isUndefined2.default)(hoverRange)) {\n        _this.setState({\n          currentHoverDate: date,\n          hoverValue: nextHoverValue\n        });\n\n        return;\n      } else if (doneSelected) {\n        return;\n      }\n\n      var nextValue = selectValue;\n\n      if (!nextHoverValue.length) {\n        nextValue[1] = date;\n      } else if (hoverValue) {\n        nextValue = [(0, _is_before.default)(nextHoverValue[0], hoverValue[0]) ? nextHoverValue[0] : hoverValue[0], (0, _is_after.default)(nextHoverValue[1], hoverValue[1]) ? nextHoverValue[1] : hoverValue[1], nextValue[2]];\n      } // If `nextValue[0]` is greater than `nextValue[1]` then reverse order\n\n\n      if ((0, _is_after.default)(nextValue[0], nextValue[1])) {\n        nextValue.reverse();\n      }\n\n      _this.setState({\n        currentHoverDate: date,\n        selectValue: nextValue\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClean\", function () {\n      _this.setState({\n        calendarDate: [new Date(), (0, _add_months.default)(new Date(), 1)]\n      });\n\n      _this.updateValue([]);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleEnter\", function () {\n      var value = _this.getValue();\n\n      var calendarDate;\n\n      if (value && value.length) {\n        var startDate = value[0],\n            endData = value[1];\n        calendarDate = [startDate, (0, _is_same_month.default)(startDate, endData) ? (0, _add_months.default)(endData, 1) : endData];\n      } else {\n        calendarDate = [new Date(), (0, _add_months.default)(new Date(), 1)];\n      }\n\n      _this.setState({\n        selectValue: value,\n        calendarDate: calendarDate,\n        active: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleEntered\", function () {\n      var onOpen = _this.props.onOpen;\n      onOpen && onOpen();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleExit\", function () {\n      var onClose = _this.props.onClose;\n\n      _this.setState({\n        active: false,\n        doneSelected: true\n      });\n\n      onClose && onClose();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"disabledOkButton\", function () {\n      var _this$state3 = _this.state,\n          selectValue = _this$state3.selectValue,\n          doneSelected = _this$state3.doneSelected;\n\n      if (!selectValue[0] || !selectValue[1] || !doneSelected) {\n        return true;\n      }\n\n      return _this.disabledByBetween(selectValue[0], selectValue[1], _Type.default.TOOLBAR_BUTTON_OK);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"disabledShortcutButton\", function (value) {\n      if (value === void 0) {\n        value = [];\n      }\n\n      if (!value[0] || !value[1]) {\n        return true;\n      }\n\n      return _this.disabledByBetween(value[0], value[1], _Type.default.TOOLBAR_SHORTCUT);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleDisabledDate\", function (date, values, type) {\n      var disabledDate = _this.props.disabledDate;\n      var doneSelected = _this.state.doneSelected;\n\n      if (disabledDate) {\n        return disabledDate(date, values, doneSelected, type);\n      }\n\n      return false;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"trigger\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"menuContainer\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"container\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTriggerRef\", function (ref) {\n      _this.trigger = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindContainerRef\", function (ref) {\n      _this.container = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindMenuContainerRef\", function (ref) {\n      _this.menuContainer = ref;\n    });\n    var defaultValue = props.defaultValue,\n        _value = props.value;\n    var activeValue = _value || defaultValue || [];\n\n    var _calendarDate = getCalendarDate(activeValue);\n\n    _this.state = {\n      value: activeValue,\n      selectValue: activeValue,\n      doneSelected: true,\n      calendarDate: _calendarDate,\n      hoverValue: [],\n      currentHoverDate: null\n    };\n    return _this;\n  }\n\n  var _proto = DateRangePicker.prototype;\n\n  _proto.getDateString = function getDateString(value) {\n    var _this$props2 = this.props,\n        placeholder = _this$props2.placeholder,\n        formatType = _this$props2.format,\n        renderValue = _this$props2.renderValue;\n    var nextValue = value || this.getValue();\n    var startDate = (0, _get2.default)(nextValue, '0');\n    var endDate = (0, _get2.default)(nextValue, '1');\n\n    if (startDate && endDate) {\n      var displayValue = [startDate, endDate].sort(_compare_asc.default);\n      return renderValue ? renderValue(displayValue, formatType) : (0, _format.default)(displayValue[0], formatType) + \" ~ \" + (0, _format.default)(displayValue[1], formatType);\n    }\n\n    return placeholder || formatType + \" ~ \" + formatType;\n  } // hover range presets\n  ;\n\n  _proto.getHoverRange = function getHoverRange(date) {\n    var hoverRange = this.props.hoverRange;\n\n    if (!hoverRange) {\n      return [];\n    }\n\n    var hoverRangeFunc = hoverRange;\n\n    if (hoverRange === 'week') {\n      hoverRangeFunc = this.getWeekHoverRange;\n    }\n\n    if (hoverRangeFunc === 'month') {\n      hoverRangeFunc = this.getMonthHoverRange;\n    }\n\n    if (typeof hoverRangeFunc !== 'function') {\n      return [];\n    }\n\n    var hoverValues = hoverRangeFunc(date);\n    var isHoverRangeValid = hoverValues instanceof Array && hoverValues.length === 2;\n\n    if (!isHoverRangeValid) {\n      return [];\n    }\n\n    if ((0, _is_after.default)(hoverValues[0], hoverValues[1])) {\n      hoverValues.reverse();\n    }\n\n    return hoverValues;\n  };\n\n  _proto.open = function open() {\n    if (this.trigger) {\n      this.trigger.show();\n    }\n  };\n\n  _proto.close = function close() {\n    if (this.trigger) {\n      this.trigger.hide();\n    }\n  };\n\n  _proto.resetPageDate = function resetPageDate() {\n    var selectValue = this.getValue();\n    var calendarDate = getCalendarDate(selectValue);\n    this.setState({\n      selectValue: selectValue,\n      calendarDate: calendarDate\n    });\n  }\n  /**\n   * Toolbar operation callback function\n   */\n  ;\n\n  _proto.updateValue = function updateValue(nextSelectValue, closeOverlay) {\n    if (closeOverlay === void 0) {\n      closeOverlay = true;\n    }\n\n    var _this$state4 = this.state,\n        value = _this$state4.value,\n        selectValue = _this$state4.selectValue;\n    var onChange = this.props.onChange;\n    var nextValue = !(0, _isUndefined2.default)(nextSelectValue) ? nextSelectValue : selectValue;\n    this.setState({\n      selectValue: nextValue || [],\n      value: nextValue\n    });\n\n    if (onChange && (!(0, _is_same_day.default)(nextValue[0], value[0]) || !(0, _is_same_day.default)(nextValue[1], value[1]))) {\n      onChange(nextValue);\n    } // `closeOverlay` default value is `true`\n\n\n    if (closeOverlay !== false) {\n      this.close();\n    }\n  };\n\n  _proto.disabledByBetween = function disabledByBetween(start, end, type) {\n    var disabledDate = this.props.disabledDate;\n    var _this$state5 = this.state,\n        selectValue = _this$state5.selectValue,\n        doneSelected = _this$state5.doneSelected;\n    var selectStartDate = selectValue[0];\n    var selectEndDate = selectValue[1];\n    var nextSelectValue = [selectStartDate, selectEndDate]; // If the date is between the start and the end\n    // the button is disabled\n\n    while ((0, _is_before.default)(start, end) || (0, _is_same_day.default)(start, end)) {\n      if (disabledDate && disabledDate(start, nextSelectValue, doneSelected, type)) {\n        return true;\n      }\n\n      start = (0, _add_days.default)(start, 1);\n    }\n\n    return false;\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this$props3 = this.props,\n        placement = _this$props3.placement,\n        menuClassName = _this$props3.menuClassName,\n        ranges = _this$props3.ranges,\n        isoWeek = _this$props3.isoWeek,\n        limitEndYear = _this$props3.limitEndYear,\n        oneTap = _this$props3.oneTap;\n    var _this$state6 = this.state,\n        calendarDate = _this$state6.calendarDate,\n        selectValue = _this$state6.selectValue,\n        hoverValue = _this$state6.hoverValue,\n        doneSelected = _this$state6.doneSelected;\n    var classes = (0, _classnames.default)(this.addPrefix('daterange-menu'), this.addPrefix(\"placement-\" + (0, _kebabCase2.default)(placement)), menuClassName);\n    var pickerProps = {\n      isoWeek: isoWeek,\n      doneSelected: doneSelected,\n      hoverValue: hoverValue,\n      calendarDate: calendarDate,\n      limitEndYear: limitEndYear,\n      value: selectValue,\n      disabledDate: this.handleDisabledDate,\n      onSelect: this.handleChangeSelectValue,\n      onMouseMove: this.handleMouseMoveSelectValue,\n      onChangeCalendarDate: this.handleChangeCalendarDate\n    };\n    return React.createElement(_picker.MenuWrapper, {\n      className: classes,\n      ref: this.bindMenuContainerRef\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('daterange-panel')\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('daterange-content')\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('daterange-header')\n    }, this.getDateString(selectValue)), React.createElement(\"div\", {\n      className: this.addPrefix('daterange-calendar-group')\n    }, React.createElement(_DatePicker.default, (0, _extends2.default)({\n      index: 0\n    }, pickerProps)), React.createElement(_DatePicker.default, (0, _extends2.default)({\n      index: 1\n    }, pickerProps)))), React.createElement(_Toolbar.default, {\n      ranges: ranges,\n      selectValue: selectValue,\n      disabledOkButton: this.disabledOkButton,\n      disabledShortcutButton: this.disabledShortcutButton,\n      onShortcut: this.handleShortcutPageDate,\n      onOk: this.handleOK,\n      hideOkButton: oneTap\n    })));\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        disabled = _this$props4.disabled,\n        cleanable = _this$props4.cleanable,\n        locale = _this$props4.locale,\n        toggleComponentClass = _this$props4.toggleComponentClass,\n        style = _this$props4.style,\n        onEntered = _this$props4.onEntered,\n        onEnter = _this$props4.onEnter,\n        onExited = _this$props4.onExited,\n        onClean = _this$props4.onClean,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props4, [\"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEntered\", \"onEnter\", \"onExited\", \"onClean\"]);\n    var value = this.getValue();\n    var unhandled = (0, _utils.getUnhandledProps)(DateRangePicker, rest);\n    var hasValue = value && value.length > 1;\n    var classes = (0, _picker.getToggleWrapperClassName)('daterange', this.addPrefix, this.props, hasValue);\n    return React.createElement(_rsuiteIntl.IntlProvider, {\n      locale: locale\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      ref: this.bindContainerRef\n    }, React.createElement(_picker.PickerToggleTrigger, {\n      pickerProps: this.props,\n      innerRef: this.bindTriggerRef,\n      onEnter: (0, _utils.createChainedFunction)(this.handleEnter, onEnter),\n      onEntered: (0, _utils.createChainedFunction)(this.handleEntered, onEntered),\n      onExit: (0, _utils.createChainedFunction)(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(_picker.PickerToggle, (0, _extends2.default)({}, unhandled, {\n      componentClass: toggleComponentClass,\n      onClean: (0, _utils.createChainedFunction)(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active\n    }), this.getDateString()))));\n  };\n\n  return DateRangePicker;\n}(React.Component);\n\n(0, _defineProperty2.default)(DateRangePicker, \"defaultProps\", {\n  appearance: 'default',\n  placement: 'bottomLeft',\n  limitEndYear: 1000,\n  format: 'YYYY-MM-DD',\n  placeholder: '',\n  cleanable: true,\n  locale: {\n    sunday: 'Su',\n    monday: 'Mo',\n    tuesday: 'Tu',\n    wednesday: 'We',\n    thursday: 'Th',\n    friday: 'Fr',\n    saturday: 'Sa',\n    ok: 'OK',\n    today: 'Today',\n    yesterday: 'Yesterday',\n    last7Days: 'Last 7 Days',\n    hours: 'Hours',\n    minutes: 'Minutes',\n    seconds: 'Seconds'\n  }\n});\n(0, _defineProperty2.default)(DateRangePicker, \"handledProps\", [\"appearance\", \"block\", \"className\", \"classPrefix\", \"cleanable\", \"container\", \"containerPadding\", \"defaultOpen\", \"defaultValue\", \"disabled\", \"disabledDate\", \"format\", \"hoverRange\", \"isoWeek\", \"limitEndYear\", \"locale\", \"menuClassName\", \"onChange\", \"onClean\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onHide\", \"onOk\", \"onOpen\", \"onSelect\", \"oneTap\", \"open\", \"placeholder\", \"placement\", \"ranges\", \"renderValue\", \"style\", \"toggleComponentClass\", \"value\"]);\nvar enhance = (0, _utils.defaultProps)({\n  classPrefix: 'picker'\n});\n\nvar _default = enhance(DateRangePicker);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}