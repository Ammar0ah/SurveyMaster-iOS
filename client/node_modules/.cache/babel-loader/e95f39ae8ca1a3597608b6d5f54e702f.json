{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _setDisplayName = _interopRequireDefault(require(\"recompose/setDisplayName\"));\n\nvar _setStatic = _interopRequireDefault(require(\"recompose/setStatic\"));\n\nvar _elementResizeEvent = _interopRequireWildcard(require(\"element-resize-event\"));\n\nvar _Modal = _interopRequireDefault(require(\"rsuite-utils/lib/Overlay/Modal\"));\n\nvar _Bounce = _interopRequireDefault(require(\"rsuite-utils/lib/Animation/Bounce\"));\n\nvar _domLib = require(\"dom-lib\");\n\nvar _utils = require(\"./utils\");\n\nvar _ModalDialog = _interopRequireDefault(require(\"./ModalDialog\"));\n\nvar _ModalBody = _interopRequireDefault(require(\"./ModalBody\"));\n\nvar _ModalHeader = _interopRequireDefault(require(\"./ModalHeader\"));\n\nvar _ModalTitle = _interopRequireDefault(require(\"./ModalTitle\"));\n\nvar _ModalFooter = _interopRequireDefault(require(\"./ModalFooter\"));\n/* eslint-disable react/no-find-dom-node */\n\n\nvar BACKDROP_TRANSITION_DURATION = 150;\n\nvar Modal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Modal, _React$Component);\n\n  function Modal(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"modal\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"dialog\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"windowResizeListener\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"contentElement\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleShow\", function () {\n      var dialogElement = (0, _reactDom.findDOMNode)(_this.dialog);\n\n      _this.updateModalStyles(dialogElement);\n\n      _this.contentElement = dialogElement.querySelector(\".\" + _this.addPrefix('content'));\n      _this.windowResizeListener = (0, _domLib.on)(window, 'resize', _this.handleResize);\n      (0, _elementResizeEvent.default)(_this.contentElement, _this.handleResize);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleHide\", function () {\n      _this.destroyEvent();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleDialogClick\", function (event) {\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      var onHide = _this.props.onHide;\n      onHide && onHide(event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleResize\", function () {\n      _this.updateModalStyles();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"dialogRef\", function (ref) {\n      _this.dialog = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"modalRef\", function (ref) {\n      _this.modal = ref;\n    });\n    _this.state = {\n      modalStyles: {},\n      bodyStyles: {}\n    };\n    return _this;\n  }\n\n  var _proto = Modal.prototype;\n\n  _proto.getChildContext = function getChildContext() {\n    return {\n      onModalHide: this.props.onHide\n    };\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.destroyEvent();\n  };\n\n  _proto.getStyles = function getStyles(dialogElement) {\n    var _this$props = this.props,\n        container = _this$props.container,\n        overflow = _this$props.overflow,\n        drawer = _this$props.drawer;\n    var node = dialogElement || (0, _reactDom.findDOMNode)(this.dialog);\n    var doc = (0, _domLib.ownerDocument)(node);\n    var body = container || doc.body;\n    var scrollHeight = node ? node.scrollHeight : 0;\n    var bodyIsOverflowing = (0, _domLib.isOverflowing)((0, _reactDom.findDOMNode)(body));\n    var modalIsOverflowing = scrollHeight > doc.documentElement.clientHeight;\n    var styles = {\n      modalStyles: {\n        paddingRight: bodyIsOverflowing && !modalIsOverflowing ? (0, _domLib.getScrollbarSize)() : 0,\n        paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? (0, _domLib.getScrollbarSize)() : 0\n      },\n      bodyStyles: {}\n    };\n\n    if (!overflow) {\n      return styles;\n    }\n\n    var bodyStyles = {\n      overflow: 'auto'\n    };\n\n    if (node) {\n      // default margin\n      var headerHeight = 46;\n      var footerHeight = 46;\n      var contentHeight = 30;\n      var headerDOM = node.querySelector(\".\" + this.addPrefix('header'));\n      var footerDOM = node.querySelector(\".\" + this.addPrefix('footer'));\n      var contentDOM = node.querySelector(\".\" + this.addPrefix('content'));\n      headerHeight = headerDOM ? (0, _domLib.getHeight)(headerDOM) + headerHeight : headerHeight;\n      footerHeight = footerDOM ? (0, _domLib.getHeight)(footerDOM) + headerHeight : headerHeight;\n      contentHeight = contentDOM ? (0, _domLib.getHeight)(contentDOM) + contentHeight : contentHeight;\n\n      if (drawer) {\n        bodyStyles.height = contentHeight - (headerHeight + footerHeight);\n      } else {\n        /**\n         * Header height + Footer height + Dialog margin\n         */\n        var excludeHeight = headerHeight + footerHeight + 60;\n        var bodyHeight = (0, _domLib.getHeight)(window) - excludeHeight;\n        var maxHeight = scrollHeight >= bodyHeight ? bodyHeight : scrollHeight;\n        bodyStyles.maxHeight = maxHeight;\n      }\n    }\n\n    styles.bodyStyles = bodyStyles;\n    return styles;\n  };\n\n  _proto.destroyEvent = function destroyEvent() {\n    if (this.windowResizeListener) {\n      this.windowResizeListener.off();\n    }\n\n    if (this.contentElement) {\n      (0, _elementResizeEvent.unbind)(this.contentElement);\n    }\n  };\n\n  _proto.updateModalStyles = function updateModalStyles(dialogElement) {\n    this.setState(this.getStyles(dialogElement));\n  };\n\n  _proto.render = function render() {\n    var _classNames, _classNames2;\n\n    var _this$props2 = this.props,\n        className = _this$props2.className,\n        children = _this$props2.children,\n        dialogClassName = _this$props2.dialogClassName,\n        backdropClassName = _this$props2.backdropClassName,\n        dialogStyle = _this$props2.dialogStyle,\n        animation = _this$props2.animation,\n        classPrefix = _this$props2.classPrefix,\n        style = _this$props2.style,\n        show = _this$props2.show,\n        size = _this$props2.size,\n        full = _this$props2.full,\n        dialogComponentClass = _this$props2.dialogComponentClass,\n        animationProps = _this$props2.animationProps,\n        animationTimeout = _this$props2.animationTimeout,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, [\"className\", \"children\", \"dialogClassName\", \"backdropClassName\", \"dialogStyle\", \"animation\", \"classPrefix\", \"style\", \"show\", \"size\", \"full\", \"dialogComponentClass\", \"animationProps\", \"animationTimeout\"]);\n    var _this$state = this.state,\n        modalStyles = _this$state.modalStyles,\n        bodyStyles = _this$state.bodyStyles;\n    var inClass = {\n      in: show && !animation\n    };\n    var Dialog = dialogComponentClass;\n    var parentProps = (0, _pick2.default)(rest, _Modal.default.handledProps);\n    var items = null;\n\n    if (children) {\n      items = _utils.ReactChildren.mapCloneElement(children, function (child) {\n        var displayName = child.type.displayName;\n\n        if (displayName && displayName.indexOf('Body') !== -1) {\n          return {\n            style: bodyStyles\n          };\n        }\n\n        return null;\n      });\n    }\n\n    var classes = (0, _classnames.default)(this.addPrefix(size), className, (_classNames = {}, _classNames[this.addPrefix('full')] = full, _classNames));\n    var modal = React.createElement(Dialog, (0, _extends2.default)({}, (0, _pick2.default)(rest, Object.keys(_ModalDialog.default.propTypes || {})), {\n      style: (0, _extends2.default)({}, modalStyles, style),\n      classPrefix: classPrefix,\n      className: classes,\n      dialogClassName: dialogClassName,\n      dialogStyle: dialogStyle,\n      onClick: rest.backdrop === true ? this.handleDialogClick : null,\n      ref: this.dialogRef\n    }), items);\n    return React.createElement(_Modal.default, (0, _extends2.default)({\n      ref: this.modalRef,\n      show: show,\n      className: this.addPrefix('wrapper'),\n      onEntering: (0, _utils.createChainedFunction)(this.handleShow, this.props.onEntering),\n      onExited: (0, _utils.createChainedFunction)(this.handleHide, this.props.onExited),\n      backdropClassName: (0, _classnames.default)(this.addPrefix('backdrop'), backdropClassName, inClass),\n      containerClassName: (0, _classnames.default)(this.addPrefix('open'), (_classNames2 = {}, _classNames2[this.addPrefix('has-backdrop')] = rest.backdrop, _classNames2)),\n      transition: animation ? animation : undefined,\n      animationProps: animationProps,\n      dialogTransitionTimeout: animationTimeout,\n      backdropTransitionTimeout: BACKDROP_TRANSITION_DURATION\n    }, parentProps), modal);\n  };\n\n  return Modal;\n}(React.Component);\n\n(0, _defineProperty2.default)(Modal, \"defaultProps\", {\n  size: 'sm',\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true,\n  animation: _Bounce.default,\n  animationTimeout: 300,\n  dialogComponentClass: _ModalDialog.default,\n  overflow: true\n});\n(0, _defineProperty2.default)(Modal, \"childContextTypes\", {\n  onModalHide: _propTypes.default.func\n});\n(0, _defineProperty2.default)(Modal, \"handledProps\", [\"animation\", \"animationProps\", \"animationTimeout\", \"autoFocus\", \"backdrop\", \"backdropClassName\", \"backdropStyle\", \"backdropTransitionTimeout\", \"children\", \"className\", \"classPrefix\", \"container\", \"dialogClassName\", \"dialogComponentClass\", \"dialogStyle\", \"dialogTransitionTimeout\", \"drawer\", \"enforceFocus\", \"full\", \"keyboard\", \"onBackdropClick\", \"onEnter\", \"onEntered\", \"onEntering\", \"onEscapeKeyUp\", \"onExit\", \"onExited\", \"onExiting\", \"onHide\", \"onRendered\", \"onShow\", \"overflow\", \"show\", \"size\", \"style\", \"transition\"]);\nvar EnhancedModal = (0, _utils.defaultProps)({\n  classPrefix: 'modal'\n})(Modal);\n(0, _setStatic.default)('Body', _ModalBody.default)(EnhancedModal);\n(0, _setStatic.default)('Header', _ModalHeader.default)(EnhancedModal);\n(0, _setStatic.default)('Title', _ModalTitle.default)(EnhancedModal);\n(0, _setStatic.default)('Footer', _ModalFooter.default)(EnhancedModal);\n(0, _setStatic.default)('Dialog', _ModalDialog.default)(EnhancedModal);\nvar Component = (0, _setDisplayName.default)('Modal')(EnhancedModal);\nvar _default = Component;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}