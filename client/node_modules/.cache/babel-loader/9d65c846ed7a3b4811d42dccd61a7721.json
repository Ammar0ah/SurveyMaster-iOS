{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _isNumber2 = _interopRequireDefault(require(\"lodash/isNumber\"));\n\nvar _isString2 = _interopRequireDefault(require(\"lodash/isString\"));\n\nvar _kebabCase2 = _interopRequireDefault(require(\"lodash/kebabCase\"));\n\nvar _isEmpty2 = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _isArray2 = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _reactDom = require(\"react-dom\");\n\nvar _domLib = require(\"dom-lib\");\n\nvar _List = _interopRequireDefault(require(\"react-virtualized/dist/commonjs/List\"));\n\nvar _AutoSizer = _interopRequireDefault(require(\"react-virtualized/dist/commonjs/AutoSizer\"));\n\nvar _CellMeasurer = require(\"react-virtualized/dist/commonjs/CellMeasurer\");\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _utils = require(\"rsuite-utils/lib/utils\");\n\nvar _CheckTreeNode = _interopRequireDefault(require(\"./CheckTreeNode\"));\n\nvar _constants = require(\"../utils/constants\");\n\nvar _utils2 = require(\"../utils\");\n\nvar _picker = require(\"../_picker\");\n\nvar _utils3 = require(\"./utils\");\n\nvar _treeUtils = require(\"../utils/treeUtils\");\n\nvar defaultHeight = 360;\nvar defaultWidth = 200;\n\nvar CheckTree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(CheckTree, _React$Component);\n\n  function CheckTree(_props) {\n    var _this;\n\n    _this = _React$Component.call(this, _props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getValue\", function (props) {\n      if (props === void 0) {\n        props = _this.props;\n      }\n\n      var _props2 = props,\n          value = _props2.value,\n          defaultValue = _props2.defaultValue,\n          _props2$uncheckableIt = _props2.uncheckableItemValues,\n          uncheckableItemValues = _props2$uncheckableIt === void 0 ? [] : _props2$uncheckableIt;\n\n      if (value && value.length) {\n        return value.filter(function (v) {\n          return !uncheckableItemValues.includes(v);\n        });\n      }\n\n      if (defaultValue && defaultValue.length > 0) {\n        return defaultValue.filter(function (v) {\n          return !uncheckableItemValues.includes(v);\n        });\n      }\n\n      return [];\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getElementByDataKey\", function (dataKey) {\n      var ele = (0, _reactDom.findDOMNode)(_this.nodeRefs[dataKey]);\n\n      if (ele instanceof Element) {\n        return ele.querySelector(\".\" + _this.addPrefix('checktree-view-checknode-label'));\n      }\n\n      return null;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getFocusableMenuItems\", function () {\n      var filterData = _this.state.filterData;\n      var childrenKey = _this.props.childrenKey;\n      var items = [];\n\n      var loop = function loop(treeNodes) {\n        treeNodes.forEach(function (node) {\n          if (!_this.getDisabledState(node) && node.visible) {\n            items.push(node);\n\n            var _nodeData = (0, _extends2.default)({}, node, _this.nodes[node.refKey]);\n\n            if (!_this.getExpandState(_nodeData, _this.props)) {\n              return;\n            }\n\n            if (node[childrenKey]) {\n              loop(node[childrenKey]);\n            }\n          }\n        });\n      };\n\n      loop(filterData);\n      return items;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"isControlled\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"nodes\", {});\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"activeNode\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"treeView\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"list\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"cache\", new _CellMeasurer.CellMeasurerCache({\n      fixedWidth: true,\n      minHeight: 20\n    }));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindListRef\", function (ref) {\n      _this.list = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTreeViewRef\", function (ref) {\n      _this.treeView = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"trigger\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTriggerRef\", function (ref) {\n      _this.trigger = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"container\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindContainerRef\", function (ref) {\n      _this.container = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"nodeRefs\", {});\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindNodeRefs\", function (refKey, ref) {\n      _this.nodeRefs[refKey] = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"menu\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindMenuRef\", function (ref) {\n      _this.menu = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"position\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindPositionRef\", function (ref) {\n      _this.position = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggle\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindToggleRef\", function (ref) {\n      _this.toggle = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getPositionInstance\", function () {\n      return _this.position;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"getToggleInstance\", function () {\n      return _this.toggle;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"selectActiveItem\", function () {\n      var _this$getActiveItem = _this.getActiveItem(),\n          nodeData = _this$getActiveItem.nodeData,\n          layer = _this$getActiveItem.layer;\n\n      _this.handleSelect(nodeData, +layer);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"focusNextItem\", function () {\n      var _this$getItemsAndActi = _this.getItemsAndActiveIndex(),\n          items = _this$getItemsAndActi.items,\n          activeIndex = _this$getItemsAndActi.activeIndex;\n\n      if (items.length === 0) {\n        return;\n      }\n\n      var nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1;\n\n      var node = _this.getElementByDataKey(items[nextIndex].refKey);\n\n      if (node !== null) {\n        node.focus();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"focusPreviousItem\", function () {\n      var _this$getItemsAndActi2 = _this.getItemsAndActiveIndex(),\n          items = _this$getItemsAndActi2.items,\n          activeIndex = _this$getItemsAndActi2.activeIndex;\n\n      if (items.length === 0) {\n        return;\n      }\n\n      var prevIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1;\n      prevIndex = prevIndex >= 0 ? prevIndex : 0;\n\n      var node = _this.getElementByDataKey(items[prevIndex].refKey);\n\n      if (node !== null) {\n        node.focus();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"closeDropdown\", function () {\n      if (_this.trigger) {\n        _this.trigger.hide();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"openDropdown\", function () {\n      if (_this.trigger) {\n        _this.trigger.show();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggleDropdown\", function () {\n      var active = _this.state.active;\n\n      if (active) {\n        _this.closeDropdown();\n\n        return;\n      }\n\n      _this.openDropdown();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"everyChildChecked\", function (nodes, node) {\n      var list = [];\n      Object.keys(nodes).forEach(function (refKey) {\n        var curNode = nodes[refKey];\n\n        if (curNode.parentNode && curNode.parentNode.refKey === node.refKey && !curNode.uncheckable) {\n          list.push(curNode);\n        }\n      });\n      return list.every(function (l) {\n        return l.check;\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils2.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (activeNode, layer) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          onSelect = _this$props.onSelect;\n\n      var selectedValues = _this.toggleChecked(activeNode, !_this.nodes[activeNode.refKey].check);\n\n      if (_this.isControlled) {\n        _this.activeNode = activeNode;\n      } else {\n        _this.unserializeLists({\n          check: selectedValues\n        });\n\n        _this.setState({\n          activeNode: activeNode,\n          selectedValues: selectedValues,\n          hasValue: !!selectedValues.length\n        });\n      }\n\n      onChange && onChange(selectedValues);\n      onSelect && onSelect(activeNode, layer, selectedValues);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleToggle\", function (nodeData, layer) {\n      var _this$props2 = _this.props,\n          _this$props2$classPre = _this$props2.classPrefix,\n          classPrefix = _this$props2$classPre === void 0 ? '' : _this$props2$classPre,\n          valueKey = _this$props2.valueKey,\n          onExpand = _this$props2.onExpand,\n          virtualized = _this$props2.virtualized;\n\n      if (!virtualized) {\n        var openClass = classPrefix + \"-checktree-view-open\";\n        (0, _domLib.toggleClass)((0, _reactDom.findDOMNode)(_this.nodeRefs[nodeData.refKey]), openClass);\n        nodeData.expand = (0, _domLib.hasClass)((0, _reactDom.findDOMNode)(_this.nodeRefs[nodeData.refKey]), openClass);\n\n        _this.toggleExpand(nodeData, nodeData.expand);\n      } else {\n        _this.toggleExpand(nodeData, !nodeData.expand);\n      }\n\n      _this.setState({\n        expandItemValues: _this.serializeList('expand')\n      });\n\n      onExpand && onExpand(nodeData, layer, (0, _picker.createConcatChildrenFunction)(nodeData, nodeData[valueKey]));\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleKeyDown\", function (event) {\n      (0, _picker.onMenuKeyDown)(event, {\n        down: _this.focusNextItem,\n        up: _this.focusPreviousItem,\n        enter: _this.selectActiveItem,\n        del: _this.handleClean\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleToggleKeyDown\", function (event) {\n      var classPrefix = _this.props.classPrefix;\n      var _this$state = _this.state,\n          activeNode = _this$state.activeNode,\n          active = _this$state.active; // enter\n\n      if ((!activeNode || !active) && event.keyCode === 13) {\n        _this.toggleDropdown();\n      } // delete\n\n\n      if (event.keyCode === 8) {\n        _this.handleClean();\n      }\n\n      if (!_this.treeView) {\n        return;\n      }\n\n      if (event.target instanceof HTMLElement) {\n        var className = event.target.className;\n\n        if (className.includes(classPrefix + \"-toggle\") || className.includes(classPrefix + \"-toggle-custom\") || className.includes(classPrefix + \"-search-bar-input\")) {\n          (0, _picker.onMenuKeyDown)(event, {\n            down: _this.focusNextItem\n          });\n        }\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSearch\", function (value, event) {\n      var filterData = _this.state.filterData;\n      var _this$props3 = _this.props,\n          onSearch = _this$props3.onSearch,\n          searchKeyword = _this$props3.searchKeyword;\n\n      if ((0, _isUndefined2.default)(searchKeyword)) {\n        _this.setState({\n          filterData: _this.getFilterData(value, filterData),\n          searchKeyword: value\n        });\n      }\n\n      onSearch && onSearch(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClean\", function () {\n      var onChange = _this.props.onChange;\n\n      _this.setState({\n        selectedValues: [],\n        hasValue: false,\n        activeNode: {}\n      });\n\n      _this.unserializeLists({\n        check: []\n      });\n\n      onChange && onChange([]);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleOnOpen\", function () {\n      var activeNode = _this.state.activeNode;\n      var onOpen = _this.props.onOpen;\n\n      if (activeNode) {\n        var node = _this.getElementByDataKey(activeNode.refKey);\n\n        if (node !== null) {\n          node.focus();\n        }\n      }\n\n      onOpen && onOpen();\n\n      _this.setState({\n        active: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleOnClose\", function () {\n      var filterData = _this.state.filterData;\n      var _this$props4 = _this.props,\n          onClose = _this$props4.onClose,\n          searchKeyword = _this$props4.searchKeyword;\n\n      if ((0, _isUndefined2.default)(searchKeyword)) {\n        _this.setState({\n          filterData: _this.getFilterData('', filterData),\n          searchKeyword: ''\n        });\n      }\n\n      onClose && onClose();\n\n      _this.setState({\n        active: false\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"rowRenderer\", function (_ref) {\n      var node = _ref.node,\n          key = _ref.key,\n          style = _ref.style;\n\n      var treeViewClass = _this.addPrefix('checktree-view');\n\n      var options = {\n        key: key,\n        style: style,\n        classPrefix: treeViewClass\n      };\n      return _this.renderVirtualNode(node, options);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"measureRowRenderer\", function (nodes) {\n      return function (_ref2) {\n        var key = _ref2.key,\n            index = _ref2.index,\n            style = _ref2.style,\n            parent = _ref2.parent;\n        var node = nodes[index];\n        return React.createElement(_CellMeasurer.CellMeasurer, {\n          cache: _this.cache,\n          columnIndex: 0,\n          key: key,\n          rowIndex: index,\n          parent: parent\n        }, function (m) {\n          return _this.rowRenderer((0, _extends2.default)({}, m, {\n            node: node,\n            key: key,\n            style: style\n          }));\n        });\n      };\n    });\n    var _value = _props.value,\n        data = _props.data,\n        cascade = _props.cascade,\n        _childrenKey = _props.childrenKey;\n    _this.nodes = {};\n    _this.isControlled = !(0, _isUndefined2.default)(_value);\n\n    var keyword = _this.getSearchKeyword(_props);\n\n    var nextValue = _this.getValue(_props);\n\n    var nextData = [].concat(data);\n\n    _this.flattenNodes(nextData, _props);\n\n    _this.unserializeLists({\n      check: nextValue,\n      expand: []\n    }, _props);\n\n    _this.state = {\n      data: data,\n      value: _value,\n      cascade: cascade,\n      hasValue: _this.hasValue(nextValue, _props),\n      expandAll: _this.getExpandAll(_props),\n      filterData: _this.getFilterData(keyword, nextData, _props),\n      searchKeyword: keyword,\n      selectedValues: nextValue,\n      expandItemValues: _this.serializeList('expand'),\n      uncheckableItemValues: _props.uncheckableItemValues,\n      isSomeNodeHasChildren: (0, _utils3.isSomeNodeHasChildren)(data, _childrenKey)\n    };\n    return _this;\n  }\n\n  CheckTree.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var value = nextProps.value,\n        data = nextProps.data,\n        cascade = nextProps.cascade,\n        expandAll = nextProps.expandAll,\n        searchKeyword = nextProps.searchKeyword,\n        uncheckableItemValues = nextProps.uncheckableItemValues;\n    var nextState = {};\n\n    if ((0, _isArray2.default)(data) && (0, _isArray2.default)(prevState.data) && prevState.data !== data) {\n      nextState.data = data;\n    }\n\n    if ((0, _isArray2.default)(value) && !(0, _utils.shallowEqualArray)(value, prevState.value)) {\n      nextState.value = value;\n    }\n\n    if ((0, _isArray2.default)(uncheckableItemValues) && (0, _isArray2.default)(prevState.uncheckableItemValues) && !(0, _utils.shallowEqualArray)(uncheckableItemValues, prevState.uncheckableItemValues)) {\n      nextState.uncheckableItemValues = uncheckableItemValues;\n    }\n\n    if (searchKeyword !== prevState.searchKeyword) {\n      nextState.searchKeyword = searchKeyword;\n    }\n\n    if (cascade !== prevState.cascade) {\n      nextState.cascade = cascade;\n    }\n\n    if (expandAll !== prevState.expandAll) {\n      nextState.expandAll = expandAll;\n    }\n\n    return Object.keys(nextState).length ? nextState : null;\n  };\n\n  var _proto = CheckTree.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var _this$state2 = this.state,\n        filterData = _this$state2.filterData,\n        searchKeyword = _this$state2.searchKeyword,\n        selectedValues = _this$state2.selectedValues,\n        expandItemValues = _this$state2.expandItemValues;\n    var _this$props5 = this.props,\n        value = _this$props5.value,\n        _this$props5$data = _this$props5.data,\n        data = _this$props5$data === void 0 ? [] : _this$props5$data,\n        cascade = _this$props5.cascade,\n        uncheckableItemValues = _this$props5.uncheckableItemValues,\n        childrenKey = _this$props5.childrenKey;\n\n    if (prevState.data !== data) {\n      var nextData = [].concat(data);\n      this.flattenNodes(nextData);\n      this.unserializeLists({\n        check: this.getValue(),\n        expand: expandItemValues\n      });\n      this.setState({\n        data: nextData,\n        filterData: this.getFilterData(searchKeyword, nextData),\n        isSomeNodeHasChildren: (0, _utils3.isSomeNodeHasChildren)(nextData, childrenKey),\n        hasValue: this.hasValue()\n      });\n    }\n\n    if ((0, _isArray2.default)(value) && !(0, _utils.shallowEqualArray)(prevState.value, value)) {\n      var nextState = {\n        selectedValues: value,\n        hasValue: this.hasValue(value),\n        activeNode: this.activeNode\n      };\n\n      if (value && !value.length) {\n        nextState.activeNode = null;\n      }\n\n      this.unserializeLists({\n        check: value,\n        expand: expandItemValues\n      });\n      this.setState(nextState);\n    }\n\n    if ((0, _isArray2.default)(uncheckableItemValues) && !(0, _utils.shallowEqualArray)(prevState.uncheckableItemValues, uncheckableItemValues)) {\n      this.flattenNodes(filterData);\n      this.unserializeLists({\n        check: selectedValues,\n        expand: expandItemValues\n      });\n      this.setState({\n        hasValue: this.hasValue()\n      });\n    } // cascade 改变时，重新初始化\n\n\n    if (cascade !== prevState.cascade && cascade) {\n      this.flattenNodes(filterData);\n      this.unserializeLists({\n        check: selectedValues,\n        expand: expandItemValues\n      }, this.props);\n      this.setState({\n        cascade: cascade\n      });\n    }\n\n    if (prevState.searchKeyword !== this.props.searchKeyword) {\n      this.setState({\n        filterData: this.getFilterData(this.props.searchKeyword, filterData)\n      });\n    }\n\n    if (this.list) {\n      this.list.forceUpdateGrid();\n    }\n  };\n\n  _proto.getExpandAll = function getExpandAll(props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props3 = props,\n        expandAll = _props3.expandAll,\n        defaultExpandAll = _props3.defaultExpandAll;\n    return !(0, _isUndefined2.default)(expandAll) ? expandAll : defaultExpandAll;\n  };\n\n  _proto.getSearchKeyword = function getSearchKeyword(props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props4 = props,\n        searchKeyword = _props4.searchKeyword;\n    return !(0, _isUndefined2.default)(searchKeyword) ? searchKeyword : '';\n  };\n\n  _proto.getNodeCheckState = function getNodeCheckState(node, cascade) {\n    var childrenKey = this.props.childrenKey;\n\n    if (!node[childrenKey] || !node[childrenKey].length || !cascade) {\n      this.nodes[node.refKey].checkAll = false;\n      return node.check ? _constants.CHECK_STATE.CHECK : _constants.CHECK_STATE.UNCHECK;\n    }\n\n    if ((0, _utils3.isEveryChildChecked)(node, this.nodes, this.props)) {\n      this.nodes[node.refKey].checkAll = true;\n      return _constants.CHECK_STATE.CHECK;\n    }\n\n    if ((0, _utils3.isSomeChildChecked)(node, this.nodes, this.props)) {\n      this.nodes[node.refKey].checkAll = false;\n      return _constants.CHECK_STATE.INDETERMINATE;\n    }\n\n    return _constants.CHECK_STATE.UNCHECK;\n  };\n\n  _proto.getExpandState = function getExpandState(node, props) {\n    var valueKey = props.valueKey;\n    var expandItemValues = (0, _isUndefined2.default)(this.state) ? [] : this.state.expandItemValues;\n    var expandAll = this.getExpandAll(props);\n    var expand = expandItemValues.some(function (value) {\n      return (0, _utils.shallowEqual)(node[valueKey], value);\n    });\n    var childrenKey = props.childrenKey;\n\n    if (expandItemValues.length) {\n      return expand;\n    } else if (node[childrenKey] && node[childrenKey].length) {\n      if (expand) {\n        return !!node.expand;\n      } else if (expandAll) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  };\n\n  _proto.getFilterData = function getFilterData(searchKeyword, data, props) {\n    if (searchKeyword === void 0) {\n      searchKeyword = '';\n    }\n\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props5 = props,\n        labelKey = _props5.labelKey,\n        childrenKey = _props5.childrenKey;\n\n    var setVisible = function setVisible(nodes) {\n      if (nodes === void 0) {\n        nodes = [];\n      }\n\n      return nodes.forEach(function (item) {\n        item.visible = (0, _treeUtils.shouldDisplay)(item[labelKey], searchKeyword);\n\n        if ((0, _isArray2.default)(item[childrenKey])) {\n          setVisible(item[childrenKey]);\n          item[childrenKey].forEach(function (child) {\n            if (child.visible) {\n              item.visible = child.visible;\n            }\n          });\n        }\n      });\n    };\n\n    setVisible(data);\n    return data;\n  };\n\n  _proto.getActiveElementOption = function getActiveElementOption(options, refKey) {\n    var childrenKey = this.props.childrenKey;\n\n    for (var i = 0; i < options.length; i += 1) {\n      if (options[i].refKey === refKey) {\n        return options[i];\n      } else if (options[i][childrenKey] && options[i][childrenKey].length) {\n        var active = this.getActiveElementOption(options[i][childrenKey], refKey);\n\n        if (!(0, _isEmpty2.default)(active)) {\n          return active;\n        }\n      }\n    }\n\n    return {};\n  };\n\n  _proto.getFormattedTree = function getFormattedTree(nodes) {\n    var _this2 = this;\n\n    var childrenKey = this.props.childrenKey;\n    return nodes.map(function (node) {\n      var formatted = (0, _extends2.default)({}, node);\n      var curNode = _this2.nodes[node.refKey];\n\n      if (curNode) {\n        formatted.check = curNode.check;\n        formatted.expand = curNode.expand;\n        formatted.uncheckable = curNode.uncheckable;\n        formatted.parentNode = curNode.parentNode;\n\n        if (Array.isArray(node[childrenKey]) && node[childrenKey].length > 0) {\n          formatted[childrenKey] = _this2.getFormattedTree(formatted[childrenKey]);\n        }\n      }\n\n      return formatted;\n    });\n  };\n\n  _proto.getFlattenTreeData = function getFlattenTreeData(nodes) {\n    var _this3 = this;\n\n    var expandItemValues = this.state.expandItemValues;\n    var _this$props6 = this.props,\n        childrenKey = _this$props6.childrenKey,\n        valueKey = _this$props6.valueKey;\n    return (0, _treeUtils.flattenTree)(nodes, childrenKey, function (node) {\n      var formatted = (0, _extends2.default)({}, node);\n      var curNode = _this3.nodes[node.refKey];\n      var parentKeys = (0, _treeUtils.getNodeParents)(curNode, 'parentNode', valueKey);\n\n      if (curNode) {\n        formatted.check = curNode.check;\n        formatted.expand = curNode.expand;\n        formatted.uncheckable = curNode.uncheckable;\n        formatted.layer = curNode.layer;\n        formatted.parentNode = curNode.parentNode;\n        formatted.showNode = (0, _treeUtils.shouldShowNodeByExpanded)(expandItemValues, parentKeys);\n      }\n\n      return formatted;\n    });\n  }\n  /**\n   * 获取每个节点的disable状态\n   * @param {*} node\n   */\n  ;\n\n  _proto.getDisabledState = function getDisabledState(node) {\n    var _this4 = this;\n\n    var _this$props7 = this.props,\n        _this$props7$disabled = _this$props7.disabledItemValues,\n        disabledItemValues = _this$props7$disabled === void 0 ? [] : _this$props7$disabled,\n        valueKey = _this$props7.valueKey;\n    return disabledItemValues.some(function (value) {\n      return (0, _utils.shallowEqual)(_this4.nodes[node.refKey][valueKey], value);\n    });\n  }\n  /**\n   * 获取节点的是否需要隐藏checkbox\n   * @param {*} node\n   */\n  ;\n\n  _proto.getUncheckableState = function getUncheckableState(node) {\n    var _this$props8 = this.props,\n        _this$props8$unchecka = _this$props8.uncheckableItemValues,\n        uncheckableItemValues = _this$props8$unchecka === void 0 ? [] : _this$props8$unchecka,\n        valueKey = _this$props8.valueKey;\n    return uncheckableItemValues.some(function (value) {\n      return (0, _utils.shallowEqual)(node[valueKey], value);\n    });\n  };\n\n  _proto.getItemsAndActiveIndex = function getItemsAndActiveIndex() {\n    var items = this.getFocusableMenuItems();\n    var activeIndex = -1;\n    items.forEach(function (item, index) {\n      if (document.activeElement !== null) {\n        if (item.refKey === document.activeElement.getAttribute('data-key')) {\n          activeIndex = index;\n        }\n      }\n    });\n    return {\n      items: items,\n      activeIndex: activeIndex\n    };\n  };\n\n  _proto.getActiveItem = function getActiveItem() {\n    var filterData = this.state.filterData;\n    var activeItem = document.activeElement;\n\n    if (activeItem !== null) {\n      var _activeItem$dataset = activeItem.dataset,\n          key = _activeItem$dataset.key,\n          _layer = _activeItem$dataset.layer;\n\n      var _nodeData2 = this.getActiveElementOption(filterData, key);\n\n      _nodeData2.check = !this.nodes[_nodeData2.refKey].check;\n      _nodeData2.parentNode = this.nodes[_nodeData2.refKey].parentNode;\n      return {\n        nodeData: _nodeData2,\n        layer: _layer\n      };\n    }\n\n    return {};\n  }\n  /**\n   * 获取已选择的items，用于显示在placeholder\n   */\n  ;\n\n  _proto.getSelectedItems = function getSelectedItems(selectedValues) {\n    var _this5 = this;\n\n    var valueKey = this.props.valueKey;\n    var checkItems = [];\n    Object.keys(this.nodes).map(function (refKey) {\n      var node = _this5.nodes[refKey];\n\n      if (selectedValues.some(function (value) {\n        return (0, _utils.shallowEqual)(node[valueKey], value);\n      })) {\n        checkItems.push(node);\n      }\n    });\n    return checkItems;\n  }\n  /**\n   * 获取第一层节点是否全部都为 uncheckable\n   */\n  ;\n\n  _proto.getEveryFisrtLevelNodeUncheckable = function getEveryFisrtLevelNodeUncheckable() {\n    var _this6 = this;\n\n    var list = [];\n    Object.keys(this.nodes).forEach(function (refKey) {\n      var curNode = _this6.nodes[refKey];\n\n      if (!curNode.parentNode) {\n        list.push(curNode);\n      }\n    });\n    return list.every(function (node) {\n      return node.uncheckable;\n    });\n  }\n  /**\n   * 判断传入的 value 是否存在于data 中\n   * @param {*} values\n   */\n  ;\n\n  _proto.hasValue = function hasValue(values, props) {\n    var _this7 = this;\n\n    if (values === void 0) {\n      values = this.state.selectedValues;\n    }\n\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _props6 = props,\n        valueKey = _props6.valueKey;\n    var selectedValues = Object.keys(this.nodes).map(function (refKey) {\n      return _this7.nodes[refKey][valueKey];\n    }).filter(function (item) {\n      return values.some(function (v) {\n        return (0, _utils.shallowEqual)(v, item);\n      });\n    });\n    return !!selectedValues.length;\n  }\n  /**\n   * 拍平数组，将tree 转换为一维对象\n   * @param {*} nodes tree data\n   * @param {*} ref 当前层级\n   */\n  ;\n\n  _proto.flattenNodes = function flattenNodes(nodes, props, ref, parentNode, layer) {\n    var _this8 = this;\n\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    if (ref === void 0) {\n      ref = '0';\n    }\n\n    if (layer === void 0) {\n      layer = 0;\n    }\n\n    var _props7 = props,\n        labelKey = _props7.labelKey,\n        valueKey = _props7.valueKey,\n        childrenKey = _props7.childrenKey;\n\n    if (!Array.isArray(nodes) || nodes.length === 0) {\n      return;\n    }\n\n    layer += 1;\n    nodes.forEach(function (node, index) {\n      var _this8$nodes$refKey;\n\n      var refKey = ref + \"-\" + index;\n      node.refKey = refKey;\n      _this8.nodes[refKey] = (_this8$nodes$refKey = {\n        layer: layer\n      }, _this8$nodes$refKey[labelKey] = node[labelKey], _this8$nodes$refKey[valueKey] = node[valueKey], _this8$nodes$refKey.expand = _this8.getExpandState(node, props), _this8$nodes$refKey.uncheckable = _this8.getUncheckableState(node), _this8$nodes$refKey.refKey = refKey, _this8$nodes$refKey);\n\n      if (parentNode) {\n        _this8.nodes[refKey].parentNode = parentNode;\n      }\n\n      _this8.flattenNodes(node[childrenKey], props, refKey, _this8.nodes[refKey], layer);\n    });\n  }\n  /**\n   * 过滤选中的values中不包含 uncheckableItemValues 的那些值\n   * @param {*} values\n   */\n  ;\n\n  _proto.filterSelectedValues = function filterSelectedValues(values) {\n    var _this$props$uncheckab = this.props.uncheckableItemValues,\n        uncheckableItemValues = _this$props$uncheckab === void 0 ? [] : _this$props$uncheckab;\n    return values.filter(function (value) {\n      return !uncheckableItemValues.includes(value);\n    });\n  };\n\n  _proto.serializeList = function serializeList(key, nodes) {\n    if (nodes === void 0) {\n      nodes = this.nodes;\n    }\n\n    var valueKey = this.props.valueKey;\n    var list = [];\n    Object.keys(nodes).forEach(function (refKey) {\n      if (nodes[refKey][key]) {\n        list.push(nodes[refKey][valueKey]);\n      }\n    });\n    return list;\n  };\n\n  _proto.serializeListOnlyParent = function serializeListOnlyParent(key, nodes) {\n    if (nodes === void 0) {\n      nodes = this.nodes;\n    }\n\n    var valueKey = this.props.valueKey;\n    var list = [];\n    Object.keys(nodes).forEach(function (refKey) {\n      var currentNode = nodes[refKey];\n\n      if (currentNode.parentNode) {\n        var parentNode = nodes[currentNode.parentNode.refKey];\n\n        if (currentNode[key]) {\n          if (!parentNode.checkAll) {\n            list.push(nodes[refKey][valueKey]);\n          } else if (!(0, _utils3.getTopParentNodeCheckState)(nodes, currentNode) && parentNode.uncheckable) {\n            list.push(nodes[refKey][valueKey]);\n          }\n        }\n      } else {\n        if (currentNode[key]) {\n          list.push(nodes[refKey][valueKey]);\n        }\n      }\n    });\n    return list;\n  };\n\n  _proto.unserializeLists = function unserializeLists(lists, nextProps) {\n    var _this9 = this;\n\n    if (nextProps === void 0) {\n      nextProps = this.props;\n    }\n\n    var _nextProps = nextProps,\n        valueKey = _nextProps.valueKey,\n        cascade = _nextProps.cascade,\n        _nextProps$uncheckabl = _nextProps.uncheckableItemValues,\n        uncheckableItemValues = _nextProps$uncheckabl === void 0 ? [] : _nextProps$uncheckabl;\n    var expandAll = this.getExpandAll(); // Reset values to false\n\n    Object.keys(this.nodes).forEach(function (refKey) {\n      Object.keys(lists).forEach(function (listKey) {\n        if (listKey === 'check') {\n          var node = _this9.nodes[refKey];\n\n          if (cascade && 'parentNode' in node) {\n            node[listKey] = node.parentNode[listKey];\n          } else {\n            node[listKey] = false;\n          }\n\n          lists[listKey].forEach(function (value) {\n            if ((0, _utils.shallowEqual)(_this9.nodes[refKey][valueKey], value) && !uncheckableItemValues.some(function (uncheckableValue) {\n              return (0, _utils.shallowEqual)(value, uncheckableValue);\n            })) {\n              _this9.nodes[refKey][listKey] = true;\n            }\n          });\n        }\n\n        if (listKey === 'expand') {\n          if (lists[listKey].length) {\n            lists[listKey].forEach(function (value) {\n              if ((0, _utils.shallowEqual)(_this9.nodes[refKey][valueKey], value)) {\n                _this9.nodes[refKey][listKey] = true;\n              }\n            });\n          } else {\n            _this9.nodes[refKey][listKey] = expandAll;\n          }\n        }\n      });\n    });\n  };\n\n  _proto.toggleChecked = function toggleChecked(node, isChecked) {\n    var nodes = (0, _utils2.clone)(this.nodes);\n    this.toggleDownChecked(nodes, node, isChecked);\n    node.parentNode && this.toggleUpChecked(nodes, node.parentNode, isChecked);\n    var values = this.serializeListOnlyParent('check', nodes);\n    return this.filterSelectedValues(values);\n  };\n\n  _proto.toggleUpChecked = function toggleUpChecked(nodes, node, checked) {\n    var cascade = this.props.cascade;\n    var currentNode = nodes[node.refKey];\n\n    if (cascade) {\n      if (!checked) {\n        currentNode.check = checked;\n        currentNode.checkAll = checked;\n      } else {\n        if (this.everyChildChecked(nodes, node)) {\n          currentNode.check = true;\n          currentNode.checkAll = true;\n        } else {\n          currentNode.check = false;\n          currentNode.checkAll = false;\n        }\n      }\n\n      if (node.parentNode) {\n        this.toggleUpChecked(nodes, node.parentNode, checked);\n      }\n    }\n  };\n\n  _proto.toggleDownChecked = function toggleDownChecked(nodes, node, isChecked) {\n    var _this10 = this;\n\n    var _this$props9 = this.props,\n        childrenKey = _this$props9.childrenKey,\n        cascade = _this$props9.cascade;\n    nodes[node.refKey].check = isChecked;\n\n    if (!node[childrenKey] || !node[childrenKey].length || !cascade) {\n      nodes[node.refKey].checkAll = false;\n    } else {\n      nodes[node.refKey].checkAll = isChecked;\n      node[childrenKey].forEach(function (child) {\n        _this10.toggleDownChecked(nodes, child, isChecked);\n      });\n    }\n  };\n\n  _proto.toggleNode = function toggleNode(key, node, toggleValue) {\n    // 如果该节点处于 disabledChecbox，则忽略该值\n    if (!node.uncheckable) {\n      this.nodes[node.refKey][key] = toggleValue;\n    }\n  };\n\n  _proto.toggleExpand = function toggleExpand(node, isExpand) {\n    this.nodes[node.refKey].expand = isExpand;\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this$props10 = this.props,\n        _this$props10$height = _this$props10.height,\n        height = _this$props10$height === void 0 ? defaultHeight : _this$props10$height,\n        locale = _this$props10.locale,\n        placement = _this$props10.placement,\n        menuStyle = _this$props10.menuStyle,\n        searchable = _this$props10.searchable,\n        renderMenu = _this$props10.renderMenu,\n        virtualized = _this$props10.virtualized,\n        searchKeyword = _this$props10.searchKeyword,\n        renderExtraFooter = _this$props10.renderExtraFooter,\n        menuClassName = _this$props10.menuClassName,\n        menuAutoWidth = _this$props10.menuAutoWidth;\n    var keyword = !(0, _isUndefined2.default)(searchKeyword) ? searchKeyword : this.state.searchKeyword;\n    var classes = (0, _classnames.default)(menuClassName, this.addPrefix('checktree-menu'), this.addPrefix(\"placement-\" + (0, _kebabCase2.default)(placement)));\n    var menu = this.renderCheckTree();\n    var styles = virtualized ? (0, _extends2.default)({\n      height: height\n    }, menuStyle) : menuStyle;\n    return React.createElement(_picker.MenuWrapper, {\n      autoWidth: menuAutoWidth,\n      className: classes,\n      style: styles,\n      ref: this.bindMenuRef,\n      getToggleInstance: this.getToggleInstance,\n      getPositionInstance: this.getPositionInstance\n    }, searchable ? React.createElement(_picker.SearchBar, {\n      placeholder: locale.searchPlaceholder,\n      key: \"searchBar\",\n      onChange: this.handleSearch,\n      value: keyword\n    }) : null, renderMenu ? renderMenu(menu) : menu, renderExtraFooter && renderExtraFooter());\n  };\n\n  _proto.renderNode = function renderNode(node, index, layer, classPrefix) {\n    var _this11 = this;\n\n    var _this$state3 = this.state,\n        activeNode = _this$state3.activeNode,\n        expandAll = _this$state3.expandAll;\n    var _this$props11 = this.props,\n        valueKey = _this$props11.valueKey,\n        labelKey = _this$props11.labelKey,\n        childrenKey = _this$props11.childrenKey,\n        renderTreeNode = _this$props11.renderTreeNode,\n        renderTreeIcon = _this$props11.renderTreeIcon,\n        cascade = _this$props11.cascade;\n    var visible = node.visible,\n        refKey = node.refKey;\n\n    if (!visible) {\n      return null;\n    }\n\n    var key = (0, _isString2.default)(node[valueKey]) || (0, _isNumber2.default)(node[valueKey]) ? node[valueKey] : refKey;\n    var children = node[childrenKey];\n    var hasNotEmptyChildren = children && Array.isArray(children) && children.length > 0;\n    var props = {\n      value: node[valueKey],\n      label: node[labelKey],\n      index: index,\n      layer: layer,\n      active: activeNode ? (0, _utils.shallowEqual)(activeNode[valueKey], node[valueKey]) : false,\n      visible: node.visible,\n      disabled: this.getDisabledState(node),\n      nodeData: node,\n      children: children,\n      expandAll: expandAll,\n      checkState: this.getNodeCheckState(node, cascade),\n      parentNode: node.parentNode,\n      hasChildren: !!children,\n      uncheckable: node.uncheckable,\n      allUncheckable: (0, _utils3.getSiblingNodeUncheckable)(node, this.nodes),\n      onSelect: this.handleSelect,\n      onTreeToggle: this.handleToggle,\n      onRenderTreeNode: renderTreeNode,\n      onRenderTreeIcon: renderTreeIcon\n    };\n\n    if (props.hasChildren) {\n      var _classNames;\n\n      layer += 1; // 是否展开树节点且子节点不为空\n\n      var openClass = classPrefix + \"-open\";\n      var expandControlled = 'expandAll' in this.props;\n      var expandALlState = expandControlled ? expandAll : expandAll || node.expand;\n      var childrenClass = (0, _classnames.default)(classPrefix + \"-node-children\", (_classNames = {}, _classNames[openClass] = expandALlState && hasNotEmptyChildren, _classNames));\n      var nodes = children || [];\n      return React.createElement(\"div\", {\n        className: childrenClass,\n        key: key,\n        ref: this.bindNodeRefs.bind(this, refKey)\n      }, React.createElement(_CheckTreeNode.default, (0, _extends2.default)({\n        classPrefix: classPrefix,\n        key: key,\n        ref: this.bindNodeRefs.bind(this, refKey)\n      }, props)), React.createElement(\"div\", {\n        className: classPrefix + \"-children\"\n      }, nodes.map(function (child, i) {\n        return _this11.renderNode(child, i, layer, classPrefix);\n      })));\n    }\n\n    return React.createElement(_CheckTreeNode.default, (0, _extends2.default)({\n      classPrefix: classPrefix,\n      key: key,\n      ref: this.bindNodeRefs.bind(this, refKey)\n    }, props));\n  };\n\n  _proto.renderVirtualNode = function renderVirtualNode(node, options) {\n    var _this$state4 = this.state,\n        activeNode = _this$state4.activeNode,\n        expandAll = _this$state4.expandAll;\n    var _this$props12 = this.props,\n        valueKey = _this$props12.valueKey,\n        labelKey = _this$props12.labelKey,\n        childrenKey = _this$props12.childrenKey,\n        renderTreeNode = _this$props12.renderTreeNode,\n        renderTreeIcon = _this$props12.renderTreeIcon,\n        cascade = _this$props12.cascade;\n    var key = options.key,\n        style = options.style,\n        classPrefix = options.classPrefix;\n    var layer = node.layer,\n        refKey = node.refKey,\n        expand = node.expand,\n        showNode = node.showNode;\n    var children = node[childrenKey];\n    var props = {\n      value: node[valueKey],\n      label: node[labelKey],\n      layer: layer,\n      expand: expand,\n      active: activeNode ? (0, _utils.shallowEqual)(activeNode[valueKey], node[valueKey]) : false,\n      visible: node.visible,\n      disabled: this.getDisabledState(node),\n      nodeData: node,\n      children: children,\n      expandAll: expandAll,\n      checkState: this.getNodeCheckState(node, cascade),\n      parentNode: node.parentNode,\n      hasChildren: !!children,\n      uncheckable: node.uncheckable,\n      allUncheckable: (0, _utils3.getSiblingNodeUncheckable)(node, this.nodes),\n      onSelect: this.handleSelect,\n      onTreeToggle: this.handleToggle,\n      onRenderTreeNode: renderTreeNode,\n      onRenderTreeIcon: renderTreeIcon\n    };\n    return showNode && React.createElement(_CheckTreeNode.default, (0, _extends2.default)({\n      style: style,\n      classPrefix: classPrefix,\n      key: key,\n      ref: this.bindNodeRefs.bind(this, refKey)\n    }, props));\n  };\n\n  _proto.renderCheckTree = function renderCheckTree() {\n    var _classNames2,\n        _this12 = this,\n        _classNames3;\n\n    var _this$state5 = this.state,\n        filterData = _this$state5.filterData,\n        isSomeNodeHasChildren = _this$state5.isSomeNodeHasChildren;\n    var _this$props13 = this.props,\n        inline = _this$props13.inline,\n        style = _this$props13.style,\n        height = _this$props13.height,\n        _this$props13$classNa = _this$props13.className,\n        className = _this$props13$classNa === void 0 ? '' : _this$props13$classNa,\n        onScroll = _this$props13.onScroll,\n        locale = _this$props13.locale,\n        virtualized = _this$props13.virtualized; // 树节点的层级\n\n    var layer = 0;\n    var treeViewClass = this.addPrefix('checktree-view');\n    var classes = (0, _classnames.default)(treeViewClass, (_classNames2 = {}, _classNames2[className] = inline, _classNames2['without-children'] = !isSomeNodeHasChildren, _classNames2));\n    var formattedNodes = [];\n\n    if (!virtualized) {\n      formattedNodes = this.getFormattedTree(filterData).map(function (node, index) {\n        return _this12.renderNode(node, index, layer, treeViewClass);\n      });\n\n      if (!formattedNodes.some(function (v) {\n        return v !== null;\n      })) {\n        return React.createElement(\"div\", {\n          className: this.addPrefix('none')\n        }, locale.noResultsText);\n      }\n    } else {\n      formattedNodes = this.getFlattenTreeData(filterData).filter(function (n) {\n        return n.showNode && n.visible;\n      });\n\n      if (!formattedNodes.length) {\n        return React.createElement(\"div\", {\n          className: this.addPrefix('none')\n        }, locale.noResultsText);\n      }\n    } // 当未定义 height 且 设置了 virtualized 为 true，treeHeight 设置默认高度\n\n\n    var treeHeight = (0, _isUndefined2.default)(height) && virtualized ? defaultHeight : height;\n    var styles = inline ? (0, _extends2.default)({\n      height: treeHeight\n    }, style) : {};\n    var treeNodesClass = (0, _classnames.default)(this.addPrefix('checktree-nodes'), (_classNames3 = {}, _classNames3[this.addPrefix('all-uncheckable')] = this.getEveryFisrtLevelNodeUncheckable(), _classNames3));\n    var ListHeight = (0, _treeUtils.getVirtualLisHeight)(inline, treeHeight);\n    return React.createElement(\"div\", {\n      ref: this.bindTreeViewRef,\n      className: classes,\n      style: styles,\n      onScroll: onScroll,\n      onKeyDown: this.handleKeyDown\n    }, React.createElement(\"div\", {\n      className: treeNodesClass\n    }, virtualized ? React.createElement(_AutoSizer.default, {\n      defaultHeight: ListHeight,\n      defaultWidth: defaultWidth\n    }, function (_ref3) {\n      var height = _ref3.height,\n          width = _ref3.width;\n      return React.createElement(_List.default, {\n        ref: _this12.bindListRef,\n        width: width || defaultWidth,\n        height: height || ListHeight,\n        rowHeight: 36,\n        rowCount: formattedNodes.length,\n        rowRenderer: _this12.measureRowRenderer(formattedNodes)\n      });\n    }) : formattedNodes));\n  };\n\n  _proto.render = function render() {\n    var _this$props14 = this.props,\n        cascade = _this$props14.cascade,\n        style = _this$props14.style,\n        locale = _this$props14.locale,\n        inline = _this$props14.inline,\n        disabled = _this$props14.disabled,\n        valueKey = _this$props14.valueKey,\n        labelKey = _this$props14.labelKey,\n        cleanable = _this$props14.cleanable,\n        countable = _this$props14.countable,\n        placeholder = _this$props14.placeholder,\n        toggleComponentClass = _this$props14.toggleComponentClass,\n        onExited = _this$props14.onExited,\n        onEntered = _this$props14.onEntered,\n        onClean = _this$props14.onClean,\n        renderValue = _this$props14.renderValue,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props14, [\"cascade\", \"style\", \"locale\", \"inline\", \"disabled\", \"valueKey\", \"labelKey\", \"cleanable\", \"countable\", \"placeholder\", \"toggleComponentClass\", \"onExited\", \"onEntered\", \"onClean\", \"renderValue\"]);\n    var _this$state6 = this.state,\n        hasValue = _this$state6.hasValue,\n        selectedValues = _this$state6.selectedValues;\n    var classes = (0, _picker.getToggleWrapperClassName)('checktree', this.addPrefix, this.props, hasValue);\n    var selectedItems = this.getSelectedItems(selectedValues);\n    var selectedElement = placeholder;\n\n    if (hasValue && selectedValues.length) {\n      selectedElement = React.createElement(_picker.SelectedElement, {\n        selectedItems: selectedItems,\n        countable: countable,\n        valueKey: valueKey,\n        labelKey: labelKey,\n        prefix: this.addPrefix,\n        cascade: cascade,\n        locale: locale\n      });\n\n      if (renderValue) {\n        selectedElement = renderValue(selectedValues, selectedItems, selectedElement);\n      }\n    }\n\n    var unhandled = (0, _utils2.getUnhandledProps)(CheckTree, rest);\n\n    if (inline) {\n      return this.renderCheckTree();\n    }\n\n    return React.createElement(_picker.PickerToggleTrigger, {\n      pickerProps: this.props,\n      innerRef: this.bindTriggerRef,\n      positionRef: this.bindPositionRef,\n      onEntered: (0, _utils2.createChainedFunction)(this.handleOnOpen, onEntered),\n      onExit: (0, _utils2.createChainedFunction)(this.handleOnClose, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      ref: this.bindContainerRef\n    }, React.createElement(_picker.PickerToggle, (0, _extends2.default)({}, unhandled, {\n      ref: this.bindToggleRef,\n      onKeyDown: this.handleToggleKeyDown,\n      onClean: (0, _utils2.createChainedFunction)(this.handleClean, onClean),\n      componentClass: toggleComponentClass,\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: this.state.active\n    }), selectedElement || locale.placeholder)));\n  };\n\n  return CheckTree;\n}(React.Component);\n\n(0, _defineProperty2.default)(CheckTree, \"defaultProps\", {\n  locale: {\n    placeholder: 'Select',\n    searchPlaceholder: 'Search',\n    noResultsText: 'No results found',\n    checkAll: 'All'\n  },\n  inline: false,\n  cascade: true,\n  valueKey: 'value',\n  labelKey: 'label',\n  cleanable: true,\n  countable: true,\n  placement: 'bottomLeft',\n  appearance: 'default',\n  searchable: true,\n  virtualized: false,\n  menuAutoWidth: true,\n  defaultValue: [],\n  childrenKey: 'children',\n  defaultExpandAll: false,\n  uncheckableItemValues: []\n});\n(0, _defineProperty2.default)(CheckTree, \"handledProps\", [\"appearance\", \"block\", \"cascade\", \"childrenKey\", \"className\", \"classPrefix\", \"cleanable\", \"container\", \"containerPadding\", \"countable\", \"data\", \"defaultExpandAll\", \"defaultOpen\", \"defaultValue\", \"disabled\", \"disabledItemValues\", \"expandAll\", \"height\", \"inline\", \"labelKey\", \"locale\", \"menuAutoWidth\", \"menuClassName\", \"menuStyle\", \"onChange\", \"onClean\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onExpand\", \"onHide\", \"onOpen\", \"onScroll\", \"onSearch\", \"onSelect\", \"open\", \"placeholder\", \"placement\", \"renderExtraFooter\", \"renderMenu\", \"renderTreeIcon\", \"renderTreeNode\", \"renderValue\", \"searchKeyword\", \"searchable\", \"style\", \"toggleComponentClass\", \"uncheckableItemValues\", \"value\", \"valueKey\", \"virtualized\"]);\n(0, _reactLifecyclesCompat.polyfill)(CheckTree);\nvar enhance = (0, _utils2.defaultProps)({\n  classPrefix: 'picker'\n});\n\nvar _default = enhance(CheckTree);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}