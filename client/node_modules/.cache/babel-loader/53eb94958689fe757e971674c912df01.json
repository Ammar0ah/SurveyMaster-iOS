{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaModel = exports.Schema = undefined;\n\nvar _StringType = require('./StringType');\n\nvar _StringType2 = _interopRequireDefault(_StringType);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Schema = exports.Schema = function () {\n  function Schema(schema) {\n    _classCallCheck(this, Schema);\n\n    this.schema = schema;\n  }\n\n  Schema.prototype.getFieldType = function getFieldType(fieldName) {\n    return this.schema[fieldName] || new _StringType2.default();\n  };\n\n  Schema.prototype.getKeys = function getKeys() {\n    return Object.keys(this.schema);\n  };\n\n  Schema.prototype.checkForField = function checkForField(fieldName, fieldValue, data) {\n    var fieldChecker = this.schema[fieldName];\n\n    if (!fieldChecker) {\n      return {\n        hasError: false\n      }; // fieldValue can be anything if no schema defined\n    }\n\n    return fieldChecker.check(fieldValue, data);\n  };\n\n  Schema.prototype.check = function check(data) {\n    var _this = this;\n\n    var checkResult = {};\n    Object.keys(this.schema).forEach(function (key) {\n      checkResult[key] = _this.checkForField(key, data[key], data);\n    });\n    return checkResult;\n  };\n\n  return Schema;\n}();\n\nvar SchemaModel = exports.SchemaModel = function SchemaModel(o) {\n  return new Schema(o);\n};\n\nSchemaModel.combine = function () {\n  for (var _len = arguments.length, models = Array(_len), _key = 0; _key < _len; _key++) {\n    models[_key] = arguments[_key];\n  }\n\n  return new Schema(models.map(function (model) {\n    return model.schema;\n  }).reduce(function (accumulator, currentValue) {\n    return Object.assign(accumulator, currentValue);\n  }, {}));\n};","map":null,"metadata":{},"sourceType":"script"}