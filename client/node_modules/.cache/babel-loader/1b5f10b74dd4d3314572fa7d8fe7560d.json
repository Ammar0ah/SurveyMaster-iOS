{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _kebabCase2 = _interopRequireDefault(require(\"lodash/kebabCase\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _rsuiteIntl = require(\"rsuite-intl\");\n\nvar _utils = require(\"rsuite-utils/lib/utils\");\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _DropdownMenu = _interopRequireDefault(require(\"./DropdownMenu\"));\n\nvar _utils2 = require(\"../utils\");\n\nvar _stringToObject2 = _interopRequireDefault(require(\"../utils/stringToObject\"));\n\nvar _treeUtils = require(\"../utils/treeUtils\");\n\nvar _picker = require(\"../_picker\");\n\nfunction getDerivedStateForCascade(nextProps, prevState, selectNodeValue, newChildren) {\n  var data = nextProps.data,\n      labelKey = nextProps.labelKey,\n      valueKey = nextProps.valueKey,\n      childrenKey = nextProps.childrenKey,\n      value = nextProps.value;\n  var activeItemValue = selectNodeValue || (typeof value === 'undefined' ? prevState.value : value);\n  var nextItems = [];\n  var nextPathItems = [];\n\n  var findNode = function findNode(items) {\n    var _loop = function _loop(i) {\n      items[i] = (0, _stringToObject2.default)(items[i], labelKey, valueKey);\n      var children = items[i][childrenKey];\n\n      if ((0, _utils.shallowEqual)(items[i][valueKey], activeItemValue)) {\n        return {\n          v: {\n            items: items,\n            active: items[i]\n          }\n        };\n      } else if (children) {\n        var v = findNode(children);\n\n        if (v) {\n          nextItems.push(children.map(function (item) {\n            return (0, _extends3.default)({}, (0, _stringToObject2.default)(item, labelKey, valueKey), {\n              parent: items[i]\n            });\n          }));\n          nextPathItems.push(v.active);\n          return {\n            v: {\n              items: items,\n              active: items[i]\n            }\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < items.length; i += 1) {\n      var _ret = _loop(i);\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return null;\n  };\n\n  var activeItem = findNode(data);\n  nextItems.push(data);\n\n  if (activeItem) {\n    nextPathItems.push(activeItem.active);\n  }\n  /**\n   * 如果是异步更新 data 后，获取到的一个 selectNodeValue，则不更新 activePaths\n   * 但是需要更新 items， 因为这里的目的就是把异步更新后的的数据展示出来\n   */\n\n\n  var cascadePathItems = nextPathItems.reverse();\n\n  if (selectNodeValue) {\n    return {\n      items: [].concat(nextItems.reverse(), [newChildren]),\n      tempActivePaths: cascadePathItems\n    };\n  }\n\n  return {\n    items: nextItems.reverse(),\n    activePaths: cascadePathItems\n  };\n}\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (node, cascadeItems, activePaths, isLeafNode, event) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          onSelect = _this$props.onSelect,\n          valueKey = _this$props.valueKey;\n\n      var prevValue = _this.getValue();\n\n      var value = node[valueKey];\n      onSelect && onSelect(node, activePaths, (0, _picker.createConcatChildrenFunction)(node), event);\n      /**\n       * 只有在叶子节点的时候才当做是可以选择的值\n       * 一个节点的 children 为 null 或者 undefined 的是就是叶子节点\n       */\n\n      if (isLeafNode) {\n        _this.closeDropdown();\n\n        var nextState = (0, _extends3.default)({\n          selectNode: node\n        }, getDerivedStateForCascade(_this.props, {\n          value: value\n        }));\n\n        if (typeof _this.props.value === 'undefined') {\n          nextState.value = value;\n        }\n\n        _this.setState(nextState);\n\n        if (!(0, _utils.shallowEqual)(value, prevValue)) {\n          onChange && onChange(value, event);\n        }\n\n        return;\n      }\n\n      _this.setState({\n        selectNode: node,\n        items: cascadeItems,\n        tempActivePaths: activePaths\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSearchRowSelect\", function (item, event) {\n      var _this$props2 = _this.props,\n          valueKey = _this$props2.valueKey,\n          onChange = _this$props2.onChange;\n      var value = item[valueKey];\n\n      var _getDerivedStateForCa = getDerivedStateForCascade(_this.props, {\n        value: value\n      }),\n          activePaths = _getDerivedStateForCa.activePaths,\n          items = _getDerivedStateForCa.items;\n\n      _this.closeDropdown();\n\n      _this.setState({\n        selectNode: item,\n        searchKeyword: '',\n        activePaths: activePaths,\n        items: items,\n        value: value\n      });\n\n      onChange && onChange(value, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"trigger\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindTriggerRef\", function (ref) {\n      _this.trigger = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"menuContainer\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindMenuContainerRef\", function (ref) {\n      _this.menuContainer = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"container\", null);\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"bindContainerRef\", function (ref) {\n      _this.container = ref;\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"closeDropdown\", function () {\n      if (_this.trigger) {\n        _this.trigger.hide();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClean\", function (event) {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          onChange = _this$props3.onChange,\n          data = _this$props3.data;\n\n      if (disabled) {\n        return;\n      }\n\n      var nextState = {\n        items: [data],\n        value: null,\n        selectNode: null,\n        activePaths: [],\n        tempActivePaths: []\n      };\n\n      _this.setState(nextState, function () {\n        onChange && onChange(null, event);\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSearch\", function (searchKeyword, event) {\n      var onSearch = _this.props.onSearch;\n\n      _this.setState({\n        searchKeyword: searchKeyword\n      });\n\n      onSearch && onSearch(searchKeyword, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleEntered\", function () {\n      var onOpen = _this.props.onOpen;\n      onOpen && onOpen();\n\n      _this.setState({\n        active: true\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleExit\", function () {\n      var onClose = _this.props.onClose;\n      onClose && onClose();\n\n      _this.setState({\n        searchKeyword: '',\n        active: false\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils2.prefix)(_this.props.classPrefix)(name);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"renderSearchRow\", function (item, key) {\n      var _extends2, _classNames;\n\n      var _this$props4 = _this.props,\n          labelKey = _this$props4.labelKey,\n          valueKey = _this$props4.valueKey,\n          _this$props4$disabled = _this$props4.disabledItemValues,\n          disabledItemValues = _this$props4$disabled === void 0 ? [] : _this$props4$disabled;\n      var searchKeyword = _this.state.searchKeyword;\n      var nodes = (0, _treeUtils.getNodeParents)(item);\n      var regx = new RegExp(searchKeyword, 'ig');\n      var labelElements = [];\n      var a = item[labelKey].split(regx);\n      var b = item[labelKey].match(regx);\n\n      for (var i = 0; i < a.length; i++) {\n        labelElements.push(a[i]);\n\n        if (b[i]) {\n          labelElements.push(React.createElement(\"strong\", {\n            key: i\n          }, b[i]));\n        }\n      }\n\n      nodes.push((0, _extends3.default)({}, item, (_extends2 = {}, _extends2[labelKey] = labelElements, _extends2)));\n      var disabled = disabledItemValues.some(function (value) {\n        return nodes.some(function (node) {\n          return node[valueKey] === value;\n        });\n      });\n      var itemClasses = (0, _classnames.default)(_this.addPrefix('cascader-row'), (_classNames = {}, _classNames[_this.addPrefix('cascader-row-disabled')] = disabled, _classNames));\n      return React.createElement(\"div\", {\n        key: key,\n        className: itemClasses,\n        onClick: function onClick(event) {\n          if (!disabled) {\n            _this.handleSearchRowSelect(item, event);\n          }\n        }\n      }, nodes.map(function (node, index) {\n        return React.createElement(\"span\", {\n          key: \"col-\" + index,\n          className: _this.addPrefix('cascader-col')\n        }, node[labelKey]);\n      }));\n    });\n    var initState = {\n      searchKeyword: '',\n      selectNode: null,\n      data: props.data,\n      value: props.defaultValue,\n\n      /**\n       * 选中值的路径\n       */\n      activePaths: [],\n\n      /**\n       * 用于展示面板的数据列表，是一个二维的数组\n       * 是通过 data 树结构转换成的二维的数组，其中只包含页面上展示的数据\n       */\n      items: []\n    };\n    _this.state = (0, _extends3.default)({}, initState, getDerivedStateForCascade(props, initState), {\n      flattenData: (0, _treeUtils.flattenTree)(props.data)\n    });\n    return _this;\n  }\n\n  Dropdown.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var value = nextProps.value,\n        data = nextProps.data,\n        labelKey = nextProps.labelKey,\n        valueKey = nextProps.valueKey;\n\n    if (data !== prevState.data) {\n      /**\n       * 如果更新了 data,\n       * 首先获取到被点击节点的值 `selectNodeValue`， 然后再拿到新增后的 `newChildren`,\n       */\n      var selectNodeValue = (0, _get2.default)(prevState, ['selectNode', valueKey]);\n      var newChildren = (0, _get2.default)((0, _utils.findNodeOfTree)(data, function (item) {\n        return (0, _utils.shallowEqual)(item[valueKey], selectNodeValue);\n      }), 'children') || [];\n      var nextState = getDerivedStateForCascade(nextProps, prevState, selectNodeValue, newChildren.map(function (item) {\n        return (0, _stringToObject2.default)(item, labelKey, valueKey);\n      }));\n      return (0, _extends3.default)({}, nextState, {\n        data: data,\n        flattenData: (0, _treeUtils.flattenTree)(data)\n      });\n    } else if (typeof value !== 'undefined' && !(0, _utils.shallowEqual)(value, prevState.value)) {\n      var _nextState = getDerivedStateForCascade(nextProps, prevState);\n\n      return (0, _extends3.default)({}, _nextState, {\n        value: value\n      });\n    }\n\n    return null;\n  };\n\n  var _proto = Dropdown.prototype;\n\n  _proto.getValue = function getValue(nextProps) {\n    var _ref = nextProps || this.props,\n        value = _ref.value;\n\n    return (0, _isUndefined2.default)(value) ? this.state.value : value;\n  };\n  /**\n   * 在 data 对象中的数据类型是字符串比如: ['foo']\n   * 通过这个行数可以把值转换成 [{name:'foo':value:'foo'}]\n   */\n\n\n  _proto.stringToObject = function stringToObject(value) {\n    var _this$props5 = this.props,\n        labelKey = _this$props5.labelKey,\n        valueKey = _this$props5.valueKey;\n    return (0, _stringToObject2.default)(value, labelKey, valueKey);\n  };\n\n  _proto.getSearchResult = function getSearchResult() {\n    var labelKey = this.props.labelKey;\n    var _this$state = this.state,\n        searchKeyword = _this$state.searchKeyword,\n        flattenData = _this$state.flattenData;\n    var items = [];\n    var result = flattenData.filter(function (item) {\n      if (item[labelKey].match(new RegExp(searchKeyword, 'i'))) {\n        return true;\n      }\n\n      return false;\n    });\n\n    for (var i = 0; i < result.length; i++) {\n      items.push(result[i]);\n\n      if (i === 99) {\n        return items;\n      }\n    }\n\n    return items;\n  };\n\n  _proto.renderSearchResultPanel = function renderSearchResultPanel() {\n    var locale = this.props.locale;\n    var searchKeyword = this.state.searchKeyword;\n\n    if (searchKeyword === '') {\n      return null;\n    }\n\n    var items = this.getSearchResult();\n    return React.createElement(\"div\", {\n      className: this.addPrefix('cascader-search-panel')\n    }, items.length ? items.map(this.renderSearchRow) : React.createElement(\"div\", {\n      className: this.addPrefix('none')\n    }, locale.noResultsText));\n  };\n\n  _proto.renderDropdownMenu = function renderDropdownMenu() {\n    var _this$state2 = this.state,\n        items = _this$state2.items,\n        tempActivePaths = _this$state2.tempActivePaths,\n        activePaths = _this$state2.activePaths,\n        searchKeyword = _this$state2.searchKeyword;\n    var _this$props6 = this.props,\n        renderMenu = _this$props6.renderMenu,\n        placement = _this$props6.placement,\n        renderExtraFooter = _this$props6.renderExtraFooter,\n        menuClassName = _this$props6.menuClassName,\n        menuStyle = _this$props6.menuStyle,\n        searchable = _this$props6.searchable,\n        locale = _this$props6.locale;\n    var classes = (0, _classnames.default)(this.addPrefix('cascader-menu'), this.addPrefix(\"placement-\" + (0, _kebabCase2.default)(placement)), menuClassName);\n    var menuProps = (0, _pick2.default)(this.props, _DropdownMenu.default.handledProps.filter(function (name) {\n      return name !== 'classPrefix';\n    }));\n    return React.createElement(_picker.MenuWrapper, {\n      className: classes,\n      style: menuStyle\n    }, searchable && React.createElement(_picker.SearchBar, {\n      placeholder: locale.searchPlaceholder,\n      onChange: this.handleSearch,\n      value: searchKeyword\n    }), this.renderSearchResultPanel(), searchKeyword === '' && React.createElement(_DropdownMenu.default, (0, _extends3.default)({}, menuProps, {\n      classPrefix: this.addPrefix('cascader-menu'),\n      ref: this.bindMenuContainerRef,\n      cascadeItems: items,\n      cascadePathItems: tempActivePaths || activePaths,\n      activeItemValue: this.getValue(),\n      onSelect: this.handleSelect,\n      renderMenu: renderMenu\n    })), renderExtraFooter && renderExtraFooter());\n  };\n\n  _proto.render = function render() {\n    var _this$props7 = this.props,\n        valueKey = _this$props7.valueKey,\n        labelKey = _this$props7.labelKey,\n        placeholder = _this$props7.placeholder,\n        renderValue = _this$props7.renderValue,\n        disabled = _this$props7.disabled,\n        cleanable = _this$props7.cleanable,\n        locale = _this$props7.locale,\n        toggleComponentClass = _this$props7.toggleComponentClass,\n        style = _this$props7.style,\n        onEnter = _this$props7.onEnter,\n        onExited = _this$props7.onExited,\n        onClean = _this$props7.onClean,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props7, [\"valueKey\", \"labelKey\", \"placeholder\", \"renderValue\", \"disabled\", \"cleanable\", \"locale\", \"toggleComponentClass\", \"style\", \"onEnter\", \"onExited\", \"onClean\"]);\n    var _this$state3 = this.state,\n        activePaths = _this$state3.activePaths,\n        active = _this$state3.active;\n    var unhandled = (0, _utils2.getUnhandledProps)(Dropdown, rest);\n    var value = this.getValue();\n    var hasValue = !!value;\n    var activeItemLabel = placeholder;\n\n    if (activePaths.length > 0) {\n      activeItemLabel = [];\n      activePaths.forEach(function (item, index) {\n        var key = item[valueKey] || item[labelKey];\n        activeItemLabel.push(React.createElement(\"span\", {\n          key: key\n        }, item[labelKey]));\n\n        if (index < activePaths.length - 1) {\n          activeItemLabel.push(React.createElement(\"span\", {\n            className: \"separator\",\n            key: key + \"-separator\"\n          }, ' / '));\n        }\n      });\n\n      if (renderValue) {\n        activeItemLabel = renderValue(value, activePaths, activeItemLabel);\n      }\n    }\n\n    var classes = (0, _picker.getToggleWrapperClassName)('cascader', this.addPrefix, this.props, hasValue);\n    return React.createElement(_rsuiteIntl.IntlProvider, {\n      locale: locale\n    }, React.createElement(\"div\", {\n      className: classes,\n      style: style,\n      tabIndex: -1,\n      role: \"menu\",\n      ref: this.bindContainerRef\n    }, React.createElement(_picker.PickerToggleTrigger, {\n      pickerProps: this.props,\n      innerRef: this.bindTriggerRef,\n      onEnter: (0, _utils2.createChainedFunction)(this.handleEntered, onEnter),\n      onExit: (0, _utils2.createChainedFunction)(this.handleExit, onExited),\n      speaker: this.renderDropdownMenu()\n    }, React.createElement(_picker.PickerToggle, (0, _extends3.default)({}, unhandled, {\n      componentClass: toggleComponentClass,\n      onClean: (0, _utils2.createChainedFunction)(this.handleClean, onClean),\n      cleanable: cleanable && !disabled,\n      hasValue: hasValue,\n      active: active\n    }), activeItemLabel || React.createElement(_rsuiteIntl.FormattedMessage, {\n      id: \"placeholder\"\n    })))));\n  };\n\n  return Dropdown;\n}(React.Component);\n\n(0, _defineProperty2.default)(Dropdown, \"defaultProps\", {\n  appearance: 'default',\n  data: [],\n  disabledItemValues: [],\n  childrenKey: 'children',\n  valueKey: 'value',\n  labelKey: 'label',\n  locale: {\n    placeholder: 'Select',\n    searchPlaceholder: 'Search',\n    noResultsText: 'No results found'\n  },\n  cleanable: true,\n  searchable: true,\n  placement: 'bottomLeft'\n});\n(0, _defineProperty2.default)(Dropdown, \"handledProps\", [\"appearance\", \"block\", \"childrenKey\", \"className\", \"classPrefix\", \"cleanable\", \"container\", \"containerPadding\", \"data\", \"defaultOpen\", \"defaultValue\", \"disabled\", \"disabledItemValues\", \"labelKey\", \"locale\", \"menuClassName\", \"menuHeight\", \"menuStyle\", \"menuWidth\", \"onChange\", \"onClean\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onHide\", \"onOpen\", \"onSearch\", \"onSelect\", \"open\", \"placeholder\", \"placement\", \"renderExtraFooter\", \"renderMenu\", \"renderMenuItem\", \"renderValue\", \"searchable\", \"style\", \"toggleComponentClass\", \"value\", \"valueKey\"]);\n(0, _reactLifecyclesCompat.polyfill)(Dropdown);\nvar enhance = (0, _utils2.defaultProps)({\n  classPrefix: 'picker'\n});\n\nvar _default = enhance(Dropdown);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}