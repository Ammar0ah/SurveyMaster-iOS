{"ast":null,"code":"var _jsxFileName = \"/Users/ammar0ah/Desktop/SurveyMaster/SurveyMaster/client/src/Components/Question/MultipleChoise/MultipleChoice.js\";\nimport React, { Component } from \"react\";\nimport Choise from \"./Choise/Choise\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/types\";\nimport styleClass from \"./MultipleChoise.module.css\";\nimport { MDBBtn } from \"mdbreact\";\nimport { IconButton, Icon } from \"rsuite\";\n\nclass multipleChoice extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.keyPressedHandler = (event, index) => {\n      if (event.key === \"Enter\") {\n        this.props.addChoiceHandler(index);\n      }\n    };\n  }\n\n  render() {\n    const Qs = this.props.pages[0].questions;\n    const index = this.props.index;\n    const choices = Qs[index].content.choices;\n    let Choices = [];\n\n    if (choices) {\n      Choices = choices.map((el, id) => {\n        return React.createElement(Choise, {\n          Focus: id == choices.length - 1,\n          key: id,\n          index: index,\n          id: id,\n          el: el,\n          type: this.props.type,\n          keyPressedHandler: e => this.keyPressedHandler(e, index),\n          clicked: () => this.props.deleteChoiceHandler(index, id),\n          changeChoiseHandler: newVal => this.props.changeChoiseHandler(index, id, newVal),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        });\n      });\n    }\n\n    const AddButton = React.createElement(\"div\", {\n      className: styleClass.Center,\n      key: Choices.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      icon: React.createElement(Icon, {\n        icon: \"plus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }),\n      color: \"blue\",\n      circle: true,\n      onClick: () => this.props.addChoiceHandler(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n    Choices.push(AddButton);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, Choices);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    pages: state.createSurvey.pages\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeChoiseHandler: (index, choiceIndex, newVal) => dispatch({\n      type: actions.CHANGE_CHOISE_LABEL,\n      index: index,\n      choiceIndex: choiceIndex,\n      val: newVal\n    }),\n    addChoiceHandler: index => dispatch({\n      type: actions.ADD_CHOICE,\n      index: index\n    }),\n    deleteChoiceHandler: (index, choiceIndex) => dispatch({\n      type: actions.DELETE_CHOICE,\n      index: index,\n      choiceIndex: choiceIndex\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(multipleChoice);","map":{"version":3,"sources":["/Users/ammar0ah/Desktop/SurveyMaster/SurveyMaster/client/src/Components/Question/MultipleChoise/MultipleChoice.js"],"names":["React","Component","Choise","connect","actions","styleClass","MDBBtn","IconButton","Icon","multipleChoice","keyPressedHandler","event","index","key","props","addChoiceHandler","render","Qs","pages","questions","choices","content","Choices","map","el","id","length","type","e","deleteChoiceHandler","newVal","changeChoiseHandler","AddButton","Center","push","mapStateToProps","state","createSurvey","mapDispatchToProps","dispatch","choiceIndex","CHANGE_CHOISE_LABEL","val","ADD_CHOICE","DELETE_CHOICE"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Choise from \"./Choise/Choise\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../store/actions/types\";\nimport styleClass from \"./MultipleChoise.module.css\";\nimport { MDBBtn } from \"mdbreact\";\nimport { IconButton, Icon } from \"rsuite\";\n\nclass multipleChoice extends Component {\n  keyPressedHandler = (event, index) => {\n    if (event.key === \"Enter\") {\n      this.props.addChoiceHandler(index);\n    }\n  };\n  render() {\n    const Qs = this.props.pages[0].questions;\n    const index = this.props.index;\n    const choices = Qs[index].content.choices;\n    let Choices = [];\n    if (choices) {\n      Choices = choices.map((el, id) => {\n        return (\n          <Choise\n            Focus={id == choices.length - 1}\n            key={id}\n            index={index}\n            id={id}\n            el={el}\n            type={this.props.type}\n            keyPressedHandler={e => this.keyPressedHandler(e, index)}\n            clicked={() => this.props.deleteChoiceHandler(index, id)}\n            changeChoiseHandler={newVal =>\n              this.props.changeChoiseHandler(index, id, newVal)\n            }\n          />\n        );\n      });\n    }\n    const AddButton = (\n      <div className={styleClass.Center} key={Choices.length}>\n        <IconButton\n          icon={<Icon icon=\"plus\" />}\n          color=\"blue\"\n          circle\n          onClick={() => this.props.addChoiceHandler(index)}\n        />\n      </div>\n    );\n    Choices.push(AddButton);\n    return <React.Fragment>{Choices}</React.Fragment>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    pages: state.createSurvey.pages\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeChoiseHandler: (index, choiceIndex, newVal) =>\n      dispatch({\n        type: actions.CHANGE_CHOISE_LABEL,\n        index: index,\n        choiceIndex: choiceIndex,\n        val: newVal\n      }),\n    addChoiceHandler: index =>\n      dispatch({ type: actions.ADD_CHOICE, index: index }),\n    deleteChoiceHandler: (index, choiceIndex) =>\n      dispatch({\n        type: actions.DELETE_CHOICE,\n        index: index,\n        choiceIndex: choiceIndex\n      })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(multipleChoice);\n"]},"metadata":{},"sourceType":"module"}