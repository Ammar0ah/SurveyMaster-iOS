{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _rsuiteIntl = require(\"rsuite-intl\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _utils = require(\"./utils\");\n\nvar getSize = function getSize(size) {\n  if (size === void 0) {\n    size = 0;\n  }\n\n  var K = 1024;\n  var M = 1024 * 1024;\n  var G = 1024 * 1024 * 1024;\n\n  if (size > G) {\n    return (size / M).toFixed(2) + \"GB\";\n  }\n\n  if (size > M) {\n    return (size / M).toFixed(2) + \"MB\";\n  }\n\n  if (size > K) {\n    return (size / K).toFixed(2) + \"KB\";\n  }\n\n  return size + \"B\";\n};\n\nvar UploadFileItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(UploadFileItem, _React$Component);\n\n  function UploadFileItem(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleRemove\", function (event) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          onCancel = _this$props.onCancel,\n          file = _this$props.file;\n\n      if (disabled) {\n        return;\n      }\n\n      onCancel && onCancel(file.fileKey, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handlePreview\", function (event) {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          onPreview = _this$props2.onPreview,\n          file = _this$props2.file;\n\n      if (disabled) {\n        return;\n      }\n\n      onPreview && onPreview(file, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleReupload\", function (event) {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          onReupload = _this$props3.onReupload,\n          file = _this$props3.file;\n\n      if (disabled) {\n        return;\n      }\n\n      onReupload && onReupload(file, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"addPrefix\", function (name) {\n      return (0, _utils.prefix)(_this.props.classPrefix)(name);\n    });\n    var _file = props.file;\n    _this.state = {\n      previewImage: _file.url ? _file.url : null\n    };\n\n    if (!_file.url) {\n      _this.getThumbnail(function (previewImage) {\n        _this.setState({\n          previewImage: previewImage\n        });\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = UploadFileItem.prototype;\n\n  _proto.getThumbnail = function getThumbnail(callback) {\n    var _this$props4 = this.props,\n        file = _this$props4.file,\n        listType = _this$props4.listType,\n        maxPreviewFileSize = _this$props4.maxPreviewFileSize;\n\n    if (!~['picture-text', 'picture'].indexOf(listType)) {\n      return;\n    }\n\n    if (!file.blobFile || (0, _get2.default)(file, 'blobFile.size') > maxPreviewFileSize) {\n      return;\n    }\n\n    (0, _utils.previewFile)(file.blobFile, callback);\n  };\n\n  _proto.renderProgressBar = function renderProgressBar() {\n    var _this$props5 = this.props,\n        disabled = _this$props5.disabled,\n        file = _this$props5.file;\n    var _file$progress = file.progress,\n        progress = _file$progress === void 0 ? 0 : _file$progress,\n        status = file.status;\n    var show = !disabled && status === 'uploading';\n    var visibility = show ? 'visible' : 'hidden';\n    var wrapStyle = {\n      visibility: visibility\n    };\n    var progressbarStyle = {\n      width: progress + \"%\"\n    };\n    return React.createElement(\"div\", {\n      className: this.addPrefix('progress'),\n      style: wrapStyle\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('progress-bar'),\n      style: progressbarStyle\n    }));\n  };\n\n  _proto.renderPreview = function renderPreview() {\n    var previewImage = this.state.previewImage;\n    var file = this.props.file;\n\n    if (previewImage) {\n      return React.createElement(\"div\", {\n        className: this.addPrefix('preview')\n      }, React.createElement(\"img\", {\n        role: \"presentation\",\n        src: previewImage,\n        alt: file.name,\n        onClick: this.handlePreview\n      }));\n    }\n\n    return null;\n  };\n\n  _proto.renderLoading = function renderLoading() {\n    var _classNames;\n\n    var file = this.props.file;\n    var uploading = file.status === 'uploading';\n    var classes = (0, _classnames.default)(this.addPrefix('icon-wrapper'), (_classNames = {}, _classNames[this.addPrefix('icon-loading')] = uploading, _classNames));\n    return React.createElement(\"div\", {\n      className: classes\n    }, React.createElement(\"i\", {\n      className: this.addPrefix('icon')\n    }));\n  };\n\n  _proto.renderRemoveButton = function renderRemoveButton() {\n    var removable = this.props.removable;\n\n    if (!removable) {\n      return null;\n    }\n\n    return React.createElement(\"a\", {\n      \"aria-label\": \"Remove\",\n      className: this.addPrefix('btn-remove'),\n      onClick: this.handleRemove,\n      role: \"button\",\n      tabIndex: \"-1\"\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"\\xD7\"));\n  };\n\n  _proto.renderErrorStatus = function renderErrorStatus() {\n    var file = this.props.file;\n\n    if (file.status === 'error') {\n      return React.createElement(\"div\", {\n        className: this.addPrefix('status')\n      }, React.createElement(_rsuiteIntl.FormattedMessage, {\n        id: \"error\"\n      }), React.createElement(\"a\", {\n        role: \"button\",\n        tabIndex: \"-1\",\n        onClick: this.handleReupload\n      }, React.createElement(\"i\", {\n        className: this.addPrefix('icon-reupload')\n      })));\n    }\n\n    return null;\n  };\n\n  _proto.renderFileSize = function renderFileSize() {\n    var file = this.props.file;\n\n    if (file.status !== 'error' && file.blobFile && file.blobFile.size) {\n      return React.createElement(\"span\", {\n        className: this.addPrefix('size')\n      }, getSize(file.blobFile.size));\n    }\n\n    return null;\n  };\n\n  _proto.renderFilePanel = function renderFilePanel() {\n    var _this$props6 = this.props,\n        file = _this$props6.file,\n        renderFileInfo = _this$props6.renderFileInfo;\n    var fileElement = React.createElement(\"a\", {\n      role: \"presentation\",\n      className: this.addPrefix('title'),\n      onClick: this.handlePreview\n    }, file.name);\n    return React.createElement(\"div\", {\n      className: this.addPrefix('panel')\n    }, React.createElement(\"div\", {\n      className: this.addPrefix('content')\n    }, renderFileInfo ? renderFileInfo(file, fileElement) : fileElement, this.renderErrorStatus(), this.renderFileSize()));\n  };\n\n  _proto.render = function render() {\n    var _classNames2;\n\n    var _this$props7 = this.props,\n        disabled = _this$props7.disabled,\n        file = _this$props7.file,\n        classPrefix = _this$props7.classPrefix,\n        listType = _this$props7.listType,\n        className = _this$props7.className,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props7, [\"disabled\", \"file\", \"classPrefix\", \"listType\", \"className\"]);\n    var classes = (0, _classnames.default)(classPrefix, className, this.addPrefix(listType), (_classNames2 = {}, _classNames2[this.addPrefix('has-error')] = file.status === 'error', _classNames2[this.addPrefix('disabled')] = disabled, _classNames2));\n    var unhandled = (0, _utils.getUnhandledProps)(UploadFileItem, rest);\n\n    if (listType === 'picture') {\n      return React.createElement(\"div\", {\n        className: classes\n      }, this.renderLoading(), this.renderPreview(), this.renderErrorStatus(), this.renderRemoveButton());\n    }\n\n    if (listType === 'picture-text') {\n      return React.createElement(\"div\", {\n        className: classes\n      }, this.renderLoading(), this.renderPreview(), this.renderFilePanel(), this.renderProgressBar(), this.renderRemoveButton());\n    }\n\n    return React.createElement(\"div\", (0, _extends2.default)({}, unhandled, {\n      className: classes\n    }), this.renderLoading(), this.renderFilePanel(), this.renderProgressBar(), this.renderRemoveButton());\n  };\n\n  return UploadFileItem;\n}(React.Component);\n\n(0, _defineProperty2.default)(UploadFileItem, \"defaultProps\", {\n  maxPreviewFileSize: 1024 * 1024 * 5,\n  // 5MB\n  listType: 'text',\n  removable: true\n});\n(0, _defineProperty2.default)(UploadFileItem, \"handledProps\", [\"className\", \"classPrefix\", \"disabled\", \"file\", \"listType\", \"maxPreviewFileSize\", \"onCancel\", \"onPreview\", \"onReupload\", \"removable\", \"renderFileInfo\"]);\n\nvar _default = (0, _utils.defaultProps)({\n  classPrefix: 'uploader-file-item'\n})(UploadFileItem);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}