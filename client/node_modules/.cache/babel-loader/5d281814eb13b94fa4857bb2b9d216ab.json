{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _kebabCase2 = _interopRequireDefault(require(\"lodash/kebabCase\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _setStatic = _interopRequireDefault(require(\"recompose/setStatic\"));\n\nvar _setDisplayName = _interopRequireDefault(require(\"recompose/setDisplayName\"));\n\nvar _Overlay = require(\"rsuite-utils/lib/Overlay\");\n\nvar _shallowEqual = _interopRequireDefault(require(\"rsuite-utils/lib/utils/shallowEqual\"));\n\nvar _DropdownToggle = _interopRequireDefault(require(\"./DropdownToggle\"));\n\nvar _DropdownMenu = _interopRequireDefault(require(\"./DropdownMenu\"));\n\nvar _DropdownMenuItem = _interopRequireDefault(require(\"./DropdownMenuItem\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _utils = require(\"./utils\");\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"toggle\", function (isOpen) {\n      var _this$props = _this.props,\n          onOpen = _this$props.onOpen,\n          onClose = _this$props.onClose,\n          onToggle = _this$props.onToggle;\n      var open = (0, _isUndefined2.default)(isOpen) ? !_this.getOpen() : isOpen;\n      var handleToggle = open ? onOpen : onClose;\n\n      _this.setState({\n        open: open\n      }, function () {\n        handleToggle && handleToggle();\n      });\n\n      onToggle && onToggle(open);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleClick\", function (event) {\n      event.preventDefault();\n\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.toggle();\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleOpenChange\", function (event) {\n      var eventKey = _this.props.eventKey;\n      var onOpenChange = _this.context.onOpenChange;\n      onOpenChange && onOpenChange(eventKey, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleToggleChange\", function (eventKey, event) {\n      var onOpenChange = _this.context.onOpenChange;\n      onOpenChange && onOpenChange(eventKey, event);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleMouseEnter\", function () {\n      if (!_this.props.disabled) {\n        _this.toggle(true);\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleMouseLeave\", function () {\n      if (!_this.props.disabled) {\n        _this.toggle(false);\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleSelect\", function (eventKey, event) {\n      var onSelect = _this.props.onSelect;\n      onSelect && onSelect(eventKey, event);\n\n      _this.toggle(false);\n    });\n    _this.state = {\n      title: null,\n      open: props.open\n    };\n    return _this;\n  }\n\n  var _proto = Dropdown.prototype;\n\n  _proto.getOpen = function getOpen() {\n    var open = this.props.open;\n\n    if ((0, _isUndefined2.default)(open)) {\n      return this.state.open;\n    }\n\n    return open;\n  };\n\n  _proto.render = function render() {\n    var _classNames;\n\n    var _this$props2 = this.props,\n        title = _this$props2.title,\n        children = _this$props2.children,\n        className = _this$props2.className,\n        menuStyle = _this$props2.menuStyle,\n        disabled = _this$props2.disabled,\n        renderTitle = _this$props2.renderTitle,\n        classPrefix = _this$props2.classPrefix,\n        placement = _this$props2.placement,\n        activeKey = _this$props2.activeKey,\n        tabIndex = _this$props2.tabIndex,\n        toggleClassName = _this$props2.toggleClassName,\n        trigger = _this$props2.trigger,\n        icon = _this$props2.icon,\n        onClick = _this$props2.onClick,\n        onMouseEnter = _this$props2.onMouseEnter,\n        onMouseLeave = _this$props2.onMouseLeave,\n        onContextMenu = _this$props2.onContextMenu,\n        eventKey = _this$props2.eventKey,\n        Component = _this$props2.componentClass,\n        toggleComponentClass = _this$props2.toggleComponentClass,\n        noCaret = _this$props2.noCaret,\n        style = _this$props2.style,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props2, [\"title\", \"children\", \"className\", \"menuStyle\", \"disabled\", \"renderTitle\", \"classPrefix\", \"placement\", \"activeKey\", \"tabIndex\", \"toggleClassName\", \"trigger\", \"icon\", \"onClick\", \"onMouseEnter\", \"onMouseLeave\", \"onContextMenu\", \"eventKey\", \"componentClass\", \"toggleComponentClass\", \"noCaret\", \"style\"]);\n    var _this$context = this.context,\n        _this$context$openKey = _this$context.openKeys,\n        openKeys = _this$context$openKey === void 0 ? [] : _this$context$openKey,\n        sidenav = _this$context.sidenav,\n        expanded = _this$context.expanded;\n    var menuExpanded = openKeys.some(function (key) {\n      return (0, _shallowEqual.default)(key, eventKey);\n    });\n    var addPrefix = (0, _utils.prefix)(classPrefix);\n    var open = this.getOpen();\n    var collapsible = sidenav && expanded;\n    var unhandled = (0, _utils.getUnhandledProps)(Dropdown, props);\n    var toggleProps = (0, _extends2.default)({}, unhandled, {\n      onClick: (0, _utils.createChainedFunction)(this.handleOpenChange, onClick),\n      onContextMenu: onContextMenu\n    });\n    var dropdownProps = {\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave\n    };\n    /**\n     * Bind event of trigger,\n     * not used in  in the expanded state of '<Sidenav>'\n     */\n\n    if (!collapsible) {\n      if ((0, _utils.isOneOf)('click', trigger)) {\n        toggleProps.onClick = (0, _utils.createChainedFunction)(this.handleClick, toggleProps.onClick);\n      }\n\n      if ((0, _utils.isOneOf)('contextMenu', trigger)) {\n        toggleProps.onContextMenu = (0, _utils.createChainedFunction)(this.handleClick, onContextMenu);\n      }\n\n      if ((0, _utils.isOneOf)('hover', trigger)) {\n        dropdownProps.onMouseEnter = (0, _utils.createChainedFunction)(this.handleMouseEnter, onMouseEnter);\n        dropdownProps.onMouseLeave = (0, _utils.createChainedFunction)(this.handleMouseLeave, onMouseLeave);\n      }\n    }\n\n    var Toggle = React.createElement(_DropdownToggle.default, (0, _extends2.default)({}, toggleProps, {\n      noCaret: noCaret,\n      tabIndex: tabIndex,\n      className: toggleClassName,\n      renderTitle: renderTitle,\n      icon: icon,\n      componentClass: toggleComponentClass\n    }), this.state.title || title);\n    var Menu = React.createElement(_DropdownMenu.default, {\n      expanded: menuExpanded,\n      collapsible: collapsible,\n      activeKey: activeKey,\n      onSelect: this.handleSelect,\n      style: menuStyle,\n      onToggle: this.handleToggleChange,\n      openKeys: openKeys\n    }, children);\n\n    if (open) {\n      Menu = React.createElement(_Overlay.RootCloseWrapper, {\n        onRootClose: this.toggle\n      }, Menu);\n    }\n\n    var classes = (0, _classnames.default)(classPrefix, addPrefix(\"placement-\" + (0, _kebabCase2.default)(placement)), className, (_classNames = {}, _classNames[addPrefix('disabled')] = disabled, _classNames[addPrefix('no-caret')] = noCaret, _classNames[addPrefix('open')] = open, _classNames[addPrefix(menuExpanded ? 'expand' : 'collapse')] = sidenav, _classNames));\n    return React.createElement(Component, (0, _extends2.default)({}, dropdownProps, {\n      style: style,\n      className: classes,\n      role: \"menu\"\n    }), Menu, Toggle);\n  };\n\n  return Dropdown;\n}(React.Component);\n\n(0, _defineProperty2.default)(Dropdown, \"defaultProps\", {\n  placement: 'bottomLeft',\n  trigger: 'click',\n  tabIndex: 0\n});\n(0, _defineProperty2.default)(Dropdown, \"contextTypes\", {\n  sidenav: _propTypes.default.bool,\n  expanded: _propTypes.default.bool,\n  openKeys: _propTypes.default.array,\n  onOpenChange: _propTypes.default.func\n});\n(0, _defineProperty2.default)(Dropdown, \"handledProps\", [\"activeKey\", \"children\", \"className\", \"classPrefix\", \"componentClass\", \"disabled\", \"eventKey\", \"icon\", \"menuStyle\", \"noCaret\", \"onClick\", \"onClose\", \"onContextMenu\", \"onMouseEnter\", \"onMouseLeave\", \"onOpen\", \"onSelect\", \"onToggle\", \"open\", \"placement\", \"renderTitle\", \"style\", \"tabIndex\", \"title\", \"toggleClassName\", \"toggleComponentClass\", \"trigger\"]);\nvar EnhancedDropdown = (0, _utils.defaultProps)({\n  componentClass: 'div',\n  classPrefix: 'dropdown'\n})(Dropdown);\n(0, _setStatic.default)('Item', _DropdownMenuItem.default)(EnhancedDropdown);\n(0, _setStatic.default)('Menu', _DropdownMenu.default)(EnhancedDropdown);\nvar Component = (0, _setDisplayName.default)('Dropdown')(EnhancedDropdown);\nvar _default = Component;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}