{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.shouldShowNodeByExpanded = shouldShowNodeByExpanded;\nexports.flattenTree = flattenTree;\nexports.getNodeParents = getNodeParents;\nexports.shouldDisplay = shouldDisplay;\nexports.getVirtualLisHeight = getVirtualLisHeight;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _trim2 = _interopRequireDefault(require(\"lodash/trim\"));\n\nvar _isArray2 = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _intersection2 = _interopRequireDefault(require(\"lodash/intersection\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _utils = require(\"rsuite-utils/lib/utils\");\n\nvar SEARCH_BAR_HEIGHT = 48;\nvar MENU_PADDING = 12;\n/**\n * 判断当前节点是否应该显示\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nfunction shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = (0, _intersection2.default)(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\n\nfunction flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!(0, _isArray2.default)(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push((0, _extends2.default)({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\n\nfunction getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node && node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 判断当前节点是否显示\n * @param {*} label\n * @param {*} searchKeyword\n */\n\n\nfunction shouldDisplay(label, searchKeyword) {\n  if (!(0, _trim2.default)(searchKeyword)) {\n    return true;\n  }\n\n  var keyword = searchKeyword.toLocaleLowerCase();\n\n  if (typeof label === 'string') {\n    return label.toLocaleLowerCase().indexOf(keyword) >= 0;\n  } else if (React.isValidElement(label)) {\n    var nodes = (0, _utils.reactToString)(label);\n    return nodes.join('').toLocaleLowerCase().indexOf(keyword) >= 0;\n  }\n\n  return false;\n}\n/**\n * 获取 VirtualList 的高度\n * @param {*} inline\n * @param {*} height\n */\n\n\nfunction getVirtualLisHeight(inline, height) {\n  if (height === void 0) {\n    height = 0;\n  }\n\n  return inline ? height - MENU_PADDING * 2 : height - SEARCH_BAR_HEIGHT - MENU_PADDING * 2;\n}","map":null,"metadata":{},"sourceType":"script"}